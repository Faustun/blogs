<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>前端导出excel</title>
      <link href="/blogs/2019/03/21/derive/"/>
      <url>/blogs/2019/03/21/derive/</url>
      <content type="html"><![CDATA[<p>纯前端将数据导出excel<br><a id="more"></a></p><h4 id="安装依赖"><a href="#安装依赖" class="headerlink" title="安装依赖"></a>安装依赖</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">npm <span class="keyword">install</span> <span class="comment">--save file-saver xlsx</span></div><div class="line"></div><div class="line">npm <span class="keyword">install</span> <span class="comment">--save-dev script-loader</span></div></pre></td></tr></table></figure><h4 id="引入文件"><a href="#引入文件" class="headerlink" title="引入文件"></a>引入文件</h4><p>在项目中创建一个文件夹（比如vendor，一般是在src目录下创建）并放入Blob.js和Export2Excel.js</p><h4 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line">formatJson(filterVal, jsonData) &#123;</div><div class="line">  <span class="keyword">return</span> jsonData.map(<span class="function"><span class="params">v</span> =&gt;</span> filterVal.map(<span class="function"><span class="params">j</span> =&gt;</span> v[j]))</div><div class="line">&#125;,</div><div class="line">export2Excel() &#123;</div><div class="line">  <span class="keyword">this</span>.loading = <span class="literal">true</span></div><div class="line">  printAllTeacher(getUserid()).then(<span class="function"><span class="params">response</span> =&gt;</span> &#123;</div><div class="line">    <span class="keyword">this</span>.exportList = response.data</div><div class="line">    <span class="keyword">const</span> arr = []</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="keyword">this</span>.exportList.length; i++) &#123;</div><div class="line">      <span class="keyword">const</span> obj = &#123;&#125;</div><div class="line">      <span class="keyword">const</span> registerTime = <span class="keyword">this</span>.exportList[i].registerTime</div><div class="line">      <span class="keyword">const</span> instructionsTime = <span class="keyword">this</span>.exportList[i].instructionsTime</div><div class="line">      obj.customerName = <span class="keyword">this</span>.exportList[i].customerName</div><div class="line">      obj.teachersName = <span class="keyword">this</span>.exportList[i].teachersName</div><div class="line">      obj.teachersSex = <span class="keyword">this</span>.exportList[i].teachersSex</div><div class="line">      obj.teachersLevel = <span class="keyword">this</span>.exportList[i].teachersLevel</div><div class="line">      obj.teachersPhone = <span class="keyword">this</span>.exportList[i].teachersPhone</div><div class="line">      arr.push(obj)</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">require</span>.ensure([], () =&gt; &#123;</div><div class="line">      <span class="keyword">const</span> &#123; exportJsonToExcel &#125; = <span class="built_in">require</span>(<span class="string">'../vendor/Export2Excel'</span>)</div><div class="line">      <span class="keyword">const</span> tHeader = [<span class="string">'机构'</span>, <span class="string">'姓名'</span>, <span class="string">'性别'</span>, <span class="string">'级别'</span>, <span class="string">'电话'</span>]</div><div class="line">      <span class="keyword">const</span> filterVal = [<span class="string">'customerName'</span>, <span class="string">'teachersName'</span>, <span class="string">'teachersSex'</span>, <span class="string">'teachersLevel'</span>, <span class="string">'teachersPhone'</span>]</div><div class="line">      <span class="keyword">const</span> list = arr</div><div class="line">      <span class="keyword">const</span> data = <span class="keyword">this</span>.formatJson(filterVal, list)</div><div class="line">      exportJsonToExcel(tHeader, data, <span class="string">'客户师资'</span>)</div><div class="line">      <span class="keyword">this</span>.loading = <span class="literal">false</span></div><div class="line">    &#125;)</div><div class="line">  &#125;).catch(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">    <span class="keyword">this</span>.loading = <span class="literal">false</span></div><div class="line">  &#125;)</div><div class="line">&#125;</div></pre></td></tr></table></figure><h4 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">require</span>(<span class="string">'script-loader!file-saver'</span>); <span class="comment">//保存文件用</span></div><div class="line"><span class="built_in">require</span>(<span class="string">'script-loader!vendor/Blob'</span>); <span class="comment">//转二进制用</span></div><div class="line"><span class="built_in">require</span>(<span class="string">'script-loader!xlsx/dist/xlsx.core.min'</span>); <span class="comment">//xlsx核心</span></div></pre></td></tr></table></figure><p>由于这几个文件不支持import引入，所以我们需要<code>script-loader</code>来将他们挂载到全局环境下</p><p>另外还需要配置文件的alias</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</div><div class="line">  resolve: &#123;</div><div class="line">    alias: &#123;</div><div class="line">      vendor: resolve(<span class="string">'src/vendor'</span>)</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h4 id="文件"><a href="#文件" class="headerlink" title="文件"></a>文件</h4><h6 id="Blob-js"><a href="#Blob-js" class="headerlink" title="Blob.js"></a>Blob.js</h6><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div><div class="line">203</div><div class="line">204</div><div class="line">205</div><div class="line">206</div><div class="line">207</div><div class="line">208</div><div class="line">209</div><div class="line">210</div><div class="line">211</div><div class="line">212</div><div class="line">213</div><div class="line">214</div><div class="line">215</div><div class="line">216</div><div class="line">217</div><div class="line">218</div><div class="line">219</div><div class="line">220</div><div class="line">221</div><div class="line">222</div><div class="line">223</div><div class="line">224</div><div class="line">225</div><div class="line">226</div><div class="line">227</div><div class="line">228</div><div class="line">229</div><div class="line">230</div><div class="line">231</div><div class="line">232</div><div class="line">233</div><div class="line">234</div><div class="line">235</div><div class="line">236</div><div class="line">237</div><div class="line">238</div><div class="line">239</div><div class="line">240</div><div class="line">241</div><div class="line">242</div><div class="line">243</div><div class="line">244</div><div class="line">245</div><div class="line">246</div><div class="line">247</div><div class="line">248</div><div class="line">249</div><div class="line">250</div><div class="line">251</div><div class="line">252</div><div class="line">253</div><div class="line">254</div><div class="line">255</div><div class="line">256</div><div class="line">257</div><div class="line">258</div><div class="line">259</div><div class="line">260</div><div class="line">261</div><div class="line">262</div><div class="line">263</div><div class="line">264</div><div class="line">265</div><div class="line">266</div><div class="line">267</div><div class="line">268</div><div class="line">269</div><div class="line">270</div><div class="line">271</div><div class="line">272</div><div class="line">273</div><div class="line">274</div><div class="line">275</div><div class="line">276</div><div class="line">277</div><div class="line">278</div><div class="line">279</div><div class="line">280</div><div class="line">281</div><div class="line">282</div><div class="line">283</div><div class="line">284</div><div class="line">285</div><div class="line">286</div><div class="line">287</div><div class="line">288</div><div class="line">289</div><div class="line">290</div><div class="line">291</div><div class="line">292</div><div class="line">293</div><div class="line">294</div><div class="line">295</div><div class="line">296</div><div class="line">297</div><div class="line">298</div><div class="line">299</div><div class="line">300</div><div class="line">301</div><div class="line">302</div><div class="line">303</div><div class="line">304</div><div class="line">305</div><div class="line">306</div><div class="line">307</div><div class="line">308</div><div class="line">309</div><div class="line">310</div><div class="line">311</div><div class="line">312</div><div class="line">313</div><div class="line">314</div><div class="line">315</div><div class="line">316</div><div class="line">317</div><div class="line">318</div><div class="line">319</div><div class="line">320</div><div class="line">321</div><div class="line">322</div><div class="line">323</div><div class="line">324</div><div class="line">325</div><div class="line">326</div><div class="line">327</div><div class="line">328</div><div class="line">329</div><div class="line">330</div><div class="line">331</div><div class="line">332</div><div class="line">333</div><div class="line">334</div><div class="line">335</div><div class="line">336</div><div class="line">337</div><div class="line">338</div><div class="line">339</div><div class="line">340</div><div class="line">341</div><div class="line">342</div><div class="line">343</div><div class="line">344</div><div class="line">345</div><div class="line">346</div><div class="line">347</div><div class="line">348</div><div class="line">349</div><div class="line">350</div><div class="line">351</div><div class="line">352</div><div class="line">353</div><div class="line">354</div><div class="line">355</div><div class="line">356</div><div class="line">357</div><div class="line">358</div><div class="line">359</div><div class="line">360</div><div class="line">361</div><div class="line">362</div><div class="line">363</div><div class="line">364</div><div class="line">365</div><div class="line">366</div><div class="line">367</div><div class="line">368</div><div class="line">369</div><div class="line">370</div><div class="line">371</div><div class="line">372</div><div class="line">373</div><div class="line">374</div><div class="line">375</div><div class="line">376</div><div class="line">377</div><div class="line">378</div><div class="line">379</div><div class="line">380</div><div class="line">381</div><div class="line">382</div><div class="line">383</div><div class="line">384</div><div class="line">385</div><div class="line">386</div><div class="line">387</div><div class="line">388</div><div class="line">389</div><div class="line">390</div><div class="line">391</div><div class="line">392</div><div class="line">393</div><div class="line">394</div><div class="line">395</div><div class="line">396</div><div class="line">397</div><div class="line">398</div><div class="line">399</div><div class="line">400</div><div class="line">401</div><div class="line">402</div><div class="line">403</div><div class="line">404</div><div class="line">405</div><div class="line">406</div><div class="line">407</div><div class="line">408</div><div class="line">409</div><div class="line">410</div><div class="line">411</div><div class="line">412</div><div class="line">413</div><div class="line">414</div><div class="line">415</div><div class="line">416</div><div class="line">417</div><div class="line">418</div><div class="line">419</div><div class="line">420</div><div class="line">421</div><div class="line">422</div><div class="line">423</div><div class="line">424</div><div class="line">425</div><div class="line">426</div><div class="line">427</div><div class="line">428</div><div class="line">429</div><div class="line">430</div><div class="line">431</div><div class="line">432</div><div class="line">433</div><div class="line">434</div><div class="line">435</div><div class="line">436</div><div class="line">437</div><div class="line">438</div><div class="line">439</div><div class="line">440</div><div class="line">441</div><div class="line">442</div><div class="line">443</div><div class="line">444</div><div class="line">445</div><div class="line">446</div><div class="line">447</div><div class="line">448</div><div class="line">449</div><div class="line">450</div><div class="line">451</div><div class="line">452</div><div class="line">453</div><div class="line">454</div><div class="line">455</div><div class="line">456</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/* Blob.js</span></div><div class="line"><span class="comment"> * A Blob, File, FileReader &amp; URL implementation.</span></div><div class="line"><span class="comment"> * 2018-08-09</span></div><div class="line"><span class="comment"> *</span></div><div class="line"><span class="comment"> * By Eli Grey, http://eligrey.com</span></div><div class="line"><span class="comment"> * By Jimmy Wärting, https://github.com/jimmywarting</span></div><div class="line"><span class="comment"> * License: MIT</span></div><div class="line"><span class="comment"> *   See https://github.com/eligrey/Blob.js/blob/master/LICENSE.md</span></div><div class="line"><span class="comment"> */</span></div><div class="line"></div><div class="line">;(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line"></div><div class="line">  <span class="keyword">var</span> global = <span class="keyword">typeof</span> <span class="built_in">window</span> === <span class="string">'object'</span></div><div class="line">      ? <span class="built_in">window</span> : <span class="keyword">typeof</span> self === <span class="string">'object'</span></div><div class="line">      ? self : <span class="keyword">this</span></div><div class="line"></div><div class="line">  <span class="keyword">var</span> BlobBuilder = global.BlobBuilder</div><div class="line">    || global.WebKitBlobBuilder</div><div class="line">    || global.MSBlobBuilder</div><div class="line">    || global.MozBlobBuilder;</div><div class="line"></div><div class="line">  global.URL = global.URL || global.webkitURL || <span class="function"><span class="keyword">function</span>(<span class="params">href, a</span>) </span>&#123;</div><div class="line">  a = <span class="built_in">document</span>.createElement(<span class="string">'a'</span>)</div><div class="line">  a.href = href</div><div class="line">  <span class="keyword">return</span> a</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="keyword">var</span> origBlob = global.Blob</div><div class="line">  <span class="keyword">var</span> createObjectURL = URL.createObjectURL</div><div class="line">  <span class="keyword">var</span> revokeObjectURL = URL.revokeObjectURL</div><div class="line">  <span class="keyword">var</span> strTag = global.Symbol &amp;&amp; global.Symbol.toStringTag</div><div class="line">  <span class="keyword">var</span> blobSupported = <span class="literal">false</span></div><div class="line">  <span class="keyword">var</span> blobSupportsArrayBufferView = <span class="literal">false</span></div><div class="line">  <span class="keyword">var</span> arrayBufferSupported = !!global.ArrayBuffer</div><div class="line">  <span class="keyword">var</span> blobBuilderSupported = BlobBuilder</div><div class="line">    &amp;&amp; BlobBuilder.prototype.append</div><div class="line">    &amp;&amp; BlobBuilder.prototype.getBlob;</div><div class="line"></div><div class="line">  <span class="keyword">try</span> &#123;</div><div class="line">    <span class="comment">// Check if Blob constructor is supported</span></div><div class="line">    blobSupported = <span class="keyword">new</span> Blob([<span class="string">'ä'</span>]).size === <span class="number">2</span></div><div class="line"></div><div class="line">    <span class="comment">// Check if Blob constructor supports ArrayBufferViews</span></div><div class="line">    <span class="comment">// Fails in Safari 6, so we need to map to ArrayBuffers there.</span></div><div class="line">    blobSupportsArrayBufferView = <span class="keyword">new</span> Blob([<span class="keyword">new</span> <span class="built_in">Uint8Array</span>([<span class="number">1</span>,<span class="number">2</span>])]).size === <span class="number">2</span></div><div class="line">  &#125; <span class="keyword">catch</span>(e) &#123;&#125;</div><div class="line"></div><div class="line">  <span class="comment">/**</span></div><div class="line"><span class="comment">   * Helper function that maps ArrayBufferViews to ArrayBuffers</span></div><div class="line"><span class="comment">   * Used by BlobBuilder constructor and old browsers that didn't</span></div><div class="line"><span class="comment">   * support it in the Blob constructor.</span></div><div class="line"><span class="comment">   */</span></div><div class="line">  <span class="function"><span class="keyword">function</span> <span class="title">mapArrayBufferViews</span>(<span class="params">ary</span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> ary.map(<span class="function"><span class="keyword">function</span>(<span class="params">chunk</span>) </span>&#123;</div><div class="line">      <span class="keyword">if</span> (chunk.buffer <span class="keyword">instanceof</span> <span class="built_in">ArrayBuffer</span>) &#123;</div><div class="line">        <span class="keyword">var</span> buf = chunk.buffer;</div><div class="line"></div><div class="line">        <span class="comment">// if this is a subarray, make a copy so we only</span></div><div class="line">        <span class="comment">// include the subarray region from the underlying buffer</span></div><div class="line">        <span class="keyword">if</span> (chunk.byteLength !== buf.byteLength) &#123;</div><div class="line">          <span class="keyword">var</span> copy = <span class="keyword">new</span> <span class="built_in">Uint8Array</span>(chunk.byteLength);</div><div class="line">          copy.set(<span class="keyword">new</span> <span class="built_in">Uint8Array</span>(buf, chunk.byteOffset, chunk.byteLength));</div><div class="line">          buf = copy.buffer;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">return</span> buf;</div><div class="line">      &#125;</div><div class="line"></div><div class="line">      <span class="keyword">return</span> chunk;</div><div class="line">    &#125;);</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">function</span> <span class="title">BlobBuilderConstructor</span>(<span class="params">ary, options</span>) </span>&#123;</div><div class="line">    options = options || &#123;&#125;;</div><div class="line"></div><div class="line">    <span class="keyword">var</span> bb = <span class="keyword">new</span> BlobBuilder();</div><div class="line">    mapArrayBufferViews(ary).forEach(<span class="function"><span class="keyword">function</span>(<span class="params">part</span>) </span>&#123;</div><div class="line">      bb.append(part);</div><div class="line">    &#125;);</div><div class="line"></div><div class="line">    <span class="keyword">return</span> options.type ? bb.getBlob(options.type) : bb.getBlob();</div><div class="line">  &#125;;</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">function</span> <span class="title">BlobConstructor</span>(<span class="params">ary, options</span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">new</span> origBlob(mapArrayBufferViews(ary), options || &#123;&#125;);</div><div class="line">  &#125;;</div><div class="line"></div><div class="line">  <span class="keyword">if</span> (global.Blob) &#123;</div><div class="line">    BlobBuilderConstructor.prototype = Blob.prototype;</div><div class="line">    BlobConstructor.prototype = Blob.prototype;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">function</span> <span class="title">FakeBlobBuilder</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">toUTF8Array</span>(<span class="params">str</span>) </span>&#123;</div><div class="line">      <span class="keyword">var</span> utf8 = [];</div><div class="line">      <span class="keyword">for</span> (<span class="keyword">var</span> i=<span class="number">0</span>; i &lt; str.length; i++) &#123;</div><div class="line">        <span class="keyword">var</span> charcode = str.charCodeAt(i);</div><div class="line">        <span class="keyword">if</span> (charcode &lt; <span class="number">0x80</span>) utf8.push(charcode);</div><div class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (charcode &lt; <span class="number">0x800</span>) &#123;</div><div class="line">          utf8.push(<span class="number">0xc0</span> | (charcode &gt;&gt; <span class="number">6</span>), </div><div class="line">          <span class="number">0x80</span> | (charcode &amp; <span class="number">0x3f</span>));</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (charcode &lt; <span class="number">0xd800</span> || charcode &gt;= <span class="number">0xe000</span>) &#123;</div><div class="line">          utf8.push(<span class="number">0xe0</span> | (charcode &gt;&gt; <span class="number">12</span>), </div><div class="line">          <span class="number">0x80</span> | ((charcode&gt;&gt;<span class="number">6</span>) &amp; <span class="number">0x3f</span>), </div><div class="line">          <span class="number">0x80</span> | (charcode &amp; <span class="number">0x3f</span>));</div><div class="line">        &#125;</div><div class="line">        <span class="comment">// surrogate pair</span></div><div class="line">        <span class="keyword">else</span> &#123;</div><div class="line">          i++;</div><div class="line">          <span class="comment">// UTF-16 encodes 0x10000-0x10FFFF by</span></div><div class="line">          <span class="comment">// subtracting 0x10000 and splitting the</span></div><div class="line">          <span class="comment">// 20 bits of 0x0-0xFFFFF into two halves</span></div><div class="line">          charcode = <span class="number">0x10000</span> + (((charcode &amp; <span class="number">0x3ff</span>)&lt;&lt;<span class="number">10</span>)</div><div class="line">          | (str.charCodeAt(i) &amp; <span class="number">0x3ff</span>));</div><div class="line">          utf8.push(<span class="number">0xf0</span> | (charcode &gt;&gt;<span class="number">18</span>), </div><div class="line">          <span class="number">0x80</span> | ((charcode&gt;&gt;<span class="number">12</span>) &amp; <span class="number">0x3f</span>), </div><div class="line">          <span class="number">0x80</span> | ((charcode&gt;&gt;<span class="number">6</span>) &amp; <span class="number">0x3f</span>), </div><div class="line">          <span class="number">0x80</span> | (charcode &amp; <span class="number">0x3f</span>));</div><div class="line">        &#125;</div><div class="line">      &#125;</div><div class="line">      <span class="keyword">return</span> utf8;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">fromUtf8Array</span>(<span class="params">array</span>) </span>&#123;</div><div class="line">      <span class="keyword">var</span> out, i, len, c;</div><div class="line">      <span class="keyword">var</span> char2, char3;</div><div class="line">      </div><div class="line">      out = <span class="string">""</span>;</div><div class="line">      len = array.length;</div><div class="line">      i = <span class="number">0</span>;</div><div class="line">      <span class="keyword">while</span> (i &lt; len) &#123;</div><div class="line">        c = array[i++];</div><div class="line">        <span class="keyword">switch</span> (c &gt;&gt; <span class="number">4</span>)</div><div class="line">        &#123; </div><div class="line">          <span class="keyword">case</span> <span class="number">0</span>: <span class="keyword">case</span> <span class="number">1</span>: <span class="keyword">case</span> <span class="number">2</span>: <span class="keyword">case</span> <span class="number">3</span>: <span class="keyword">case</span> <span class="number">4</span>: <span class="keyword">case</span> <span class="number">5</span>: <span class="keyword">case</span> <span class="number">6</span>: <span class="keyword">case</span> <span class="number">7</span>:</div><div class="line">          <span class="comment">// 0xxxxxxx</span></div><div class="line">          out += <span class="built_in">String</span>.fromCharCode(c);</div><div class="line">          <span class="keyword">break</span>;</div><div class="line">          <span class="keyword">case</span> <span class="number">12</span>: <span class="keyword">case</span> <span class="number">13</span>:</div><div class="line">          <span class="comment">// 110x xxxx   10xx xxxx</span></div><div class="line">          char2 = array[i++];</div><div class="line">          out += <span class="built_in">String</span>.fromCharCode(((c &amp; <span class="number">0x1F</span>) &lt;&lt; <span class="number">6</span>) | (char2 &amp; <span class="number">0x3F</span>));</div><div class="line">          <span class="keyword">break</span>;</div><div class="line">          <span class="keyword">case</span> <span class="number">14</span>:</div><div class="line">          <span class="comment">// 1110 xxxx  10xx xxxx  10xx xxxx</span></div><div class="line">          char2 = array[i++];</div><div class="line">          char3 = array[i++];</div><div class="line">          out += <span class="built_in">String</span>.fromCharCode(((c &amp; <span class="number">0x0F</span>) &lt;&lt; <span class="number">12</span>) |</div><div class="line">          ((char2 &amp; <span class="number">0x3F</span>) &lt;&lt; <span class="number">6</span>) |</div><div class="line">          ((char3 &amp; <span class="number">0x3F</span>) &lt;&lt; <span class="number">0</span>));</div><div class="line">          <span class="keyword">break</span>;</div><div class="line">        &#125;</div><div class="line">      &#125;    </div><div class="line">      <span class="keyword">return</span> out;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">isDataView</span>(<span class="params">obj</span>) </span>&#123;</div><div class="line">      <span class="keyword">return</span> obj &amp;&amp; <span class="built_in">DataView</span>.prototype.isPrototypeOf(obj)</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">bufferClone</span>(<span class="params">buf</span>) </span>&#123;</div><div class="line">      <span class="keyword">var</span> view = <span class="keyword">new</span> <span class="built_in">Array</span>(buf.byteLength)</div><div class="line">      <span class="keyword">var</span> array = <span class="keyword">new</span> <span class="built_in">Uint8Array</span>(buf)</div><div class="line">      <span class="keyword">var</span> i = view.length</div><div class="line">      <span class="keyword">while</span>(i--) &#123;</div><div class="line">        view[i] = array[i]</div><div class="line">      &#125;</div><div class="line">      <span class="keyword">return</span> view</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">encodeByteArray</span>(<span class="params">input</span>) </span>&#123;</div><div class="line">      <span class="keyword">var</span> byteToCharMap = <span class="string">'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789'</span></div><div class="line"></div><div class="line">      <span class="keyword">var</span> output = [];</div><div class="line"></div><div class="line">      <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; input.length; i += <span class="number">3</span>) &#123;</div><div class="line">        <span class="keyword">var</span> byte1 = input[i];</div><div class="line">        <span class="keyword">var</span> haveByte2 = i + <span class="number">1</span> &lt; input.length;</div><div class="line">        <span class="keyword">var</span> byte2 = haveByte2 ? input[i + <span class="number">1</span>] : <span class="number">0</span>;</div><div class="line">        <span class="keyword">var</span> haveByte3 = i + <span class="number">2</span> &lt; input.length;</div><div class="line">        <span class="keyword">var</span> byte3 = haveByte3 ? input[i + <span class="number">2</span>] : <span class="number">0</span>;</div><div class="line"></div><div class="line">        <span class="keyword">var</span> outByte1 = byte1 &gt;&gt; <span class="number">2</span>;</div><div class="line">        <span class="keyword">var</span> outByte2 = ((byte1 &amp; <span class="number">0x03</span>) &lt;&lt; <span class="number">4</span>) | (byte2 &gt;&gt; <span class="number">4</span>);</div><div class="line">        <span class="keyword">var</span> outByte3 = ((byte2 &amp; <span class="number">0x0F</span>) &lt;&lt; <span class="number">2</span>) | (byte3 &gt;&gt; <span class="number">6</span>);</div><div class="line">        <span class="keyword">var</span> outByte4 = byte3 &amp; <span class="number">0x3F</span>;</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (!haveByte3) &#123;</div><div class="line">          outByte4 = <span class="number">64</span>;</div><div class="line"></div><div class="line">          <span class="keyword">if</span> (!haveByte2) &#123;</div><div class="line">            outByte3 = <span class="number">64</span>;</div><div class="line">          &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        output.push(</div><div class="line">            byteToCharMap[outByte1], byteToCharMap[outByte2],</div><div class="line">            byteToCharMap[outByte3], byteToCharMap[outByte4])</div><div class="line">      &#125;</div><div class="line"></div><div class="line">      <span class="keyword">return</span> output.join(<span class="string">''</span>)</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">var</span> create = <span class="built_in">Object</span>.create || <span class="function"><span class="keyword">function</span> (<span class="params">a</span>) </span>&#123;</div><div class="line">      <span class="function"><span class="keyword">function</span> <span class="title">c</span>(<span class="params"></span>) </span>&#123;&#125;</div><div class="line">      c.prototype = a;</div><div class="line">      <span class="keyword">return</span> <span class="keyword">new</span> c</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="keyword">if</span> (arrayBufferSupported) &#123;</div><div class="line">      <span class="keyword">var</span> viewClasses = [</div><div class="line">        <span class="string">'[object Int8Array]'</span>,</div><div class="line">        <span class="string">'[object Uint8Array]'</span>,</div><div class="line">        <span class="string">'[object Uint8ClampedArray]'</span>,</div><div class="line">        <span class="string">'[object Int16Array]'</span>,</div><div class="line">        <span class="string">'[object Uint16Array]'</span>,</div><div class="line">        <span class="string">'[object Int32Array]'</span>,</div><div class="line">        <span class="string">'[object Uint32Array]'</span>,</div><div class="line">        <span class="string">'[object Float32Array]'</span>,</div><div class="line">        <span class="string">'[object Float64Array]'</span></div><div class="line">      ]</div><div class="line"></div><div class="line">      <span class="keyword">var</span> isArrayBufferView = <span class="built_in">ArrayBuffer</span>.isView || <span class="function"><span class="keyword">function</span>(<span class="params">obj</span>) </span>&#123;</div><div class="line">        <span class="keyword">return</span> obj &amp;&amp; viewClasses.indexOf(<span class="built_in">Object</span>.prototype.toString.call(obj)) &gt; <span class="number">-1</span></div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    </div><div class="line">    </div><div class="line">    <span class="comment">/********************************************************/</span></div><div class="line">    <span class="comment">/*                   Blob constructor                   */</span></div><div class="line">    <span class="comment">/********************************************************/</span></div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">Blob</span>(<span class="params">chunks, opts</span>) </span>&#123;</div><div class="line">      chunks = chunks || []</div><div class="line">      <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>, len = chunks.length; i &lt; len; i++) &#123;</div><div class="line">        <span class="keyword">var</span> chunk = chunks[i]</div><div class="line">        <span class="keyword">if</span> (chunk <span class="keyword">instanceof</span> Blob) &#123;</div><div class="line">          chunks[i] = chunk._buffer</div><div class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">typeof</span> chunk === <span class="string">'string'</span>) &#123;</div><div class="line">          chunks[i] = toUTF8Array(chunk)</div><div class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (arrayBufferSupported &amp;&amp; (<span class="built_in">ArrayBuffer</span>.prototype.isPrototypeOf(chunk) || isArrayBufferView(chunk))) &#123;</div><div class="line">          chunks[i] = bufferClone(chunk)</div><div class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (arrayBufferSupported &amp;&amp; isDataView(chunk)) &#123;</div><div class="line">          chunks[i] = bufferClone(chunk.buffer)</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">          chunks[i] = toUTF8Array(<span class="built_in">String</span>(chunk))</div><div class="line">        &#125;</div><div class="line">      &#125;</div><div class="line"></div><div class="line">      <span class="keyword">this</span>._buffer = [].concat.apply([], chunks)</div><div class="line">      <span class="keyword">this</span>.size = <span class="keyword">this</span>._buffer.length</div><div class="line">      <span class="keyword">this</span>.type = opts ? opts.type || <span class="string">''</span> : <span class="string">''</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    Blob.prototype.slice = <span class="function"><span class="keyword">function</span>(<span class="params">start, end, type</span>) </span>&#123;</div><div class="line">      <span class="keyword">var</span> slice = <span class="keyword">this</span>._buffer.slice(start || <span class="number">0</span>, end || <span class="keyword">this</span>._buffer.length)</div><div class="line">      <span class="keyword">return</span> <span class="keyword">new</span> Blob([slice], &#123;<span class="attr">type</span>: type&#125;)</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    Blob.prototype.toString = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">      <span class="keyword">return</span> <span class="string">'[object Blob]'</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    </div><div class="line"></div><div class="line">    <span class="comment">/********************************************************/</span></div><div class="line">    <span class="comment">/*                   File constructor                   */</span></div><div class="line">    <span class="comment">/********************************************************/</span></div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">File</span>(<span class="params">chunks, name, opts</span>) </span>&#123;</div><div class="line">      opts = opts || &#123;&#125;</div><div class="line">      <span class="keyword">var</span> a = Blob.call(<span class="keyword">this</span>, chunks, opts) || <span class="keyword">this</span></div><div class="line">      a.name = name</div><div class="line">      a.lastModifiedDate = opts.lastModified ? <span class="keyword">new</span> <span class="built_in">Date</span>(opts.lastModified) : <span class="keyword">new</span> <span class="built_in">Date</span></div><div class="line">      a.lastModified = +a.lastModifiedDate</div><div class="line">      </div><div class="line">      <span class="keyword">return</span> a</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    File.prototype = create(Blob.prototype);</div><div class="line">    File.prototype.constructor = File;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (<span class="built_in">Object</span>.setPrototypeOf) </div><div class="line">      <span class="built_in">Object</span>.setPrototypeOf(File, Blob);</div><div class="line">    <span class="keyword">else</span> &#123;</div><div class="line">      <span class="keyword">try</span> &#123;File.__proto__ = Blob&#125; <span class="keyword">catch</span> (e) &#123;&#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    File.prototype.toString = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">      <span class="keyword">return</span> <span class="string">'[object File]'</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    </div><div class="line">    <span class="comment">/********************************************************/</span></div><div class="line">    <span class="comment">/*                FileReader constructor                */</span></div><div class="line">    <span class="comment">/********************************************************/</span></div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">FileReader</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">if</span> (!(<span class="keyword">this</span> <span class="keyword">instanceof</span> FileReader))</div><div class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">TypeError</span>(<span class="string">"Failed to construct 'FileReader': Please use the 'new' operator, this DOM object constructor cannot be called as a function."</span>)</div><div class="line"></div><div class="line">    <span class="keyword">var</span> delegate = <span class="built_in">document</span>.createDocumentFragment()</div><div class="line">    <span class="keyword">this</span>.addEventListener = delegate.addEventListener</div><div class="line">    <span class="keyword">this</span>.dispatchEvent = <span class="function"><span class="keyword">function</span>(<span class="params">evt</span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> local = <span class="keyword">this</span>[<span class="string">'on'</span> + evt.type]</div><div class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> local === <span class="string">'function'</span>) local(evt)</div><div class="line">    delegate.dispatchEvent(evt)</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">this</span>.removeEventListener = delegate.removeEventListener</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">_read</span>(<span class="params">fr, blob, kind</span>) </span>&#123;</div><div class="line">    <span class="keyword">if</span> (!(blob <span class="keyword">instanceof</span> Blob))</div><div class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">TypeError</span>(<span class="string">"Failed to execute '"</span> + kind + <span class="string">"' on 'FileReader': parameter 1 is not of type 'Blob'."</span>)</div><div class="line">    </div><div class="line">    fr.result = <span class="string">''</span></div><div class="line"></div><div class="line">    setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">this</span>.readyState = FileReader.LOADING</div><div class="line">    fr.dispatchEvent(<span class="keyword">new</span> Event(<span class="string">'load'</span>))</div><div class="line">    fr.dispatchEvent(<span class="keyword">new</span> Event(<span class="string">'loadend'</span>))</div><div class="line">    &#125;)</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    FileReader.EMPTY = <span class="number">0</span></div><div class="line">    FileReader.LOADING = <span class="number">1</span></div><div class="line">    FileReader.DONE = <span class="number">2</span></div><div class="line">    FileReader.prototype.error = <span class="literal">null</span></div><div class="line">    FileReader.prototype.onabort = <span class="literal">null</span></div><div class="line">    FileReader.prototype.onerror = <span class="literal">null</span></div><div class="line">    FileReader.prototype.onload = <span class="literal">null</span></div><div class="line">    FileReader.prototype.onloadend = <span class="literal">null</span></div><div class="line">    FileReader.prototype.onloadstart = <span class="literal">null</span></div><div class="line">    FileReader.prototype.onprogress = <span class="literal">null</span></div><div class="line"></div><div class="line">    FileReader.prototype.readAsDataURL = <span class="function"><span class="keyword">function</span>(<span class="params">blob</span>) </span>&#123;</div><div class="line">    _read(<span class="keyword">this</span>, blob, <span class="string">'readAsDataURL'</span>)</div><div class="line">    <span class="keyword">this</span>.result = <span class="string">'data:'</span> + blob.type + <span class="string">';base64,'</span> + encodeByteArray(blob._buffer)</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    FileReader.prototype.readAsText = <span class="function"><span class="keyword">function</span>(<span class="params">blob</span>) </span>&#123;</div><div class="line">    _read(<span class="keyword">this</span>, blob, <span class="string">'readAsText'</span>)</div><div class="line">    <span class="keyword">this</span>.result = fromUtf8Array(blob._buffer)</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    FileReader.prototype.readAsArrayBuffer = <span class="function"><span class="keyword">function</span>(<span class="params">blob</span>) </span>&#123;</div><div class="line">    _read(<span class="keyword">this</span>, blob, <span class="string">'readAsText'</span>)</div><div class="line">    <span class="keyword">this</span>.result = blob._buffer.slice()</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    FileReader.prototype.abort = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;</div><div class="line"></div><div class="line">    </div><div class="line">    <span class="comment">/********************************************************/</span></div><div class="line">    <span class="comment">/*                         URL                          */</span></div><div class="line">    <span class="comment">/********************************************************/</span></div><div class="line">    URL.createObjectURL = <span class="function"><span class="keyword">function</span>(<span class="params">blob</span>) </span>&#123;</div><div class="line">      <span class="keyword">return</span> blob <span class="keyword">instanceof</span> Blob </div><div class="line">        ? <span class="string">'data:'</span> + blob.type + <span class="string">';base64,'</span> + encodeByteArray(blob._buffer)</div><div class="line">        : createObjectURL.call(URL, blob)</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    URL.revokeObjectURL = <span class="function"><span class="keyword">function</span>(<span class="params">url</span>) </span>&#123;</div><div class="line">      revokeObjectURL &amp;&amp; revokeObjectURL.call(URL, url)</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/********************************************************/</span></div><div class="line">    <span class="comment">/*                         XHR                          */</span></div><div class="line">    <span class="comment">/********************************************************/</span></div><div class="line">    <span class="keyword">var</span> _send = global.XMLHttpRequest &amp;&amp; global.XMLHttpRequest.prototype.send</div><div class="line">    <span class="keyword">if</span> (_send) &#123;</div><div class="line">      XMLHttpRequest.prototype.send = <span class="function"><span class="keyword">function</span>(<span class="params">data</span>) </span>&#123;</div><div class="line">        <span class="keyword">if</span> (data <span class="keyword">instanceof</span> Blob) &#123;</div><div class="line">          <span class="keyword">this</span>.setRequestHeader(<span class="string">'Content-Type'</span>, data.type)</div><div class="line">          _send.call(<span class="keyword">this</span>, fromUtf8Array(data._buffer))</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">          _send.call(<span class="keyword">this</span>, data)</div><div class="line">        &#125;</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    global.FileReader = FileReader</div><div class="line">    global.File = File</div><div class="line">    global.Blob = Blob</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="keyword">if</span> (strTag) &#123;</div><div class="line">    File.prototype[strTag] = <span class="string">'File'</span></div><div class="line">    Blob.prototype[strTag] = <span class="string">'Blob'</span></div><div class="line">    FileReader.prototype[strTag] = <span class="string">'FileReader'</span></div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">function</span> <span class="title">fixFileAndXHR</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> isIE = !!global.ActiveXObject || (</div><div class="line">      <span class="string">'-ms-scroll-limit'</span> <span class="keyword">in</span> <span class="built_in">document</span>.documentElement.style &amp;&amp; </div><div class="line">      <span class="string">'-ms-ime-align'</span> <span class="keyword">in</span> <span class="built_in">document</span>.documentElement.style</div><div class="line">    )</div><div class="line"></div><div class="line">    <span class="comment">// Monkey patched </span></div><div class="line">    <span class="comment">// IE don't set Content-Type header on XHR whose body is a typed Blob</span></div><div class="line">    <span class="comment">// https://developer.microsoft.com/en-us/microsoft-edge/platform/issues/6047383</span></div><div class="line">    <span class="keyword">var</span> _send = global.XMLHttpRequest &amp;&amp; global.XMLHttpRequest.prototype.send</div><div class="line">    <span class="keyword">if</span> (isIE &amp;&amp; _send) &#123;</div><div class="line">      XMLHttpRequest.prototype.send = <span class="function"><span class="keyword">function</span>(<span class="params">data</span>) </span>&#123;</div><div class="line">        <span class="keyword">if</span> (data <span class="keyword">instanceof</span> Blob) &#123;</div><div class="line">          <span class="keyword">this</span>.setRequestHeader(<span class="string">'Content-Type'</span>, data.type)</div><div class="line">          _send.call(<span class="keyword">this</span>, data)</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">          _send.call(<span class="keyword">this</span>, data)</div><div class="line">        &#125;</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">try</span> &#123;</div><div class="line">      <span class="keyword">new</span> File([], <span class="string">''</span>)</div><div class="line">    &#125; <span class="keyword">catch</span>(e) &#123;</div><div class="line">      <span class="keyword">try</span> &#123;</div><div class="line">        <span class="keyword">var</span> klass = <span class="keyword">new</span> <span class="built_in">Function</span>(<span class="string">'class File extends Blob &#123;'</span> + </div><div class="line">          <span class="string">'constructor(chunks, name, opts) &#123;'</span> +</div><div class="line">            <span class="string">'opts = opts || &#123;&#125;;'</span> +</div><div class="line">            <span class="string">'super(chunks, opts || &#123;&#125;);'</span> +</div><div class="line">            <span class="string">'this.name = name;'</span> +</div><div class="line">            <span class="string">'this.lastModifiedDate = opts.lastModified ? new Date(opts.lastModified) : new Date;'</span> +</div><div class="line">            <span class="string">'this.lastModified = +this.lastModifiedDate;'</span> +</div><div class="line">          <span class="string">'&#125;&#125;;'</span> +</div><div class="line">          <span class="string">'return new File([], ""), File'</span></div><div class="line">        )()</div><div class="line">        global.File = klass</div><div class="line">      &#125; <span class="keyword">catch</span>(e) &#123;</div><div class="line">        <span class="keyword">var</span> klass = <span class="function"><span class="keyword">function</span>(<span class="params">b, d, c</span>) </span>&#123;</div><div class="line">          <span class="keyword">var</span> blob = <span class="keyword">new</span> Blob(b, c)</div><div class="line">          <span class="keyword">var</span> t = c &amp;&amp; <span class="keyword">void</span> <span class="number">0</span> !== c.lastModified ? <span class="keyword">new</span> <span class="built_in">Date</span>(c.lastModified) : <span class="keyword">new</span> <span class="built_in">Date</span></div><div class="line">          </div><div class="line">          blob.name = d</div><div class="line">          blob.lastModifiedDate = t</div><div class="line">          blob.lastModified = +t</div><div class="line">          blob.toString = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">            <span class="keyword">return</span> <span class="string">'[object File]'</span></div><div class="line">          &#125;</div><div class="line">          </div><div class="line">          <span class="keyword">if</span> (strTag)</div><div class="line">            blob[strTag] = <span class="string">'File'</span></div><div class="line">          </div><div class="line">          <span class="keyword">return</span> blob</div><div class="line">        &#125;</div><div class="line">        global.File = klass</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="keyword">if</span> (blobSupported) &#123;</div><div class="line">    fixFileAndXHR()</div><div class="line">    global.Blob = blobSupportsArrayBufferView ? global.Blob : BlobConstructor</div><div class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (blobBuilderSupported) &#123;</div><div class="line">    fixFileAndXHR()</div><div class="line">    global.Blob = BlobBuilderConstructor;</div><div class="line">  &#125; <span class="keyword">else</span> &#123;</div><div class="line">    FakeBlobBuilder()</div><div class="line">  &#125;</div><div class="line"></div><div class="line">&#125;)();</div></pre></td></tr></table></figure><h6 id="export2Excel-js"><a href="#export2Excel-js" class="headerlink" title="export2Excel.js"></a>export2Excel.js</h6><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/* eslint-disable */</span></div><div class="line"><span class="built_in">require</span>(<span class="string">'script-loader!file-saver'</span>);</div><div class="line"><span class="built_in">require</span>(<span class="string">'script-loader!vendor/Blob'</span>);</div><div class="line"><span class="built_in">require</span>(<span class="string">'script-loader!xlsx/dist/xlsx.core.min'</span>);</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">generateArray</span>(<span class="params">table</span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> out = [];</div><div class="line">    <span class="keyword">var</span> rows = table.querySelectorAll(<span class="string">'tr'</span>);</div><div class="line">    <span class="keyword">var</span> ranges = [];</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> R = <span class="number">0</span>; R &lt; rows.length; ++R) &#123;</div><div class="line">        <span class="keyword">var</span> outRow = [];</div><div class="line">        <span class="keyword">var</span> row = rows[R];</div><div class="line">        <span class="keyword">var</span> columns = row.querySelectorAll(<span class="string">'td'</span>);</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> C = <span class="number">0</span>; C &lt; columns.length; ++C) &#123;</div><div class="line">            <span class="keyword">var</span> cell = columns[C];</div><div class="line">            <span class="keyword">var</span> colspan = cell.getAttribute(<span class="string">'colspan'</span>);</div><div class="line">            <span class="keyword">var</span> rowspan = cell.getAttribute(<span class="string">'rowspan'</span>);</div><div class="line">            <span class="keyword">var</span> cellValue = cell.innerText;</div><div class="line">            <span class="keyword">if</span> (cellValue !== <span class="string">""</span> &amp;&amp; cellValue == +cellValue) cellValue = +cellValue;</div><div class="line"></div><div class="line">            <span class="comment">//Skip ranges</span></div><div class="line">            ranges.forEach(<span class="function"><span class="keyword">function</span> (<span class="params">range</span>) </span>&#123;</div><div class="line">                <span class="keyword">if</span> (R &gt;= range.s.r &amp;&amp; R &lt;= range.e.r &amp;&amp; outRow.length &gt;= range.s.c &amp;&amp; outRow.length &lt;= range.e.c) &#123;</div><div class="line">                    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt;= range.e.c - range.s.c; ++i) outRow.push(<span class="literal">null</span>);</div><div class="line">                &#125;</div><div class="line">            &#125;);</div><div class="line"></div><div class="line">            <span class="comment">//Handle Row Span</span></div><div class="line">            <span class="keyword">if</span> (rowspan || colspan) &#123;</div><div class="line">                rowspan = rowspan || <span class="number">1</span>;</div><div class="line">                colspan = colspan || <span class="number">1</span>;</div><div class="line">                ranges.push(&#123;<span class="attr">s</span>: &#123;<span class="attr">r</span>: R, <span class="attr">c</span>: outRow.length&#125;, <span class="attr">e</span>: &#123;<span class="attr">r</span>: R + rowspan - <span class="number">1</span>, <span class="attr">c</span>: outRow.length + colspan - <span class="number">1</span>&#125;&#125;);</div><div class="line">            &#125;</div><div class="line">            ;</div><div class="line"></div><div class="line">            <span class="comment">//Handle Value</span></div><div class="line">            outRow.push(cellValue !== <span class="string">""</span> ? cellValue : <span class="literal">null</span>);</div><div class="line"></div><div class="line">            <span class="comment">//Handle Colspan</span></div><div class="line">            <span class="keyword">if</span> (colspan) <span class="keyword">for</span> (<span class="keyword">var</span> k = <span class="number">0</span>; k &lt; colspan - <span class="number">1</span>; ++k) outRow.push(<span class="literal">null</span>);</div><div class="line">        &#125;</div><div class="line">        out.push(outRow);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> [out, ranges];</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">datenum</span>(<span class="params">v, date1904</span>) </span>&#123;</div><div class="line">    <span class="keyword">if</span> (date1904) v += <span class="number">1462</span>;</div><div class="line">    <span class="keyword">var</span> epoch = <span class="built_in">Date</span>.parse(v);</div><div class="line">    <span class="keyword">return</span> (epoch - <span class="keyword">new</span> <span class="built_in">Date</span>(<span class="built_in">Date</span>.UTC(<span class="number">1899</span>, <span class="number">11</span>, <span class="number">30</span>))) / (<span class="number">24</span> * <span class="number">60</span> * <span class="number">60</span> * <span class="number">1000</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">sheet_from_array_of_arrays</span>(<span class="params">data, opts</span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> ws = &#123;&#125;;</div><div class="line">    <span class="keyword">var</span> range = &#123;<span class="attr">s</span>: &#123;<span class="attr">c</span>: <span class="number">10000000</span>, <span class="attr">r</span>: <span class="number">10000000</span>&#125;, <span class="attr">e</span>: &#123;<span class="attr">c</span>: <span class="number">0</span>, <span class="attr">r</span>: <span class="number">0</span>&#125;&#125;;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> R = <span class="number">0</span>; R != data.length; ++R) &#123;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> C = <span class="number">0</span>; C != data[R].length; ++C) &#123;</div><div class="line">            <span class="keyword">if</span> (range.s.r &gt; R) range.s.r = R;</div><div class="line">            <span class="keyword">if</span> (range.s.c &gt; C) range.s.c = C;</div><div class="line">            <span class="keyword">if</span> (range.e.r &lt; R) range.e.r = R;</div><div class="line">            <span class="keyword">if</span> (range.e.c &lt; C) range.e.c = C;</div><div class="line">            <span class="keyword">var</span> cell = &#123;<span class="attr">v</span>: data[R][C]&#125;;</div><div class="line">            <span class="keyword">if</span> (cell.v == <span class="literal">null</span>) <span class="keyword">continue</span>;</div><div class="line">            <span class="keyword">var</span> cell_ref = XLSX.utils.encode_cell(&#123;<span class="attr">c</span>: C, <span class="attr">r</span>: R&#125;);</div><div class="line"></div><div class="line">            <span class="keyword">if</span> (<span class="keyword">typeof</span> cell.v === <span class="string">'number'</span>) cell.t = <span class="string">'n'</span>;</div><div class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">typeof</span> cell.v === <span class="string">'boolean'</span>) cell.t = <span class="string">'b'</span>;</div><div class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (cell.v <span class="keyword">instanceof</span> <span class="built_in">Date</span>) &#123;</div><div class="line">                cell.t = <span class="string">'n'</span>;</div><div class="line">                cell.z = XLSX.SSF._table[<span class="number">14</span>];</div><div class="line">                cell.v = datenum(cell.v);</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">else</span> cell.t = <span class="string">'s'</span>;</div><div class="line"></div><div class="line">            ws[cell_ref] = cell;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span> (range.s.c &lt; <span class="number">10000000</span>) ws[<span class="string">'!ref'</span>] = XLSX.utils.encode_range(range);</div><div class="line">    <span class="keyword">return</span> ws;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Workbook</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">if</span> (!(<span class="keyword">this</span> <span class="keyword">instanceof</span> Workbook)) <span class="keyword">return</span> <span class="keyword">new</span> Workbook();</div><div class="line">    <span class="keyword">this</span>.SheetNames = [];</div><div class="line">    <span class="keyword">this</span>.Sheets = &#123;&#125;;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">s2ab</span>(<span class="params">s</span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> buf = <span class="keyword">new</span> <span class="built_in">ArrayBuffer</span>(s.length);</div><div class="line">    <span class="keyword">var</span> view = <span class="keyword">new</span> <span class="built_in">Uint8Array</span>(buf);</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i != s.length; ++i) view[i] = s.charCodeAt(i) &amp; <span class="number">0xFF</span>;</div><div class="line">    <span class="keyword">return</span> buf;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">export_table_to_excel</span>(<span class="params">id</span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> theTable = <span class="built_in">document</span>.getElementById(id);</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'a'</span>)</div><div class="line">    <span class="keyword">var</span> oo = generateArray(theTable);</div><div class="line">    <span class="keyword">var</span> ranges = oo[<span class="number">1</span>];</div><div class="line"></div><div class="line">    <span class="comment">/* original data */</span></div><div class="line">    <span class="keyword">var</span> data = oo[<span class="number">0</span>];</div><div class="line">    <span class="keyword">var</span> ws_name = <span class="string">"SheetJS"</span>;</div><div class="line">    <span class="built_in">console</span>.log(data);</div><div class="line"></div><div class="line">    <span class="keyword">var</span> wb = <span class="keyword">new</span> Workbook(), ws = sheet_from_array_of_arrays(data);</div><div class="line"></div><div class="line">    <span class="comment">/* add ranges to worksheet */</span></div><div class="line">    <span class="comment">// ws['!cols'] = ['apple', 'banan'];</span></div><div class="line">    ws[<span class="string">'!merges'</span>] = ranges;</div><div class="line"></div><div class="line">    <span class="comment">/* add worksheet to workbook */</span></div><div class="line">    wb.SheetNames.push(ws_name);</div><div class="line">    wb.Sheets[ws_name] = ws;</div><div class="line"></div><div class="line">    <span class="keyword">var</span> wbout = XLSX.write(wb, &#123;<span class="attr">bookType</span>: <span class="string">'xlsx'</span>, <span class="attr">bookSST</span>: <span class="literal">false</span>, <span class="attr">type</span>: <span class="string">'binary'</span>&#125;);</div><div class="line"></div><div class="line">    saveAs(<span class="keyword">new</span> Blob([s2ab(wbout)], &#123;<span class="attr">type</span>: <span class="string">"application/octet-stream"</span>&#125;), <span class="string">"test.xlsx"</span>)</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">formatJson</span>(<span class="params">jsonData</span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(jsonData)</div><div class="line">&#125;</div><div class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">exportJsonToExcel</span>(<span class="params">th, jsonData, defaultTitle</span>) </span>&#123;</div><div class="line"></div><div class="line">    <span class="comment">/* original data */</span></div><div class="line"></div><div class="line">    <span class="keyword">var</span> data = jsonData;</div><div class="line">    data.unshift(th);</div><div class="line">    <span class="keyword">var</span> ws_name = <span class="string">"SheetJS"</span>;</div><div class="line"></div><div class="line">    <span class="keyword">var</span> wb = <span class="keyword">new</span> Workbook(), ws = sheet_from_array_of_arrays(data);</div><div class="line"></div><div class="line"></div><div class="line">    <span class="comment">/* add worksheet to workbook */</span></div><div class="line">    wb.SheetNames.push(ws_name);</div><div class="line">    wb.Sheets[ws_name] = ws;</div><div class="line"></div><div class="line">    <span class="keyword">var</span> wbout = XLSX.write(wb, &#123;<span class="attr">bookType</span>: <span class="string">'xlsx'</span>, <span class="attr">bookSST</span>: <span class="literal">false</span>, <span class="attr">type</span>: <span class="string">'binary'</span>&#125;);</div><div class="line">    <span class="keyword">var</span> title = defaultTitle || <span class="string">'列表'</span></div><div class="line">    saveAs(<span class="keyword">new</span> Blob([s2ab(wbout)], &#123;<span class="attr">type</span>: <span class="string">"application/octet-stream"</span>&#125;), title + <span class="string">".xlsx"</span>)</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> web </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>Nginx配置SSL遇到的问题</title>
      <link href="/blogs/2018/07/26/ssl/"/>
      <url>/blogs/2018/07/26/ssl/</url>
      <content type="html"><![CDATA[<p>由于买的国外服务器，443端口默认是关闭的。导致配置完成之后无法访问此网站<br><a id="more"></a></p><h4 id="centos-6-5-查看、开启，关闭-端口"><a href="#centos-6-5-查看、开启，关闭-端口" class="headerlink" title="centos 6.5 查看、开启，关闭 端口"></a>centos 6.5 查看、开启，关闭 端口</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#1、开启端口</span></div><div class="line"></div><div class="line">/sbin/iptables -I INPUT -p tcp --dport 端口号 -j ACCEPT   <span class="comment">#写入修改</span></div><div class="line"></div><div class="line">/etc/init.d/iptables save  <span class="comment"># 保存修改</span></div><div class="line"></div><div class="line">service iptables restart   <span class="comment"># 重启防火墙，修改生效</span></div><div class="line"></div><div class="line"><span class="comment">#2、关闭端口</span></div><div class="line"></div><div class="line"> /sbin/iptables -I INPUT -p tcp --dport 端口号 -j DROP  <span class="comment"># 写入修改</span></div><div class="line"></div><div class="line"> /etc/init.d/iptables save   <span class="comment">#保存修改</span></div><div class="line"></div><div class="line"> service iptables restart    <span class="comment">#重启防火墙，修改生效</span></div><div class="line"></div><div class="line"> <span class="comment">#3、查看端口状态</span></div><div class="line"></div><div class="line"> /etc/init.d/iptables status</div></pre></td></tr></table></figure><p>开启端口之后发现依旧无法正常访问，此网站无法提供安全连接<br>Nginx配置是从阿里云SSL证书页面中复制修改的。<br><figure class="highlight nginx"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="section">server</span> &#123;</div><div class="line">    <span class="attribute">listen</span> <span class="number">443</span>;</div><div class="line">    <span class="attribute">server_name</span> localhost;</div><div class="line">    <span class="attribute">ssl</span> <span class="literal">on</span>;</div><div class="line">    <span class="attribute">root</span> html;</div><div class="line">    <span class="attribute">index</span> index.html index.htm;</div><div class="line">    <span class="attribute">ssl_certificate</span>   cert/<span class="number">1532100786501</span>.pem;</div><div class="line">    <span class="attribute">ssl_certificate_key</span>  cert/<span class="number">1532100786501</span>.key;</div><div class="line">    <span class="attribute">ssl_session_timeout</span> <span class="number">5m</span>;</div><div class="line">    <span class="attribute">ssl_ciphers</span> ECDHE-RSA-AES128-GCM-SHA256:ECDHE:ECDH:AES:HIGH:!NULL:!aNULL:!MD5:!ADH:!RC4;</div><div class="line">    <span class="attribute">ssl_protocols</span> TLSv1 TLSv1.<span class="number">1</span> TLSv1.<span class="number">2</span>;</div><div class="line">    <span class="attribute">ssl_prefer_server_ciphers</span> <span class="literal">on</span>;</div><div class="line">    <span class="attribute">location</span> / &#123;</div><div class="line">        <span class="attribute">root</span> html;</div><div class="line">        <span class="attribute">index</span> index.html index.htm;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>修改Nginx配置<br><figure class="highlight nginx"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="section">server</span> &#123;</div><div class="line">    <span class="attribute">listen</span> <span class="number">80</span>;</div><div class="line">    <span class="attribute">listen</span> <span class="number">443</span> ssl;</div><div class="line">    <span class="attribute">server_name</span>  localhost;</div><div class="line">    <span class="attribute">root</span> html;</div><div class="line"></div><div class="line">    <span class="attribute">if</span> (<span class="variable">$server_port</span> !<span class="regexp">~ 443)</span>&#123;</div><div class="line">        <span class="attribute">rewrite</span><span class="regexp"> ^(/.*)$</span> https://<span class="variable">$host</span><span class="variable">$1</span> <span class="literal">permanent</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="attribute">ssl_certificate</span>    /usr/local/nginx/conf/cert/<span class="number">1532100786501</span>.pem;</div><div class="line">    <span class="attribute">ssl_certificate_key</span>    /usr/local/nginx/conf/cert/<span class="number">1532100786501</span>.key;</div><div class="line">    <span class="attribute">ssl_protocols</span> TLSv1 TLSv1.<span class="number">1</span> TLSv1.<span class="number">2</span>;</div><div class="line">    <span class="attribute">ssl_ciphers</span> ECDHE-RSA-AES128-GCM-SHA256:HIGH:!aNULL:!MD5:!RC4:!DHE;</div><div class="line">    <span class="attribute">ssl_prefer_server_ciphers</span> <span class="literal">on</span>;</div><div class="line">    <span class="attribute">ssl_session_cache</span> shared:SSL:<span class="number">10m</span>;</div><div class="line">    <span class="attribute">ssl_session_timeout</span> <span class="number">10m</span>;</div><div class="line">    <span class="attribute">index</span> index.html index.htm;</div><div class="line">    <span class="attribute">location</span> / &#123;</div><div class="line">        <span class="attribute">root</span> html;</div><div class="line">        <span class="attribute">index</span> index.html index.htm;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>页面正常访问了（问题可能在于Nginx版本）</p>]]></content>
      
      
    </entry>
    
    <entry>
      <title>Nuxt项目部署遇到的问题</title>
      <link href="/blogs/2018/07/24/node-upgrade/"/>
      <url>/blogs/2018/07/24/node-upgrade/</url>
      <content type="html"><![CDATA[<p>在服务器部署Nuxt项目时，遇到Node版本过低。linux下升级node遇到的问题<br><a id="more"></a></p><h4 id="切换node版本时，键盘不能操作的问题的解决方案"><a href="#切换node版本时，键盘不能操作的问题的解决方案" class="headerlink" title="切换node版本时，键盘不能操作的问题的解决方案"></a>切换node版本时，键盘不能操作的问题的解决方案</h4><p>n之后，如果键盘上下箭头操作不能控制。那么请考虑一下，可能n程序出了bug。<br>比如，当前版本是7.7.1，但是n列出所有已经安装版本的时候，没有显示出7.7.1。<br>这个就是问题所在了，主动使用n安装了当前node版本7.7.1<br>然后就解决了这个问题。</p><h4 id="切换node版本后，node版本号不变的问题"><a href="#切换node版本后，node版本号不变的问题" class="headerlink" title="切换node版本后，node版本号不变的问题"></a>切换node版本后，node版本号不变的问题</h4><p>切换后，node的版本居然没有发生变化，这个就有些小尴尬了。解决方案如下：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="builtin-name">export</span> <span class="attribute">NODE_HOME</span>=/usr/local</div><div class="line"><span class="builtin-name">export</span> <span class="attribute">PATH</span>=<span class="variable">$NODE_HOME</span>/bin:$PATH</div><div class="line"><span class="builtin-name">export</span> <span class="attribute">NODE_PATH</span>=<span class="variable">$NODE_HOME</span>/lib/node_modules:$PATH</div></pre></td></tr></table></figure><h4 id="nginx反向配置"><a href="#nginx反向配置" class="headerlink" title="nginx反向配置"></a>nginx反向配置</h4><figure class="highlight glsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">upstream songzhiguo &#123;</div><div class="line">  server <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">3000</span>;</div><div class="line">&#125;</div><div class="line">server&#123;</div><div class="line">  listen <span class="number">80</span>;</div><div class="line"></div><div class="line">  server_name zhiguo.top;</div><div class="line">  <span class="keyword">index</span> <span class="keyword">index</span>.html <span class="keyword">index</span>.htm <span class="keyword">index</span>.php <span class="keyword">default</span>.html <span class="keyword">default</span>.htm <span class="keyword">default</span>.php;</div><div class="line">  <span class="keyword">location</span> / &#123;</div><div class="line">          proxy_set_header X-Real-Ip $remote_addr;</div><div class="line">          proxy_set_header X-Forward-For $proxy_add_x_forwarded_for;</div><div class="line">          proxy_set_header X-Nginx-Proxy <span class="literal">true</span>;</div><div class="line">          proxy_pass http:<span class="comment">//songzhiguo;</span></div><div class="line">          proxy_redirect off;</div><div class="line">          <span class="meta">#try_files $uri $uri/ /index.html;  ##使用docker环境下这个不需要</span></div><div class="line">  &#125; </div><div class="line">  <span class="keyword">location</span> ~ /\.</div><div class="line">  &#123;</div><div class="line">      deny <span class="built_in">all</span>;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  access_log  /home/wwwlogs/blog.shudong.wang.<span class="built_in">log</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> web </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>进程与线程的一个简单解释</title>
      <link href="/blogs/2018/06/01/process-thread/"/>
      <url>/blogs/2018/06/01/process-thread/</url>
      <content type="html"><![CDATA[<p>计算机的核心是CPU，它承担了所有的计算任务。它就像一座工厂，时刻在运行。<br><a id="more"></a></p><p><a href="http://www.ruanyifeng.com/blog/2013/04/processes_and_threads.html" target="_blank" rel="external">进程与线程的一个简单解释</a></p>]]></content>
      
      <categories>
          
          <category> handbook </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>vue中删除数组指定数据产生渲染错乱</title>
      <link href="/blogs/2018/05/25/vue-forRender/"/>
      <url>/blogs/2018/05/25/vue-forRender/</url>
      <content type="html"><![CDATA[<p>在vue项目中，删除数组中的指定数据，造成页面列表渲染错乱问题及解决方案<br><a id="more"></a></p><p>最近使用vue开发一个ppt在线编辑工具时，要创建ppt元素，ppt的每一页中的每一个元素都是用v-for来做循环，动态添加删除，</p><p>出现的问题是，删除非数组的最后一个数据时，dom元素消失的同样是最后一个，数据渲染就会往上错位一个。</p><p>解决方案是</p><p>问题是出在v-for的:key上，解决方法就是给:key赋予一个独一无二的值。这样绑定的数组就可以和dom对象一一对应起来，删除的时候也能正确删除掉响应dom对象了。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// utils</span></div><div class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">guid</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> <span class="string">'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'</span>.replace(<span class="regexp">/[xy]/g</span>, <span class="function"><span class="keyword">function</span>(<span class="params">c</span>) </span>&#123;</div><div class="line">    <span class="keyword">let</span> r = <span class="built_in">Math</span>.random() * <span class="number">16</span> | <span class="number">0</span></div><div class="line">    <span class="keyword">let</span> v = c === <span class="string">'x'</span> ? r : (r &amp; <span class="number">0x3</span> | <span class="number">0x8</span>)</div><div class="line">    <span class="keyword">return</span> v.toString(<span class="number">16</span>)</div><div class="line">  &#125;)</div><div class="line">&#125;</div><div class="line"><span class="comment">// 组件内</span></div><div class="line"><span class="keyword">import</span> &#123;guid&#125; <span class="keyword">from</span> <span class="string">'@/utils/index'</span></div><div class="line"></div><div class="line"><span class="comment">// 添加文本</span></div><div class="line">addText() &#123;</div><div class="line">  <span class="keyword">if</span> (<span class="keyword">this</span>.canQuill) &#123;</div><div class="line">    <span class="keyword">let</span> obj = &#123; <span class="attr">words</span>: <span class="string">'文本'</span>,</div><div class="line">      backfillStyle: &#123;&#125;,</div><div class="line">      style: <span class="literal">null</span>, <span class="attr">WHXY</span>: &#123; <span class="attr">w</span>: <span class="number">372</span>, <span class="attr">h</span>: <span class="string">'auto'</span>, <span class="attr">x</span>: <span class="number">266</span>, <span class="attr">y</span>: <span class="number">350</span> &#125;,</div><div class="line">      inputAct: <span class="literal">true</span>,</div><div class="line">      animat: &#123;</div><div class="line">        type: <span class="string">''</span>,</div><div class="line">        duration: <span class="number">0</span>,</div><div class="line">        delay: <span class="number">0</span></div><div class="line">      &#125;,</div><div class="line">      guid: guid()</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">this</span>.pages[<span class="keyword">this</span>.currentPage - <span class="number">1</span>].text.push(obj)</div><div class="line">    <span class="keyword">this</span>._initFillData(<span class="string">'text'</span>, obj, <span class="literal">true</span>)</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">vue-draggable-resizable</span></span></div><div class="line"><span class="tag">  <span class="attr">v-for</span>=<span class="string">"(item, index) in page.text"</span></span></div><div class="line"><span class="tag">  <span class="attr">:key</span>=<span class="string">"item.guid"</span></span></div><div class="line"><span class="tag">  <span class="attr">:data-animation-type</span>=<span class="string">"item.animat.type"</span></span></div><div class="line"><span class="tag">  <span class="attr">:data-transition-duration</span>=<span class="string">"item.animat.duration"</span></span></div><div class="line"><span class="tag">  <span class="attr">:data-transition-delay</span>=<span class="string">"item.animat.delay"</span></span></div><div class="line"><span class="tag">  <span class="attr">:parent</span>=<span class="string">"true"</span></span></div><div class="line"><span class="tag">  <span class="attr">:handles</span>=<span class="string">"['ml','mr']"</span></span></div><div class="line"><span class="tag">  <span class="attr">:style</span>=<span class="string">"item.backfillStyle"</span></span></div><div class="line"><span class="tag">  <span class="attr">:w</span>=<span class="string">"parseInt(item.WHXY.w)"</span></span></div><div class="line"><span class="tag">  <span class="attr">:h</span>=<span class="string">"parseInt(item.WHXY.h)"</span></span></div><div class="line"><span class="tag">  <span class="attr">:x</span>=<span class="string">"parseInt(item.WHXY.x)"</span></span></div><div class="line"><span class="tag">  <span class="attr">:y</span>=<span class="string">"parseInt(item.WHXY.y)"</span></span></div><div class="line"><span class="tag">  <span class="attr">:draggable</span>=<span class="string">"draggable"</span></span></div><div class="line"><span class="tag">  <span class="attr">ref</span>=<span class="string">"pluginText"</span></span></div><div class="line"><span class="tag">  <span class="attr">text</span></span></div><div class="line"><span class="tag">  @<span class="attr">dblclickHandle</span>=<span class="string">"dblclickHandle"</span></span></div><div class="line"><span class="tag">  @<span class="attr">activated</span>=<span class="string">"onActivateText(index)"</span></span></div><div class="line"><span class="tag">  @<span class="attr">deactivated</span>=<span class="string">"onDeactivateText(index)"</span></span></div><div class="line"><span class="tag">&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"quill-text"</span> <span class="attr">ref</span>=<span class="string">"text"</span> <span class="attr">v-show</span>=<span class="string">"item.inputAct"</span> <span class="attr">v-html</span>=<span class="string">"item.words"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"quill-text quill"</span> <span class="attr">ref</span>=<span class="string">"quill"</span> <span class="attr">v-show</span>=<span class="string">"!item.inputAct"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">vue-draggable-resizable</span>&gt;</span></div></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>vue分段上传七牛云</title>
      <link href="/blogs/2018/05/11/uploadqiniu/"/>
      <url>/blogs/2018/05/11/uploadqiniu/</url>
      <content type="html"><![CDATA[<p>使用element-ui上传七牛云方法介绍<br><a id="more"></a></p><h4 id="上传组件"><a href="#上传组件" class="headerlink" title="上传组件"></a>上传组件</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">el-upload</span></span></div><div class="line"><span class="tag">  <span class="attr">class</span>=<span class="string">"uploader-box"</span></span></div><div class="line"><span class="tag">  <span class="attr">action</span>=<span class="string">"http://up.qbox.me/"</span></span></div><div class="line"><span class="tag">  <span class="attr">:http-request</span>=<span class="string">"request"</span></span></div><div class="line"><span class="tag">  <span class="attr">:on-success</span>=<span class="string">"handleSuccess"</span></span></div><div class="line"><span class="tag">  <span class="attr">:before-upload</span>=<span class="string">"beforeUpload"</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">el-upload</span>&gt;</span></div></pre></td></tr></table></figure><h4 id="传参token值"><a href="#传参token值" class="headerlink" title="传参token值"></a>传参token值</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">data() &#123;</div><div class="line">  <span class="keyword">return</span> &#123;</div><div class="line">    form: <span class="literal">null</span></div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h4 id="保证初次上传token已成功传入"><a href="#保证初次上传token已成功传入" class="headerlink" title="保证初次上传token已成功传入"></a>保证初次上传token已成功传入</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">mounted() &#123;</div><div class="line">  <span class="keyword">this</span>._getToken()</div><div class="line">&#125;</div></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">methods: &#123;</div><div class="line">  beforeUpload(file) &#123;</div><div class="line">    <span class="keyword">const</span> isVideo = file.type === <span class="string">'video/mp4'</span></div><div class="line">    <span class="keyword">if</span> (!isVideo) &#123;</div><div class="line">      <span class="keyword">this</span>.$message.warning(<span class="string">`上传文件类型不正确!`</span>)</div><div class="line">      <span class="keyword">return</span> isVideo</div><div class="line">    &#125;</div><div class="line">  &#125;,</div><div class="line">  handleSuccess(res, file) &#123;</div><div class="line">    <span class="keyword">this</span>.uploadSuccess1 = <span class="literal">true</span></div><div class="line">    <span class="keyword">this</span>.params.link1 = <span class="keyword">this</span>.baseUrl + res.key</div><div class="line">    <span class="keyword">this</span>._judgeType()</div><div class="line">  &#125;,</div><div class="line">  request(obj) &#123;</div><div class="line">    <span class="keyword">const</span> key = setKey(obj.file.name)</div><div class="line">    <span class="keyword">const</span> uploader = upload(<span class="keyword">this</span>.form.token, key)</div><div class="line">    <span class="keyword">const</span> subscription = uploader(obj) <span class="comment">// eslint-disable-line</span></div><div class="line">  &#125;,</div><div class="line">  <span class="comment">// 从服务器获取token值</span></div><div class="line">  _getToken() &#123;</div><div class="line">    getToken().then(<span class="function"><span class="params">response</span> =&gt;</span> &#123;</div><div class="line">      <span class="keyword">this</span>.form = &#123;</div><div class="line">        token: response.data</div><div class="line">      &#125;</div><div class="line">    &#125;).catch(<span class="function"><span class="params">error</span> =&gt;</span> &#123;</div><div class="line">    &#125;)</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> * <span class="keyword">as</span> qiniu <span class="keyword">from</span> <span class="string">'qiniu-js'</span></div><div class="line"></div><div class="line"><span class="keyword">export</span> <span class="keyword">const</span> upload = <span class="function">(<span class="params">token, key</span>) =&gt;</span> obj =&gt; &#123;</div><div class="line">  <span class="keyword">const</span> &#123; file &#125; = obj</div><div class="line"></div><div class="line">  <span class="comment">// 关于 key 要怎么处理自行解决，但如果为 undefined 或者 null 会使用上传后的 hash 作为 key.</span></div><div class="line">  <span class="comment">// const key = file.name</span></div><div class="line">  <span class="comment">// 因人而异，自行解决</span></div><div class="line">  <span class="keyword">const</span> putExtra = &#123;&#125;</div><div class="line">  <span class="keyword">const</span> config = &#123;&#125;</div><div class="line"></div><div class="line">  <span class="keyword">const</span> observable = qiniu.upload(file, key, token, putExtra, config)</div><div class="line"></div><div class="line">  <span class="comment">// 刚刚得到的信息可以使用了，这样可以使用到 el-upload 的进度条</span></div><div class="line">  <span class="keyword">const</span> next = <span class="function">(<span class="params">&#123; total &#125;</span>) =&gt;</span> obj.onProgress(&#123; <span class="attr">percent</span>: total.percent &#125;)</div><div class="line"></div><div class="line">  <span class="keyword">const</span> error = <span class="function"><span class="params">err</span> =&gt;</span> obj.onError(err)</div><div class="line"></div><div class="line">  <span class="keyword">const</span> complete = <span class="function"><span class="params">res</span> =&gt;</span> obj.onSuccess(res)</div><div class="line"></div><div class="line">  <span class="keyword">const</span> subscription = observable.subscribe(next, error, complete)</div><div class="line">  <span class="keyword">return</span> subscription <span class="comment">// 返回以方便取消上传操作</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>使用扩展符会报错问题</title>
      <link href="/blogs/2018/04/27/record-element/"/>
      <url>/blogs/2018/04/27/record-element/</url>
      <content type="html"><![CDATA[<p>按照element-ui官网修改 .babelrc导致使用扩展符会报错问题<br><a id="more"></a></p><h3 id="按需加载"><a href="#按需加载" class="headerlink" title="按需加载"></a>按需加载</h3><p>  按照官网将 .babelrc 修改为：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  <span class="attr">"presets"</span>: [[<span class="string">"es2015"</span>, &#123; <span class="attr">"modules"</span>: <span class="literal">false</span> &#125;]],</div><div class="line">  <span class="attr">"plugins"</span>: [</div><div class="line">    [</div><div class="line">      <span class="string">"component"</span>,</div><div class="line">      &#123;</div><div class="line">        <span class="attr">"libraryName"</span>: <span class="string">"element-ui"</span>,</div><div class="line">        <span class="attr">"styleLibraryName"</span>: <span class="string">"theme-chalk"</span></div><div class="line">      &#125;</div><div class="line">    ]</div><div class="line">  ]</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>使用扩展符会报错<br>在将.babelrc 修改为</p><figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  <span class="attr">"presets"</span>: [[<span class="string">"es2015"</span>, &#123; <span class="attr">"modules"</span>: <span class="literal">false</span> &#125;], <span class="string">"stage-3"</span>],</div><div class="line">  <span class="attr">"plugins"</span>: [</div><div class="line">    [</div><div class="line">      <span class="string">"component"</span>,</div><div class="line">      &#123;</div><div class="line">        <span class="attr">"libraryName"</span>: <span class="string">"element-ui"</span>,</div><div class="line">        <span class="attr">"styleLibraryName"</span>: <span class="string">"theme-chalk"</span></div><div class="line">      &#125;</div><div class="line">    ]</div><div class="line">  ]</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>使用axios post后台获取不到提交的数据</title>
      <link href="/blogs/2018/03/28/axios/"/>
      <url>/blogs/2018/03/28/axios/</url>
      <content type="html"><![CDATA[<p>使用axios post 提交数据,后台获取不到数据解决方案<br><a id="more"></a></p><p>在页面中引用 qs :   var qs = require(‘qs’)</p><p>同时 需要将 请求头headers改为： ‘Content-Type’: ‘application/x-www-form-urlencoded’,</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">addDaily</span> (<span class="params">parameter</span>) </span>&#123;</div><div class="line">  <span class="keyword">const</span> url = PUBLIC_URL + <span class="string">'daily/addDatas'</span></div><div class="line"></div><div class="line">  <span class="keyword">return</span> axios.post(url, qs.stringify(parameter), &#123;</div><div class="line">    headers: &#123;</div><div class="line">      <span class="string">'Content-Type'</span>: <span class="string">'application/x-www-form-urlencoded'</span></div><div class="line">    &#125;</div><div class="line">  &#125;).then(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</div><div class="line">    <span class="keyword">return</span> <span class="built_in">Promise</span>.resolve(res.data)</div><div class="line">  &#125;)</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>或者在拦截器中统一处理<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">service.interceptors.request.use(<span class="function"><span class="params">config</span> =&gt;</span> &#123;</div><div class="line">  <span class="keyword">if</span> (store.getters.token) &#123;</div><div class="line">    config.headers[<span class="string">'X-Token'</span>] = getToken() <span class="comment">// 让每个请求携带自定义token 请根据实际情况自行修改</span></div><div class="line">  &#125;</div><div class="line">  <span class="keyword">if</span> (config.method === <span class="string">'post'</span>) &#123;</div><div class="line">    config.data = qs.stringify(config.data)</div><div class="line">    config.headers[<span class="string">'Content-Type'</span>] = <span class="string">'application/x-www-form-urlencoded'</span></div><div class="line">  &#125;</div><div class="line">  <span class="keyword">return</span> config</div><div class="line">&#125;, error =&gt; &#123;</div><div class="line">  <span class="comment">// Do something with request error</span></div><div class="line">  <span class="built_in">console</span>.log(error) <span class="comment">// for debug</span></div><div class="line">  <span class="built_in">Promise</span>.reject(error)</div><div class="line">&#125;)</div></pre></td></tr></table></figure></p>]]></content>
      
      <categories>
          
          <category> web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>构造函数与原型对象</title>
      <link href="/blogs/2018/03/15/setup-obj/"/>
      <url>/blogs/2018/03/15/setup-obj/</url>
      <content type="html"><![CDATA[<h3 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a>构造函数</h3><p>按照惯例，构造函数始终都应该以一个大写字母开头，而非构造函数则应该以一个小写字母开头。</p><p>构造函数本身也是函数，只不过可以用来创建对象而已</p><p>创建实例对象，需要使用new操作符，以这种方式调用构造函数实际上会经历以下4个步骤</p><blockquote><ul><li>1、创建一个新对象；</li><li>2、将构造函数的作用域赋值给新对象（因此this就指向了这个新对象）；</li><li>3、执行构造函数中的代码（为这个新对象添加属性）；</li><li>4、返回新对象</li></ul></blockquote><h3 id="原型对象"><a href="#原型对象" class="headerlink" title="原型对象"></a>原型对象</h3><p>我们创建的每一个函数都有一个prototype,这个属性指向函数的原型对象,在默认情况下，所有原型对象都<br>会自动获得一个constructor（构造函数）属性。这个属性包含一个指向prototype属性所在函数的指针</p><p>创建了自定义的构造函数之后，其原型对象默认只会取得constructor属性；至于其他方法，则都是从Object继承而来的。</p><p>当调用构造函数创建一个新实例后，该实例的内部将包含一个指针（内部属性），指向构造函数的原型对象。<br>ECMA-262第5版中管这个指针叫[[Prototype]]。虽然在脚本中没有标准的方式访问[[Prototype]]，但Firefox、Safari和Chrome在每个对象上都支持一个属性<strong>proto</strong>；这个连接存在于实例与构造函数的原型对象之间，而不是存在于实例与构造函数之间。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>)</span>&#123;&#125;;</div><div class="line">Person.prototype.name = “Nicholas”;</div><div class="line">Person.prototype.age = <span class="number">29</span>;</div><div class="line">Person.prototype.job = “Software Engineer”;</div><div class="line">Person.prototype.sayName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">alert(<span class="keyword">this</span>.name);</div><div class="line">&#125;;</div><div class="line"><span class="keyword">var</span> person1 = <span class="keyword">new</span> Person();</div><div class="line">person1.sayName(); <span class="comment">//“Nicholas”</span></div><div class="line"><span class="keyword">var</span> person2 = <span class="keyword">new</span> Person();</div><div class="line">person2.sayName(); <span class="comment">//“Nicholas”</span></div><div class="line">alert(person1.sayName == person2.sayName); <span class="comment">//true</span></div></pre></td></tr></table></figure><p>以前面使用Person构造函数和Person.prototype创建实例的代码为例，如图</p><p><img src="https://songzhiguo.github.io/lib/images/prototype.jpg" alt=""></p><p>在此，Person.prototype指向了原型对象，而Person.prototype.constructor又指回了Person。</p><p>原型对象中除了包含constructor属性之外，还包括后来添加的其他属性。Person的每个实例——person1和person2都包含一个内部属性，该属性仅仅指向了Person.prototype；换句话说，它们与构造函数没有直接的关系。</p>]]></content>
      
      <categories>
          
          <category> js </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>数组常用方法</title>
      <link href="/blogs/2017/12/29/Array/"/>
      <url>/blogs/2017/12/29/Array/</url>
      <content type="html"><![CDATA[<p>由0个或者多个数据组成的集合<br><a id="more"></a></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*</span></div><div class="line"><span class="comment"> *数组</span></div><div class="line"><span class="comment"> *arr = [] = new Array()</span></div><div class="line"><span class="comment"> *由0个或者多个数据组成的集合</span></div><div class="line"><span class="comment"> *1.有序性，从0开始</span></div><div class="line"><span class="comment"> *2.访问和操作数据通过数字下标arr[0]</span></div><div class="line"><span class="comment"> *3.length</span></div><div class="line"><span class="comment"> * */</span></div></pre></td></tr></table></figure><h4 id="push"><a href="#push" class="headerlink" title="push()"></a>push()</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*</span></div><div class="line"><span class="comment"> *array.push(val1,val2,...)，Number</span></div><div class="line"><span class="comment"> *作用：</span></div><div class="line"><span class="comment"> *向数组的尾部添加数据</span></div><div class="line"><span class="comment"> *参数：</span></div><div class="line"><span class="comment"> *val1,val2：向数组添加的数据，可以是1个也可以是多个，用逗号分隔</span></div><div class="line"><span class="comment"> *返回值：</span></div><div class="line"><span class="comment"> *新数组的长度</span></div><div class="line"><span class="comment"> * */</span></div></pre></td></tr></table></figure><h4 id="pop"><a href="#pop" class="headerlink" title="pop()"></a>pop()</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*</span></div><div class="line"><span class="comment"> *array.pop()，mixed</span></div><div class="line"><span class="comment"> *作用：</span></div><div class="line"><span class="comment"> *删除数组最后一位数据</span></div><div class="line"><span class="comment"> *返回值：</span></div><div class="line"><span class="comment"> *删除的那个数据</span></div><div class="line"><span class="comment"> * */</span></div></pre></td></tr></table></figure><h4 id="unshift"><a href="#unshift" class="headerlink" title="unshift()"></a>unshift()</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*</span></div><div class="line"><span class="comment"> *array.unshift(val1,val2,...)，Number</span></div><div class="line"><span class="comment"> *作用：</span></div><div class="line"><span class="comment"> *向数组的头部添加数据</span></div><div class="line"><span class="comment"> *参数：</span></div><div class="line"><span class="comment"> *val1,val2:向数组添加的数据，可以是1个也可以是多个，用逗号分隔</span></div><div class="line"><span class="comment"> *返回值：</span></div><div class="line"><span class="comment"> *新数组的长度</span></div><div class="line"><span class="comment"> *</span></div><div class="line"><span class="comment"> * */</span></div></pre></td></tr></table></figure><h4 id="shift"><a href="#shift" class="headerlink" title="shift()"></a>shift()</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*</span></div><div class="line"><span class="comment"> *array.shift()，mixed</span></div><div class="line"><span class="comment"> *作用：</span></div><div class="line"><span class="comment"> *删除数组第一位数据</span></div><div class="line"><span class="comment"> *返回值：</span></div><div class="line"><span class="comment"> *删除的那个数据</span></div><div class="line"><span class="comment"> * */</span></div></pre></td></tr></table></figure><h4 id="reverse"><a href="#reverse" class="headerlink" title="reverse()"></a>reverse()</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*</span></div><div class="line"><span class="comment"> *array.reverse(),Array</span></div><div class="line"><span class="comment"> *作用：</span></div><div class="line"><span class="comment"> *翻转数组</span></div><div class="line"><span class="comment"> *返回值：</span></div><div class="line"><span class="comment"> *翻转后的数组</span></div><div class="line"><span class="comment"> * */</span></div></pre></td></tr></table></figure><h4 id="slice"><a href="#slice" class="headerlink" title="slice()"></a>slice()</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*</span></div><div class="line"><span class="comment"> *array.slice(begin,[end]),Array</span></div><div class="line"><span class="comment"> *作用：截取数组指定位置的数据片段，放到新数组返回，原数组不变</span></div><div class="line"><span class="comment"> *参数：</span></div><div class="line"><span class="comment"> *begin:开始位置</span></div><div class="line"><span class="comment"> *[end]:结束位置,默认是最后一位</span></div><div class="line"><span class="comment"> *注意：</span></div><div class="line"><span class="comment"> *1.不传参数，把数组内每个值放到新数组内返回</span></div><div class="line"><span class="comment"> *2.从开始位置，截取到结束位置，不包括结束位置</span></div><div class="line"><span class="comment"> *3.从开始位置，结束位置-开始位置=截取个数</span></div><div class="line"><span class="comment"> *4.-1是最后一位</span></div><div class="line"><span class="comment"> *5.截取不到，返回空数组</span></div><div class="line"><span class="comment"> *</span></div><div class="line"><span class="comment"> * */</span></div></pre></td></tr></table></figure><h4 id="splice"><a href="#splice" class="headerlink" title="splice()"></a>splice()</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*</span></div><div class="line"><span class="comment"> *array.splice(begin,[length],val1,val2,...)</span></div><div class="line"><span class="comment"> *作用：</span></div><div class="line"><span class="comment"> *删除，添加，替换</span></div><div class="line"><span class="comment"> *参数：</span></div><div class="line"><span class="comment"> *begin:开始位置</span></div><div class="line"><span class="comment"> *[length]:长度</span></div><div class="line"><span class="comment"> *val1,val2:要替换或者添加的数据</span></div><div class="line"><span class="comment"> *删除：</span></div><div class="line"><span class="comment"> *begin:从哪位开始删</span></div><div class="line"><span class="comment"> *[length]:删除几位</span></div><div class="line"><span class="comment"> *添加：</span></div><div class="line"><span class="comment"> *begin：开始位置</span></div><div class="line"><span class="comment"> *[length]:0</span></div><div class="line"><span class="comment"> *val1,val2:要添加的数据，可以是1个，也可以是多个，用逗号分隔</span></div><div class="line"><span class="comment"> *替换：</span></div><div class="line"><span class="comment"> *begin：开始位置</span></div><div class="line"><span class="comment"> *[length]:要替换几个</span></div><div class="line"><span class="comment"> *val1,val2:要替换的数据，可以是1个，也可以是多个，用逗号分隔</span></div><div class="line"><span class="comment"> * */</span></div></pre></td></tr></table></figure><h4 id="concat"><a href="#concat" class="headerlink" title="concat()"></a>concat()</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*</span></div><div class="line"><span class="comment"> *array.concat(val1,val2,...),Array</span></div><div class="line"><span class="comment"> *作用：</span></div><div class="line"><span class="comment"> *连接原数组和新数据</span></div><div class="line"><span class="comment"> *参数：</span></div><div class="line"><span class="comment"> *val1,val2:向数组连接的数据，可以是1个也可以是多个，用逗号分隔</span></div><div class="line"><span class="comment"> *返回值:</span></div><div class="line"><span class="comment"> *新数组，注意原数组不变</span></div><div class="line"><span class="comment"> *</span></div><div class="line"><span class="comment"> * */</span></div></pre></td></tr></table></figure><h4 id="sort"><a href="#sort" class="headerlink" title="sort()"></a>sort()</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*</span></div><div class="line"><span class="comment"> *array.sort(funtion()&#123;&#125;)</span></div><div class="line"><span class="comment"> *作用：</span></div><div class="line"><span class="comment"> *根据一定规则给数组排序</span></div><div class="line"><span class="comment"> *参数：</span></div><div class="line"><span class="comment"> *函数：</span></div><div class="line"><span class="comment"> *一定要写形参和返回值</span></div><div class="line"><span class="comment"> *a-b:从小到大</span></div><div class="line"><span class="comment"> *b-a:从大到小</span></div><div class="line"><span class="comment"> *Math.random()-0.5:随机排序</span></div><div class="line"><span class="comment"> *注意：</span></div><div class="line"><span class="comment"> *1.不传参数，根据ASCII码的大小排序</span></div><div class="line"><span class="comment"> *2.排序规则</span></div><div class="line"><span class="comment"> *根据返回值大于0，等于0，小于0决定是否交换2个值的位置</span></div><div class="line"><span class="comment"> * */</span></div></pre></td></tr></table></figure><h4 id="forEach"><a href="#forEach" class="headerlink" title="forEach()"></a>forEach()</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*</span></div><div class="line"><span class="comment"> *array.forEach(function()&#123;&#125;)</span></div><div class="line"><span class="comment"> *作用：</span></div><div class="line"><span class="comment"> *循环、遍历数组</span></div><div class="line"><span class="comment"> *参数：</span></div><div class="line"><span class="comment"> *第一个参数：数组里每一个值</span></div><div class="line"><span class="comment"> *第二个参数：数组里的位置</span></div><div class="line"><span class="comment"> *第三个参数：整个数组</span></div><div class="line"><span class="comment"> *</span></div><div class="line"><span class="comment"> * */</span></div></pre></td></tr></table></figure><h4 id="every"><a href="#every" class="headerlink" title="every()"></a>every()</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*</span></div><div class="line"><span class="comment"> *array.every(function()&#123;&#125;)</span></div><div class="line"><span class="comment"> *作用：</span></div><div class="line"><span class="comment"> *遍历数组，如果每一位值都满足条件，返回true,有一个不满足，就返回false</span></div><div class="line"><span class="comment"> *参数：</span></div><div class="line"><span class="comment"> *第一个参数：数组里每一个值</span></div><div class="line"><span class="comment"> *第二个参数：数组里的位置</span></div><div class="line"><span class="comment"> *第三个参数：整个数组</span></div><div class="line"><span class="comment"> *注意：</span></div><div class="line"><span class="comment"> *一定要写return,形参</span></div><div class="line"><span class="comment"> * */</span></div></pre></td></tr></table></figure><h4 id="filter"><a href="#filter" class="headerlink" title="filter()"></a>filter()</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*</span></div><div class="line"><span class="comment"> *array.filter(function()&#123;&#125;)</span></div><div class="line"><span class="comment"> *作用:</span></div><div class="line"><span class="comment"> *遍历数组，满足条件的值放新数组里返回</span></div><div class="line"><span class="comment"> * */</span></div></pre></td></tr></table></figure><h4 id="map"><a href="#map" class="headerlink" title="map()"></a>map()</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*</span></div><div class="line"><span class="comment"> *array.map(function()&#123;&#125;)</span></div><div class="line"><span class="comment"> *作用：</span></div><div class="line"><span class="comment"> *遍历数组，把每个值判断的结果放到新数组里返回</span></div><div class="line"><span class="comment"> * */</span></div></pre></td></tr></table></figure><h4 id="some"><a href="#some" class="headerlink" title="some()"></a>some()</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*</span></div><div class="line"><span class="comment"> *array.some(function()&#123;&#125;)</span></div><div class="line"><span class="comment"> *作用：</span></div><div class="line"><span class="comment"> *遍历数组，只要有一个值满足判断条件，就返回true,都不满足，返回false</span></div><div class="line"><span class="comment"> * */</span></div></pre></td></tr></table></figure><h4 id="数组去重"><a href="#数组去重" class="headerlink" title="数组去重"></a>数组去重</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>];</div><div class="line">   <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;arr.length;i++)&#123;</div><div class="line">       <span class="keyword">for</span>(<span class="keyword">var</span> j=i+<span class="number">1</span>;j&lt;arr.length;j++)&#123;</div><div class="line">           <span class="keyword">if</span>(arr[i] == arr[j])&#123;</div><div class="line">               arr.splice(j,<span class="number">1</span>);</div><div class="line">               j--;</div><div class="line">           &#125;</div><div class="line">       &#125;</div><div class="line">   &#125;</div></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> handbook </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>日期对象</title>
      <link href="/blogs/2017/12/13/date/"/>
      <url>/blogs/2017/12/13/date/</url>
      <content type="html"><![CDATA[<p>时间对象，时间戳<br><a id="more"></a></p><p>时间对象，时间戳， new Date()</p><p>获取到的是本地时间，时间对象下有一些方法，可以让我们获取或者设置时间</p><p>1970年1月1日00:00:00格林尼治时间</p><p>注意：月从0开始，0是一月，11是十二月</p><blockquote><ul><li>设置时间对象3种格式</li><li>1.数字，用逗号分隔（年,月,日,时,分,秒）</li><li>2.字符串,月份英文或缩写,首字母大小写都行，用逗号或者空格分隔(月 日 年 时:分:秒)</li><li>3.对象,时间对象</li></ul></blockquote><h3 id="获取时间"><a href="#获取时间" class="headerlink" title="获取时间"></a>获取时间</h3><figure class="highlight ada"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">/*</div><div class="line"> *  获取时间,数字类型</div><div class="line"> *      getFullYear() <span class="comment">-- 年</span></div><div class="line"> *      getMonth()    <span class="comment">-- 月（从0开始，0就是一月）</span></div><div class="line"> *      getDate()     <span class="comment">-- 日</span></div><div class="line"> *      getDay()      <span class="comment">-- 星期几（星期一就是1,星期日是0）</span></div><div class="line"> *      getHours()    <span class="comment">-- 小时 </span></div><div class="line"> *      getMinutes()  <span class="comment">-- 分</span></div><div class="line"> *      getSeconds()  <span class="comment">-- 秒</span></div><div class="line"> *      getMilliseconds()<span class="comment">--毫秒</span></div><div class="line"> *      getTime()     <span class="comment">--时间，当前时间距离1970年1月1日00:00:00的毫秒时间差</span></div><div class="line"> * */</div></pre></td></tr></table></figure><h3 id="设置时间"><a href="#设置时间" class="headerlink" title="设置时间"></a>设置时间</h3><figure class="highlight ada"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">/*</div><div class="line"> *  设置时间</div><div class="line"> *      setFullYear() <span class="comment">-- 年</span></div><div class="line"> *      setMonth()    <span class="comment">-- 月（从0开始，0就是一月）</span></div><div class="line"> *      setDate()     <span class="comment">-- 日</span></div><div class="line"> *      setHours()    <span class="comment">-- 小时 </span></div><div class="line"> *      setMinutes()  <span class="comment">-- 分</span></div><div class="line"> *      setSeconds()  <span class="comment">-- 秒</span></div><div class="line"> *      setMilliseconds()<span class="comment">--毫秒</span></div><div class="line"> *      setTime()     <span class="comment">--时间，当前时间距离1970年1月1日00:00:00的毫秒时间差</span></div><div class="line"> * */</div></pre></td></tr></table></figure><h3 id="时间格式化"><a href="#时间格式化" class="headerlink" title="时间格式化"></a>时间格式化</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> arr = [<span class="number">2016</span>,<span class="number">10</span>,<span class="number">1</span>,<span class="number">10</span>,<span class="number">1</span>,<span class="number">10</span>];</div><div class="line"><span class="comment">//2016年10月1日10时1分10秒</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params">arr,n</span>)</span>&#123;</div><div class="line">    <span class="keyword">var</span> s = <span class="string">''</span>;</div><div class="line">    <span class="keyword">var</span> n = n || <span class="number">0</span>;</div><div class="line">    <span class="keyword">var</span> aStr = [<span class="string">'年月日时分秒'</span>,<span class="string">'-- ::'</span>,<span class="string">'// ::'</span>];</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;arr.length;i++)&#123;</div><div class="line">        s += arr[i]+aStr[n].charAt(i);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> s;</div><div class="line">&#125;</div><div class="line"><span class="built_in">console</span>.log(fn(arr))</div></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> handbook </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>字符串常用方法</title>
      <link href="/blogs/2017/12/11/string/"/>
      <url>/blogs/2017/12/11/string/</url>
      <content type="html"><![CDATA[<p>字符串：由0个或多个字符组成的串，只能读取，不能设置。<br><a id="more"></a></p><blockquote><ul><li>string.方法名(参数1,[参数2])，返回值类型</li><li>参数列表</li><li>[]:可选参数</li></ul></blockquote><h3 id="charAt"><a href="#charAt" class="headerlink" title="charAt()"></a>charAt()</h3><figure class="highlight vim"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">/*</div><div class="line"> *  <span class="built_in">string</span>.charAt(<span class="built_in">index</span>)，String</div><div class="line"> * 作用：查找字符串某一位置是什么字符</div><div class="line"> * 参数：</div><div class="line"> *  <span class="built_in">index</span>:查找第几位是什么字符串，第一位是<span class="number">0</span></div><div class="line"> * 注意：</div><div class="line"> *  <span class="number">1</span>.只能获取，不能设置</div><div class="line"> *  <span class="number">2</span>.没有这一位，返回空字符串</div><div class="line"> * */</div></pre></td></tr></table></figure><h3 id="charCodeAt"><a href="#charCodeAt" class="headerlink" title="charCodeAt()"></a>charCodeAt()</h3><figure class="highlight subunit"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">/*</div><div class="line"> *  string.charCodeAt(index),Number</div><div class="line"> * 作用：返回字符串某一位字符串的unicode码</div><div class="line"> * 参数：</div><div class="line"> *  index：第几位，从0开始</div><div class="line"> *  [a-z]:97<span class="string">-122</span></div><div class="line"> *  [A-Z]:65<span class="string">-90</span></div><div class="line"> *  [0<span class="string">-9</span>]:48<span class="string">-57</span></div><div class="line"> * */</div></pre></td></tr></table></figure><h3 id="indexOf"><a href="#indexOf" class="headerlink" title="indexOf()"></a>indexOf()</h3><figure class="highlight vim"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">/*</div><div class="line">  *  <span class="built_in">string</span>.indexOf(searchValue,[<span class="built_in">index</span>]),Number</div><div class="line">  * 作用：从字符串第一位开始查找指定的字符第一次出现的位置(从左往右)</div><div class="line">  * 参数：</div><div class="line">  *  searchValue：要查找的字符，<span class="built_in">string</span></div><div class="line">  *  [<span class="built_in">index</span>]:从第几位开始找，默认值为<span class="number">0</span></div><div class="line">  * 注意：</div><div class="line">  *  <span class="number">1</span>.没找到指定字符，返回-<span class="number">1</span></div><div class="line">  *  <span class="number">2</span>.不传参数，返回-<span class="number">1</span></div><div class="line">  * */</div></pre></td></tr></table></figure><h3 id="lastIndexOf"><a href="#lastIndexOf" class="headerlink" title="lastIndexOf()"></a>lastIndexOf()</h3><figure class="highlight vim"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">/*</div><div class="line"> * <span class="built_in">string</span>.lastIndexOf(searchValue,[<span class="built_in">index</span>]),Number</div><div class="line"> * 作用：从字符串最后一位开始查找指定的字符第一次出现的位置(从右往左)</div><div class="line"> * 参数：</div><div class="line"> *   searchValue：要查找的字符，<span class="built_in">string</span></div><div class="line"> *   [<span class="built_in">index</span>]:从第几位开始找，默认值为最后一位</div><div class="line"> * 注意：</div><div class="line"> *   <span class="number">1</span>.没找到指定字符，返回-<span class="number">1</span></div><div class="line"> *   <span class="number">2</span>.不传参数，返回-<span class="number">1</span> </div><div class="line"> * */</div></pre></td></tr></table></figure><h3 id="split"><a href="#split" class="headerlink" title="split ()"></a>split ()</h3><figure class="highlight ada"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">/*</div><div class="line"> * string.split(<span class="keyword">separate</span>),<span class="keyword">Array</span></div><div class="line"> * 作用：把字符串用指定分隔符分隔，放到数组里返回</div><div class="line"> * 参数：</div><div class="line"> *     <span class="keyword">separate</span>:分隔符</div><div class="line"> *注意：</div><div class="line"> *    <span class="number">1</span>.不传参数，把整个字符串放到数组里返回</div><div class="line"> *    <span class="number">2</span>.分隔符是空字符串''，字符串的每一个字符都是一个结果放到数组里返回</div><div class="line"> *    <span class="number">3</span>.用字符串里没有的字符分隔，把整个字符串放到数组里返回</div><div class="line"> * */</div></pre></td></tr></table></figure><h3 id="join"><a href="#join" class="headerlink" title="join()"></a>join()</h3><figure class="highlight ada"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">/*</div><div class="line"> *  <span class="keyword">Array</span>.join(<span class="keyword">separate</span>),String</div><div class="line"> *  作用：把数组里的值用分隔符连接成字符串返回</div><div class="line"> * 参数：</div><div class="line"> *    <span class="keyword">separate</span>：连接符</div><div class="line"> * 注意：</div><div class="line"> *      <span class="number">1</span>.不传参数，默认连接符是逗号</div><div class="line"> * */</div></pre></td></tr></table></figure><h3 id="toLowerCase"><a href="#toLowerCase" class="headerlink" title="toLowerCase()"></a>toLowerCase()</h3><figure class="highlight cmake"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">/*</div><div class="line"> * <span class="keyword">string</span>.toLowerCase(),<span class="keyword">String</span></div><div class="line"> * 作用：把字符串里大写变成小写</div><div class="line"> * */</div></pre></td></tr></table></figure><h3 id="toUpperCase"><a href="#toUpperCase" class="headerlink" title="toUpperCase()"></a>toUpperCase()</h3><figure class="highlight cmake"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">/*</div><div class="line"> * <span class="keyword">string</span>.toUpperCase(),<span class="keyword">String</span></div><div class="line"> * 作用：把字符串里小写变成大写</div><div class="line"> * */</div></pre></td></tr></table></figure><h3 id="查找替换"><a href="#查找替换" class="headerlink" title="查找替换"></a>查找替换</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></div><div class="line">    这是一行文字这是一行文字这是一行文字这是一行文字这是一行文字这是一行文字这好是一行文字这是一行文字这是一行文字这是一行文字这是一行文字这是一行文字这是一行文字这是一行文字这好是一行文字这是一行文字这是一行文字这是一行文字这是一行文字这是一行文字这是一行文字这是一行文字这是一行文字这是好一行文字这是一行文字这是一行文字这是一行文字</div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></div><div class="line"><span class="javascript">    <span class="keyword">var</span> div = <span class="built_in">document</span>.getElementsByTagName(<span class="string">'div'</span>)[<span class="number">0</span>];</span></div><div class="line"><span class="actionscript">    <span class="keyword">var</span> val = div.innerHTML;</span></div><div class="line"><span class="actionscript">    div.innerHTML = val.split(<span class="string">'好'</span>).join(<span class="string">'坏'</span>);</span></div><div class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure><h3 id="slice"><a href="#slice" class="headerlink" title="slice()"></a>slice()</h3><figure class="highlight ocaml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">/*</div><div class="line"> *  <span class="built_in">string</span>.slice(<span class="keyword">begin</span>,[<span class="keyword">end</span>]),<span class="built_in">string</span></div><div class="line"> *  作用：</div><div class="line"> *      截取字符串中某一段字符片段</div><div class="line"> *  参数：</div><div class="line"> *      <span class="keyword">begin</span>:开始位置</div><div class="line"> *      [<span class="keyword">end</span>]:结束位置,默认是最后一位</div><div class="line"> *  注意：</div><div class="line"> *      <span class="number">1.</span>不传参数，返回整个字符串</div><div class="line"> *      <span class="number">2.</span>从开始位置截取到结束位置，不包括结束位置的字符</div><div class="line"> *      <span class="number">3.</span>结束位置-开始位置 = 截取的字符个数，从开始位置截取几个字符</div><div class="line"> *      <span class="number">4.</span>截取不到，返回空字符串</div><div class="line"> *      <span class="number">5.</span>-<span class="number">1</span>是最后一位</div><div class="line"> * */</div></pre></td></tr></table></figure><h3 id="substring"><a href="#substring" class="headerlink" title="substring()"></a>substring()</h3><figure class="highlight ocaml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">/*</div><div class="line"> *  <span class="built_in">string</span>.substring(<span class="keyword">begin</span>,[<span class="keyword">end</span>]),<span class="built_in">string</span></div><div class="line"> *  作用：</div><div class="line"> *      截取字符串中某一段字符片段</div><div class="line"> *  参数：</div><div class="line"> *      <span class="keyword">begin</span>:开始位置</div><div class="line"> *      [<span class="keyword">end</span>]:结束位置,默认是最后一位</div><div class="line"> *  注意：</div><div class="line"> *      <span class="number">1.</span>不传参数，返回整个字符串</div><div class="line"> *      <span class="number">2.</span>从开始位置截取到结束位置，不包括结束位置的字符</div><div class="line"> *      <span class="number">3.</span>结束位置-开始位置 = 截取的字符个数，从开始位置截取几个字符</div><div class="line"> *      <span class="number">4.</span>截取不到，返回空字符串</div><div class="line"> *      <span class="number">5.</span>与slice区别</div><div class="line"> *          a.大小，会自动转成小大</div><div class="line"> *          b.负数</div><div class="line"> * */</div></pre></td></tr></table></figure><h3 id="substr"><a href="#substr" class="headerlink" title="substr()"></a>substr()</h3><figure class="highlight applescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">/*</div><div class="line"> *  <span class="built_in">string</span>.substr(begin,[<span class="built_in">length</span>]),<span class="built_in">string</span></div><div class="line"> *  作用：</div><div class="line"> *      截取字符串中某一段字符片段</div><div class="line"> *  参数：</div><div class="line"> *      begin:开始位置</div><div class="line"> *      [<span class="built_in">length</span>]：截取长度</div><div class="line"> *  注意：</div><div class="line"> *      <span class="number">1.</span>不传参数，返回整个字符串</div><div class="line"> *      <span class="number">2.</span>从开始位置截取到结束位置，不包括结束位置的字符</div><div class="line"> *      <span class="number">3.</span>结束位置-开始位置 = 截取的字符个数，从开始位置截取几个字符</div><div class="line"> *      <span class="number">4.</span>截取不到，返回空字符串</div><div class="line"> *      <span class="number">5.</span><span class="number">-1</span>是最后一位   </div><div class="line"> * */</div></pre></td></tr></table></figure><h3 id="trim"><a href="#trim" class="headerlink" title="trim()"></a>trim()</h3><figure class="highlight q"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">/*</div><div class="line"> *  <span class="built_in">string</span>.<span class="built_in">trim</span>(),<span class="built_in">string</span></div><div class="line"> *  作用: 去除字符串前后空格</div><div class="line"> * */</div></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> handbook </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>正则知识点</title>
      <link href="/blogs/2017/12/08/RegExp/"/>
      <url>/blogs/2017/12/08/RegExp/</url>
      <content type="html"><![CDATA[<p>正则的两种写法：<br><a id="more"></a></p><p>第一种（标准写法）：<br>new RegExp(规则，修饰符)；</p><p>第二种（简写）：<br>/规则/</p><blockquote><ul><li>\d：一个数字</li><li>\D：一个非数字</li><li>\w：一个数字、字母、下划线</li><li>\W：一个非数字、字母、下划线</li><li>\n：换行</li><li>\s：空格</li><li>\S：非空格</li><li>\b：边界符</li><li>.：任意字符除了\n</li><li>[]：在中括号里任意选择一个字符。</li><li>[^]：排除</li><li>{}：量词范围</li><li>{0,1}/?：最小可以没有最大1个</li><li>{0,}/*：最小没有，最大无限</li><li>{1,}/+：最小1个，最大无限</li><li>{n}：固定的次数</li><li>修饰符：i -&gt;  忽略大小写。</li><li>转义符：\</li></ul></blockquote><h4 id="正则的方法-text"><a href="#正则的方法-text" class="headerlink" title="正则的方法-text"></a>正则的方法-text</h4><p>test:检测是否正则匹配的内容,如果正则成立那么返回一个布尔值。</p><blockquote><ul><li>正则.test(string);</li></ul></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> str = <span class="string">'RegExp'</span>;</div><div class="line"><span class="keyword">var</span> re = <span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">'p'</span>,<span class="string">'i'</span>);</div><div class="line"><span class="built_in">console</span>.log(re.test(str));</div></pre></td></tr></table></figure><h4 id="字符串方法-match"><a href="#字符串方法-match" class="headerlink" title="字符串方法-match"></a>字符串方法-match</h4><p>match：将匹配到的字符放到一个数组中。</p><p>string.match(正则);</p><p>当匹配到的字符只有一个的时候，会显示出多个属性</p><p>index: 匹配字符的位置   </p><p>input: 所有内容</p><p>而length为1</p><blockquote><ul><li>match如果找不到返回null</li></ul></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> str = <span class="string">'das37213dsa321hjkh321321'</span>;</div><div class="line"><span class="built_in">console</span>.log(str.match(<span class="regexp">/\d+/g</span>))</div></pre></td></tr></table></figure><h4 id="字符串的方法-search"><a href="#字符串的方法-search" class="headerlink" title="字符串的方法-search"></a>字符串的方法-search</h4><p>search：找到（可以指定也可以正则匹配）匹配的字符位置。</p><p>sting.search(字符串||正则);</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> str = <span class="string">'aacabca523c'</span>;</div><div class="line"><span class="built_in">console</span>.log(str.search(<span class="regexp">/\d/</span>));</div></pre></td></tr></table></figure><blockquote><ul><li>search如果找不到返回-1</li></ul></blockquote><h4 id="字符串方法-replace"><a href="#字符串方法-replace" class="headerlink" title="字符串方法-replace"></a>字符串方法-replace</h4><p>replace：replace</p><p>string.replace(要替换谁||可以用正则,替换成什么||函数);</p><p>返回值为替换好的字符串。</p><p>注意：<br>如果使用函数，那么一定要有retrun,不然为undefind</p><p>一般情况下</p><p>函数内的第一个参数是当前匹配的字符。</p><p>函数内的第二个参数是当前匹配的索引值。</p><p>函数内的第三个参数是当前总的字符串。</p><p>函数内的第四个以后参数都为undefined。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> str = <span class="string">'中国共产党,习近平总书记说：“法轮功是邪教!”'</span>;</div><div class="line">str.replace(<span class="regexp">/中国共产党|习近平|法轮功|邪教/g</span>,<span class="function"><span class="keyword">function</span>(<span class="params">$<span class="number">0</span>,$<span class="number">1</span>,$<span class="number">2</span>,$<span class="number">3</span>,$<span class="number">4</span></span>)</span>&#123;</div><div class="line">    <span class="built_in">console</span>.log($<span class="number">0</span>,$<span class="number">1</span>,$<span class="number">2</span>,$<span class="number">3</span>,$<span class="number">4</span>);</div><div class="line">&#125;);</div></pre></td></tr></table></figure><h4 id="子项"><a href="#子项" class="headerlink" title="子项 - ()"></a>子项 - ()</h4><p>从左往右数</p><p>如果正则中有子项</p><p>从函数的第一个参数之后就是匹配到的子项值，<br>当参数的个数等于子项个数+1的时候，之后都为正常模式下的参数了(比如：索引，整个字符，undefined..)</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> str = <span class="string">'2017/2/17'</span>;</div><div class="line"><span class="keyword">var</span> str = str.replace(<span class="regexp">/(\d+)\D+(\d+)\D+(\d+)/</span>,<span class="function"><span class="keyword">function</span>(<span class="params">$<span class="number">0</span>,$<span class="number">1</span>,$<span class="number">2</span>,$<span class="number">3</span></span>)</span>&#123;</div><div class="line">    <span class="comment">//console.log($1,$2,$3);</span></div><div class="line">    <span class="keyword">return</span> $<span class="number">1</span> + <span class="string">'年'</span> + $<span class="number">2</span> + <span class="string">'月'</span> + $<span class="number">3</span> + <span class="string">'日'</span>;</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(str);</div></pre></td></tr></table></figure><h4 id="子项重定向"><a href="#子项重定向" class="headerlink" title="子项重定向"></a>子项重定向</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> str = <span class="string">'ssssssssaaaaaabbbbbb'</span>;</div><div class="line">str.replace(<span class="regexp">/(\w)\1+/g</span>,<span class="function"><span class="keyword">function</span>(<span class="params">$<span class="number">0</span>,$<span class="number">1</span></span>)</span>&#123;</div><div class="line">    <span class="built_in">console</span>.log($<span class="number">1</span>);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> handbook </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>移动端背景音乐自动播放问题</title>
      <link href="/blogs/2017/11/23/autoplay/"/>
      <url>/blogs/2017/11/23/autoplay/</url>
      <content type="html"><![CDATA[<p>大部分IOS系统和少部分Android微信不支持自动播放<br><a id="more"></a> </p><p>解决方案：监听WeixinJSBridgeReady事件、DOMContentLoaded事件</p><p>微信的JS API建立在微信壳浏览器的内置JS对象WeixinJSBridge上，WeixinJSBridge并不是WebView一打开就有了，客户端需要初始化这个对象，当这个对象准备好的时候，客户端会抛出事件”WeixinJSBridgeReady”。</p><p>发现部分机型，监听DOMContentLoaded和load事件，在回调中也可以播放音乐；<br>所以，为了保险起见，可以同时监听两个事件，以增强其适用性。<br>代码如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">document</span>.addEventListener(<span class="string">'DOMContentLoaded'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">audioAutoPlay</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="keyword">var</span> audio = <span class="built_in">document</span>.getElementById(<span class="string">'bg-music'</span>);</div><div class="line">            audio.play();</div><div class="line">        <span class="built_in">document</span>.addEventListener(<span class="string">"WeixinJSBridgeReady"</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">            audio.play();</div><div class="line">        &#125;, <span class="literal">false</span>);</div><div class="line">    &#125;</div><div class="line">    audioAutoPlay();</div><div class="line">&#125;);</div></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> web </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>面向对象编程构造函数的继承</title>
      <link href="/blogs/2017/11/11/oriented/"/>
      <url>/blogs/2017/11/11/oriented/</url>
      <content type="html"><![CDATA[<p>今天要介绍的是，对象之间的”继承”的五种方法。<br><a id="more"></a></p><p>比如，现在有一个”动物”对象的构造函数。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Animal</span>(<span class="params"></span>)</span>&#123;</div><div class="line">　　　　<span class="keyword">this</span>.species = <span class="string">"动物"</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>还有一个”猫”对象的构造函数。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">　　<span class="function"><span class="keyword">function</span> <span class="title">Cat</span>(<span class="params">name,color</span>)</span>&#123;</div><div class="line">　　　　<span class="keyword">this</span>.name = name;</div><div class="line">　　　　<span class="keyword">this</span>.color = color;</div><div class="line">　　&#125;</div></pre></td></tr></table></figure><p>怎样才能使”猫”继承”动物”呢？</p><h4 id="一、-构造函数绑定"><a href="#一、-构造函数绑定" class="headerlink" title="一、 构造函数绑定"></a>一、 构造函数绑定</h4><p>第一种方法也是最简单的方法，使用call或apply方法，将父对象的构造函数绑定在子对象上，即在子对象构造函数中加一行：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">　　<span class="function"><span class="keyword">function</span> <span class="title">Cat</span>(<span class="params">name,color</span>)</span>&#123;</div><div class="line">　　　　Animal.apply(<span class="keyword">this</span>, <span class="built_in">arguments</span>);</div><div class="line">　　　　<span class="keyword">this</span>.name = name;</div><div class="line">　　　　<span class="keyword">this</span>.color = color;</div><div class="line">　　&#125;</div><div class="line">　　<span class="keyword">var</span> cat1 = <span class="keyword">new</span> Cat(<span class="string">"大毛"</span>,<span class="string">"黄色"</span>);</div><div class="line">　　alert(cat1.species); <span class="comment">// 动物</span></div></pre></td></tr></table></figure><h4 id="二、-prototype模式"><a href="#二、-prototype模式" class="headerlink" title="二、 prototype模式"></a>二、 prototype模式</h4><p>第二种方法更常见，使用prototype属性。</p><p>如果”猫”的prototype对象，指向一个Animal的实例，那么所有”猫”的实例，就能继承Animal了。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">　　Cat.prototype = <span class="keyword">new</span> Animal();</div><div class="line">　　Cat.prototype.constructor = Cat;</div><div class="line">　　<span class="keyword">var</span> cat1 = <span class="keyword">new</span> Cat(<span class="string">"大毛"</span>,<span class="string">"黄色"</span>);</div><div class="line">　　alert(cat1.species); <span class="comment">// 动物</span></div></pre></td></tr></table></figure><p>代码的第一行，我们将Cat的prototype对象指向一个Animal的实例。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Cat.prototype = <span class="keyword">new</span> Animal();</div></pre></td></tr></table></figure><p>它相当于完全删除了prototype 对象原先的值，然后赋予一个新值。但是，第二行又是什么意思呢？</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Cat.prototype.constructor = Cat;</div></pre></td></tr></table></figure><p>原来，任何一个prototype对象都有一个constructor属性，指向它的构造函数。如果没有”Cat.prototype = new Animal();”这一行，Cat.prototype.constructor是指向Cat的；加了这一行以后，Cat.prototype.constructor指向Animal。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">alert(Cat.prototype.constructor == Animal); <span class="comment">//true</span></div></pre></td></tr></table></figure><p>更重要的是，每一个实例也有一个constructor属性，默认调用prototype对象的constructor属性。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">alert(cat1.constructor == Cat.prototype.constructor); <span class="comment">// true</span></div></pre></td></tr></table></figure><p>因此，在运行”Cat.prototype = new Animal();”这一行之后，cat1.constructor也指向Animal！</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">alert(cat1.constructor == Animal); <span class="comment">// true</span></div></pre></td></tr></table></figure><p>这显然会导致继承链的紊乱（cat1明明是用构造函数Cat生成的），因此我们必须手动纠正，将Cat.prototype对象的constructor值改为Cat。这就是第二行的意思。</p><p>这是很重要的一点，编程时务必要遵守。下文都遵循这一点，即如果替换了prototype对象，</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">o.prototype = &#123;&#125;;</div></pre></td></tr></table></figure><p>那么，下一步必然是为新的prototype对象加上constructor属性，并将这个属性指回原来的构造函数。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">o.prototype.constructor = o;</div></pre></td></tr></table></figure><h4 id="三、-直接继承prototype"><a href="#三、-直接继承prototype" class="headerlink" title="三、 直接继承prototype"></a>三、 直接继承prototype</h4><p>第三种方法是对第二种方法的改进。由于Animal对象中，不变的属性都可以直接写入Animal.prototype。所以，我们也可以让Cat()跳过 Animal()，直接继承Animal.prototype。</p><p>现在，我们先将Animal对象改写：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">　　<span class="function"><span class="keyword">function</span> <span class="title">Animal</span>(<span class="params"></span>)</span>&#123; &#125;</div><div class="line">　　Animal.prototype.species = <span class="string">"动物"</span>;</div></pre></td></tr></table></figure><p>然后，将Cat的prototype对象，然后指向Animal的prototype对象，这样就完成了继承。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">　　Cat.prototype = Animal.prototype;</div><div class="line">　　Cat.prototype.constructor = Cat;</div><div class="line">　　<span class="keyword">var</span> cat1 = <span class="keyword">new</span> Cat(<span class="string">"大毛"</span>,<span class="string">"黄色"</span>);</div><div class="line">　　alert(cat1.species); <span class="comment">// 动物</span></div></pre></td></tr></table></figure><p>与前一种方法相比，这样做的优点是效率比较高（不用执行和建立Animal的实例了），比较省内存。缺点是<br>Cat.prototype和Animal.prototype现在指向了同一个对象，那么任何对Cat.prototype的修改，都会反映到Animal.prototype。</p><p>所以，上面这一段代码其实是有问题的。请看第二行</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Cat.prototype.constructor = Cat;</div></pre></td></tr></table></figure><p>这一句实际上把Animal.prototype对象的constructor属性也改掉了！</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">alert(Animal.prototype.constructor); <span class="comment">// Cat</span></div></pre></td></tr></table></figure><h4 id="四、-利用空对象作为中介"><a href="#四、-利用空对象作为中介" class="headerlink" title="四、 利用空对象作为中介"></a>四、 利用空对象作为中介</h4><p>由于”直接继承prototype”存在上述的缺点，所以就有第四种方法，利用一个空对象作为中介。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">　　<span class="keyword">var</span> F = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;;</div><div class="line">　　F.prototype = Animal.prototype;</div><div class="line">　　Cat.prototype = <span class="keyword">new</span> F();</div><div class="line">　　Cat.prototype.constructor = Cat;</div></pre></td></tr></table></figure><p>F是空对象，所以几乎不占内存。这时，修改Cat的prototype对象，就不会影响到Animal的prototype对象。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">alert(Animal.prototype.constructor); <span class="comment">// Animal</span></div></pre></td></tr></table></figure><p>我们将上面的方法，封装成一个函数，便于使用。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">　　<span class="function"><span class="keyword">function</span> <span class="title">extend</span>(<span class="params">Child, Parent</span>) </span>&#123;</div><div class="line"></div><div class="line">　　　　<span class="keyword">var</span> F = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;;</div><div class="line">　　　　F.prototype = Parent.prototype;</div><div class="line">　　　　Child.prototype = <span class="keyword">new</span> F();</div><div class="line">　　　　Child.prototype.constructor = Child;</div><div class="line">　　　　Child.uber = Parent.prototype;</div><div class="line">　　&#125;</div></pre></td></tr></table></figure><p>使用的时候，方法如下</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">　　extend(Cat,Animal);</div><div class="line">　　<span class="keyword">var</span> cat1 = <span class="keyword">new</span> Cat(<span class="string">"大毛"</span>,<span class="string">"黄色"</span>);</div><div class="line">　　alert(cat1.species); <span class="comment">// 动物</span></div></pre></td></tr></table></figure><p>这个extend函数，就是YUI库如何实现继承的方法。</p><p>另外，说明一点，函数体最后一行</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Child.uber = Parent.prototype;</div></pre></td></tr></table></figure><p>意思是为子对象设一个uber属性，这个属性直接指向父对象的prototype属性。（uber是一个德语词，意思是”向上”、”上一层”。）这等于在子对象上打开一条通道，可以直接调用父对象的方法。这一行放在这里，只是为了实现继承的完备性，纯属备用性质。</p><h4 id="五、-拷贝继承"><a href="#五、-拷贝继承" class="headerlink" title="五、 拷贝继承"></a>五、 拷贝继承</h4><p>上面是采用prototype对象，实现继承。我们也可以换一种思路，纯粹采用”拷贝”方法实现继承。简单说，如果把父对象的所有属性和方法，拷贝进子对象，不也能够实现继承吗？这样我们就有了第五种方法。</p><p>首先，还是把Animal的所有不变属性，都放到它的prototype对象上。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">　　<span class="function"><span class="keyword">function</span> <span class="title">Animal</span>(<span class="params"></span>)</span>&#123;&#125;</div><div class="line">　　Animal.prototype.species = <span class="string">"动物"</span>;</div></pre></td></tr></table></figure><p>然后，再写一个函数，实现属性拷贝的目的。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">　　<span class="function"><span class="keyword">function</span> <span class="title">extend2</span>(<span class="params">Child, Parent</span>) </span>&#123;</div><div class="line">　　　　<span class="keyword">var</span> p = Parent.prototype;</div><div class="line">　　　　<span class="keyword">var</span> c = Child.prototype;</div><div class="line">　　　　<span class="keyword">for</span> (<span class="keyword">var</span> i <span class="keyword">in</span> p) &#123;</div><div class="line">　　　　　　c[i] = p[i];</div><div class="line">　　　　　　&#125;</div><div class="line">　　　　c.uber = p;</div><div class="line">　　&#125;</div></pre></td></tr></table></figure><p>这个函数的作用，就是将父对象的prototype对象中的属性，一一拷贝给Child对象的prototype对象。<br>使用的时候，这样写：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">　　extend2(Cat, Animal);</div><div class="line">　　<span class="keyword">var</span> cat1 = <span class="keyword">new</span> Cat(<span class="string">"大毛"</span>,<span class="string">"黄色"</span>);</div><div class="line">　　alert(cat1.species); <span class="comment">// 动物</span></div></pre></td></tr></table></figure><p>（完）</p>]]></content>
      
      <categories>
          
          <category> js </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>IOS中position:fixed弹出框中的input出现光标错位的问题</title>
      <link href="/blogs/2017/11/09/pit/"/>
      <url>/blogs/2017/11/09/pit/</url>
      <content type="html"><![CDATA[<p>解决方案是 在弹框出现的时候给body添加fixed<br><a id="more"></a></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$(<span class="string">"body"</span>).css(<span class="string">"position"</span>,<span class="string">"fixed"</span>)</div></pre></td></tr></table></figure><p>当弹框消失的时候</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$(<span class="string">"body"</span>).css(<span class="string">"position"</span>,<span class="string">"relative"</span>)</div></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> web </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>Javascript的this用法</title>
      <link href="/blogs/2017/11/08/this/"/>
      <url>/blogs/2017/11/08/this/</url>
      <content type="html"><![CDATA[<p>this是Javascript语言的一个关键字。<br><a id="more"></a></p><p>它代表函数运行时，自动生成的一个内部对象，只能在函数内部使用。比如：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>)</span>&#123; </div><div class="line">　　　　<span class="keyword">this</span>.x = <span class="number">1</span>; </div><div class="line">　　&#125;</div></pre></td></tr></table></figure><p>随着函数使用场合的不同，this的值会发生变化。但是有一个总的原则，那就是this指的是，调用函数的那个对象。<br>下面分四种情况，详细讨论this的用法。</p><h4 id="情况一：纯粹的函数调用"><a href="#情况一：纯粹的函数调用" class="headerlink" title="情况一：纯粹的函数调用"></a>情况一：纯粹的函数调用</h4><p>这是函数的最通常用法，属于全局性调用，因此this就代表全局对象Global。<br>请看下面这段代码，它的运行结果是1。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>)</span>&#123;</div><div class="line">　　　　<span class="keyword">this</span>.x = <span class="number">1</span>;</div><div class="line">　　　　alert(<span class="keyword">this</span>.x);</div><div class="line">　　&#125;</div><div class="line">　　test(); <span class="comment">// 1</span></div></pre></td></tr></table></figure><p>为了证明this就是全局对象，我对代码做一些改变：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">　　<span class="keyword">var</span> x = <span class="number">1</span>;</div><div class="line">　　<span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>)</span>&#123;</div><div class="line">　　　　alert(<span class="keyword">this</span>.x);</div><div class="line">　　&#125;</div><div class="line">　　test(); <span class="comment">// 1</span></div></pre></td></tr></table></figure><p>运行结果还是1。再变一下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> x = <span class="number">1</span>;</div><div class="line">　　<span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>)</span>&#123;</div><div class="line">　　　　<span class="keyword">this</span>.x = <span class="number">0</span>;</div><div class="line">　　&#125;</div><div class="line">　　test();</div><div class="line">　　alert(x); <span class="comment">//0</span></div></pre></td></tr></table></figure><h4 id="情况二：作为对象方法的调用"><a href="#情况二：作为对象方法的调用" class="headerlink" title="情况二：作为对象方法的调用"></a>情况二：作为对象方法的调用</h4><p>函数还可以作为某个对象的方法调用，这时this就指这个上级对象。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>)</span>&#123;</div><div class="line">　　　　alert(<span class="keyword">this</span>.x);</div><div class="line">　　&#125;</div><div class="line">　　<span class="keyword">var</span> o = &#123;&#125;;</div><div class="line">　　o.x = <span class="number">1</span>;</div><div class="line">　　o.m = test;</div><div class="line">　　o.m(); <span class="comment">// 1</span></div></pre></td></tr></table></figure><h4 id="情况三-作为构造函数调用"><a href="#情况三-作为构造函数调用" class="headerlink" title="情况三 作为构造函数调用"></a>情况三 作为构造函数调用</h4><p>所谓构造函数，就是通过这个函数生成一个新对象（object）。这时，this就指这个新对象。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>)</span>&#123;</div><div class="line">　　　　<span class="keyword">this</span>.x = <span class="number">1</span>;</div><div class="line">　　&#125;</div><div class="line">　　<span class="keyword">var</span> o = <span class="keyword">new</span> test();</div><div class="line">　　alert(o.x); <span class="comment">// 1</span></div></pre></td></tr></table></figure><p>运行结果为1。为了表明这时this不是全局对象，我对代码做一些改变：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">　<span class="keyword">var</span> x = <span class="number">2</span>;</div><div class="line">　　<span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>)</span>&#123;</div><div class="line">　　　　<span class="keyword">this</span>.x = <span class="number">1</span>;</div><div class="line">　　&#125;</div><div class="line">　　<span class="keyword">var</span> o = <span class="keyword">new</span> test();</div><div class="line">　　alert(x); <span class="comment">//2</span></div></pre></td></tr></table></figure><p>运行结果为2，表明全局变量x的值根本没变。</p><h4 id="情况四-apply调用"><a href="#情况四-apply调用" class="headerlink" title="情况四 apply调用"></a>情况四 apply调用</h4><p>apply()是函数对象的一个方法，它的作用是改变函数的调用对象，它的第一个参数就表示改变后的调用这个函数的对象。因此，this指的就是这第一个参数。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">　　<span class="keyword">var</span> x = <span class="number">0</span>;</div><div class="line">　　<span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>)</span>&#123;</div><div class="line">　　　　alert(<span class="keyword">this</span>.x);</div><div class="line">　　&#125;</div><div class="line">　　<span class="keyword">var</span> o=&#123;&#125;;</div><div class="line">　　o.x = <span class="number">1</span>;</div><div class="line">　　o.m = test;</div><div class="line">　　o.m.apply(); <span class="comment">//0</span></div></pre></td></tr></table></figure><p>apply()的参数为空时，默认调用全局对象。因此，这时的运行结果为0，证明this指的是全局对象。<br>如果把最后一行代码修改为</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">　o.m.apply(o); <span class="comment">//1</span></div></pre></td></tr></table></figure><p>运行结果就变成了1，证明了这时this代表的是对象o。</p><p>（完）</p>]]></content>
      
      <categories>
          
          <category> js </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
  
  
</search>
