<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>SongZhiguo</title>
  
  
  <link href="/blogs/atom.xml" rel="self"/>
  
  <link href="https://songzhiguo.github.io/blogs/"/>
  <updated>2019-03-21T02:46:53.390Z</updated>
  <id>https://songzhiguo.github.io/blogs/</id>
  
  <author>
    <name>Songzhiguo powered by Hexo</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>前端导出excel</title>
    <link href="https://songzhiguo.github.io/blogs/2019/03/21/derive/"/>
    <id>https://songzhiguo.github.io/blogs/2019/03/21/derive/</id>
    <published>2019-03-21T02:23:12.000Z</published>
    <updated>2019-03-21T02:46:53.390Z</updated>
    
    <content type="html"><![CDATA[<p>纯前端将数据导出excel<br><a id="more"></a></p><h4 id="安装依赖"><a href="#安装依赖" class="headerlink" title="安装依赖"></a>安装依赖</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">npm <span class="keyword">install</span> <span class="comment">--save file-saver xlsx</span></div><div class="line"></div><div class="line">npm <span class="keyword">install</span> <span class="comment">--save-dev script-loader</span></div></pre></td></tr></table></figure><h4 id="引入文件"><a href="#引入文件" class="headerlink" title="引入文件"></a>引入文件</h4><p>在项目中创建一个文件夹（比如vendor，一般是在src目录下创建）并放入Blob.js和Export2Excel.js</p><h4 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line">formatJson(filterVal, jsonData) &#123;</div><div class="line">  <span class="keyword">return</span> jsonData.map(<span class="function"><span class="params">v</span> =&gt;</span> filterVal.map(<span class="function"><span class="params">j</span> =&gt;</span> v[j]))</div><div class="line">&#125;,</div><div class="line">export2Excel() &#123;</div><div class="line">  <span class="keyword">this</span>.loading = <span class="literal">true</span></div><div class="line">  printAllTeacher(getUserid()).then(<span class="function"><span class="params">response</span> =&gt;</span> &#123;</div><div class="line">    <span class="keyword">this</span>.exportList = response.data</div><div class="line">    <span class="keyword">const</span> arr = []</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="keyword">this</span>.exportList.length; i++) &#123;</div><div class="line">      <span class="keyword">const</span> obj = &#123;&#125;</div><div class="line">      <span class="keyword">const</span> registerTime = <span class="keyword">this</span>.exportList[i].registerTime</div><div class="line">      <span class="keyword">const</span> instructionsTime = <span class="keyword">this</span>.exportList[i].instructionsTime</div><div class="line">      obj.customerName = <span class="keyword">this</span>.exportList[i].customerName</div><div class="line">      obj.teachersName = <span class="keyword">this</span>.exportList[i].teachersName</div><div class="line">      obj.teachersSex = <span class="keyword">this</span>.exportList[i].teachersSex</div><div class="line">      obj.teachersLevel = <span class="keyword">this</span>.exportList[i].teachersLevel</div><div class="line">      obj.teachersPhone = <span class="keyword">this</span>.exportList[i].teachersPhone</div><div class="line">      arr.push(obj)</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">require</span>.ensure([], () =&gt; &#123;</div><div class="line">      <span class="keyword">const</span> &#123; exportJsonToExcel &#125; = <span class="built_in">require</span>(<span class="string">'../vendor/Export2Excel'</span>)</div><div class="line">      <span class="keyword">const</span> tHeader = [<span class="string">'机构'</span>, <span class="string">'姓名'</span>, <span class="string">'性别'</span>, <span class="string">'级别'</span>, <span class="string">'电话'</span>]</div><div class="line">      <span class="keyword">const</span> filterVal = [<span class="string">'customerName'</span>, <span class="string">'teachersName'</span>, <span class="string">'teachersSex'</span>, <span class="string">'teachersLevel'</span>, <span class="string">'teachersPhone'</span>]</div><div class="line">      <span class="keyword">const</span> list = arr</div><div class="line">      <span class="keyword">const</span> data = <span class="keyword">this</span>.formatJson(filterVal, list)</div><div class="line">      exportJsonToExcel(tHeader, data, <span class="string">'客户师资'</span>)</div><div class="line">      <span class="keyword">this</span>.loading = <span class="literal">false</span></div><div class="line">    &#125;)</div><div class="line">  &#125;).catch(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">    <span class="keyword">this</span>.loading = <span class="literal">false</span></div><div class="line">  &#125;)</div><div class="line">&#125;</div></pre></td></tr></table></figure><h4 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">require</span>(<span class="string">'script-loader!file-saver'</span>); <span class="comment">//保存文件用</span></div><div class="line"><span class="built_in">require</span>(<span class="string">'script-loader!vendor/Blob'</span>); <span class="comment">//转二进制用</span></div><div class="line"><span class="built_in">require</span>(<span class="string">'script-loader!xlsx/dist/xlsx.core.min'</span>); <span class="comment">//xlsx核心</span></div></pre></td></tr></table></figure><p>由于这几个文件不支持import引入，所以我们需要<code>script-loader</code>来将他们挂载到全局环境下</p><p>另外还需要配置文件的alias</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</div><div class="line">  resolve: &#123;</div><div class="line">    alias: &#123;</div><div class="line">      vendor: resolve(<span class="string">'src/vendor'</span>)</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h4 id="文件"><a href="#文件" class="headerlink" title="文件"></a>文件</h4><h6 id="Blob-js"><a href="#Blob-js" class="headerlink" title="Blob.js"></a>Blob.js</h6><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div><div class="line">203</div><div class="line">204</div><div class="line">205</div><div class="line">206</div><div class="line">207</div><div class="line">208</div><div class="line">209</div><div class="line">210</div><div class="line">211</div><div class="line">212</div><div class="line">213</div><div class="line">214</div><div class="line">215</div><div class="line">216</div><div class="line">217</div><div class="line">218</div><div class="line">219</div><div class="line">220</div><div class="line">221</div><div class="line">222</div><div class="line">223</div><div class="line">224</div><div class="line">225</div><div class="line">226</div><div class="line">227</div><div class="line">228</div><div class="line">229</div><div class="line">230</div><div class="line">231</div><div class="line">232</div><div class="line">233</div><div class="line">234</div><div class="line">235</div><div class="line">236</div><div class="line">237</div><div class="line">238</div><div class="line">239</div><div class="line">240</div><div class="line">241</div><div class="line">242</div><div class="line">243</div><div class="line">244</div><div class="line">245</div><div class="line">246</div><div class="line">247</div><div class="line">248</div><div class="line">249</div><div class="line">250</div><div class="line">251</div><div class="line">252</div><div class="line">253</div><div class="line">254</div><div class="line">255</div><div class="line">256</div><div class="line">257</div><div class="line">258</div><div class="line">259</div><div class="line">260</div><div class="line">261</div><div class="line">262</div><div class="line">263</div><div class="line">264</div><div class="line">265</div><div class="line">266</div><div class="line">267</div><div class="line">268</div><div class="line">269</div><div class="line">270</div><div class="line">271</div><div class="line">272</div><div class="line">273</div><div class="line">274</div><div class="line">275</div><div class="line">276</div><div class="line">277</div><div class="line">278</div><div class="line">279</div><div class="line">280</div><div class="line">281</div><div class="line">282</div><div class="line">283</div><div class="line">284</div><div class="line">285</div><div class="line">286</div><div class="line">287</div><div class="line">288</div><div class="line">289</div><div class="line">290</div><div class="line">291</div><div class="line">292</div><div class="line">293</div><div class="line">294</div><div class="line">295</div><div class="line">296</div><div class="line">297</div><div class="line">298</div><div class="line">299</div><div class="line">300</div><div class="line">301</div><div class="line">302</div><div class="line">303</div><div class="line">304</div><div class="line">305</div><div class="line">306</div><div class="line">307</div><div class="line">308</div><div class="line">309</div><div class="line">310</div><div class="line">311</div><div class="line">312</div><div class="line">313</div><div class="line">314</div><div class="line">315</div><div class="line">316</div><div class="line">317</div><div class="line">318</div><div class="line">319</div><div class="line">320</div><div class="line">321</div><div class="line">322</div><div class="line">323</div><div class="line">324</div><div class="line">325</div><div class="line">326</div><div class="line">327</div><div class="line">328</div><div class="line">329</div><div class="line">330</div><div class="line">331</div><div class="line">332</div><div class="line">333</div><div class="line">334</div><div class="line">335</div><div class="line">336</div><div class="line">337</div><div class="line">338</div><div class="line">339</div><div class="line">340</div><div class="line">341</div><div class="line">342</div><div class="line">343</div><div class="line">344</div><div class="line">345</div><div class="line">346</div><div class="line">347</div><div class="line">348</div><div class="line">349</div><div class="line">350</div><div class="line">351</div><div class="line">352</div><div class="line">353</div><div class="line">354</div><div class="line">355</div><div class="line">356</div><div class="line">357</div><div class="line">358</div><div class="line">359</div><div class="line">360</div><div class="line">361</div><div class="line">362</div><div class="line">363</div><div class="line">364</div><div class="line">365</div><div class="line">366</div><div class="line">367</div><div class="line">368</div><div class="line">369</div><div class="line">370</div><div class="line">371</div><div class="line">372</div><div class="line">373</div><div class="line">374</div><div class="line">375</div><div class="line">376</div><div class="line">377</div><div class="line">378</div><div class="line">379</div><div class="line">380</div><div class="line">381</div><div class="line">382</div><div class="line">383</div><div class="line">384</div><div class="line">385</div><div class="line">386</div><div class="line">387</div><div class="line">388</div><div class="line">389</div><div class="line">390</div><div class="line">391</div><div class="line">392</div><div class="line">393</div><div class="line">394</div><div class="line">395</div><div class="line">396</div><div class="line">397</div><div class="line">398</div><div class="line">399</div><div class="line">400</div><div class="line">401</div><div class="line">402</div><div class="line">403</div><div class="line">404</div><div class="line">405</div><div class="line">406</div><div class="line">407</div><div class="line">408</div><div class="line">409</div><div class="line">410</div><div class="line">411</div><div class="line">412</div><div class="line">413</div><div class="line">414</div><div class="line">415</div><div class="line">416</div><div class="line">417</div><div class="line">418</div><div class="line">419</div><div class="line">420</div><div class="line">421</div><div class="line">422</div><div class="line">423</div><div class="line">424</div><div class="line">425</div><div class="line">426</div><div class="line">427</div><div class="line">428</div><div class="line">429</div><div class="line">430</div><div class="line">431</div><div class="line">432</div><div class="line">433</div><div class="line">434</div><div class="line">435</div><div class="line">436</div><div class="line">437</div><div class="line">438</div><div class="line">439</div><div class="line">440</div><div class="line">441</div><div class="line">442</div><div class="line">443</div><div class="line">444</div><div class="line">445</div><div class="line">446</div><div class="line">447</div><div class="line">448</div><div class="line">449</div><div class="line">450</div><div class="line">451</div><div class="line">452</div><div class="line">453</div><div class="line">454</div><div class="line">455</div><div class="line">456</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/* Blob.js</span></div><div class="line"><span class="comment"> * A Blob, File, FileReader &amp; URL implementation.</span></div><div class="line"><span class="comment"> * 2018-08-09</span></div><div class="line"><span class="comment"> *</span></div><div class="line"><span class="comment"> * By Eli Grey, http://eligrey.com</span></div><div class="line"><span class="comment"> * By Jimmy Wärting, https://github.com/jimmywarting</span></div><div class="line"><span class="comment"> * License: MIT</span></div><div class="line"><span class="comment"> *   See https://github.com/eligrey/Blob.js/blob/master/LICENSE.md</span></div><div class="line"><span class="comment"> */</span></div><div class="line"></div><div class="line">;(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line"></div><div class="line">  <span class="keyword">var</span> global = <span class="keyword">typeof</span> <span class="built_in">window</span> === <span class="string">'object'</span></div><div class="line">      ? <span class="built_in">window</span> : <span class="keyword">typeof</span> self === <span class="string">'object'</span></div><div class="line">      ? self : <span class="keyword">this</span></div><div class="line"></div><div class="line">  <span class="keyword">var</span> BlobBuilder = global.BlobBuilder</div><div class="line">    || global.WebKitBlobBuilder</div><div class="line">    || global.MSBlobBuilder</div><div class="line">    || global.MozBlobBuilder;</div><div class="line"></div><div class="line">  global.URL = global.URL || global.webkitURL || <span class="function"><span class="keyword">function</span>(<span class="params">href, a</span>) </span>&#123;</div><div class="line">  a = <span class="built_in">document</span>.createElement(<span class="string">'a'</span>)</div><div class="line">  a.href = href</div><div class="line">  <span class="keyword">return</span> a</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="keyword">var</span> origBlob = global.Blob</div><div class="line">  <span class="keyword">var</span> createObjectURL = URL.createObjectURL</div><div class="line">  <span class="keyword">var</span> revokeObjectURL = URL.revokeObjectURL</div><div class="line">  <span class="keyword">var</span> strTag = global.Symbol &amp;&amp; global.Symbol.toStringTag</div><div class="line">  <span class="keyword">var</span> blobSupported = <span class="literal">false</span></div><div class="line">  <span class="keyword">var</span> blobSupportsArrayBufferView = <span class="literal">false</span></div><div class="line">  <span class="keyword">var</span> arrayBufferSupported = !!global.ArrayBuffer</div><div class="line">  <span class="keyword">var</span> blobBuilderSupported = BlobBuilder</div><div class="line">    &amp;&amp; BlobBuilder.prototype.append</div><div class="line">    &amp;&amp; BlobBuilder.prototype.getBlob;</div><div class="line"></div><div class="line">  <span class="keyword">try</span> &#123;</div><div class="line">    <span class="comment">// Check if Blob constructor is supported</span></div><div class="line">    blobSupported = <span class="keyword">new</span> Blob([<span class="string">'ä'</span>]).size === <span class="number">2</span></div><div class="line"></div><div class="line">    <span class="comment">// Check if Blob constructor supports ArrayBufferViews</span></div><div class="line">    <span class="comment">// Fails in Safari 6, so we need to map to ArrayBuffers there.</span></div><div class="line">    blobSupportsArrayBufferView = <span class="keyword">new</span> Blob([<span class="keyword">new</span> <span class="built_in">Uint8Array</span>([<span class="number">1</span>,<span class="number">2</span>])]).size === <span class="number">2</span></div><div class="line">  &#125; <span class="keyword">catch</span>(e) &#123;&#125;</div><div class="line"></div><div class="line">  <span class="comment">/**</span></div><div class="line"><span class="comment">   * Helper function that maps ArrayBufferViews to ArrayBuffers</span></div><div class="line"><span class="comment">   * Used by BlobBuilder constructor and old browsers that didn't</span></div><div class="line"><span class="comment">   * support it in the Blob constructor.</span></div><div class="line"><span class="comment">   */</span></div><div class="line">  <span class="function"><span class="keyword">function</span> <span class="title">mapArrayBufferViews</span>(<span class="params">ary</span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> ary.map(<span class="function"><span class="keyword">function</span>(<span class="params">chunk</span>) </span>&#123;</div><div class="line">      <span class="keyword">if</span> (chunk.buffer <span class="keyword">instanceof</span> <span class="built_in">ArrayBuffer</span>) &#123;</div><div class="line">        <span class="keyword">var</span> buf = chunk.buffer;</div><div class="line"></div><div class="line">        <span class="comment">// if this is a subarray, make a copy so we only</span></div><div class="line">        <span class="comment">// include the subarray region from the underlying buffer</span></div><div class="line">        <span class="keyword">if</span> (chunk.byteLength !== buf.byteLength) &#123;</div><div class="line">          <span class="keyword">var</span> copy = <span class="keyword">new</span> <span class="built_in">Uint8Array</span>(chunk.byteLength);</div><div class="line">          copy.set(<span class="keyword">new</span> <span class="built_in">Uint8Array</span>(buf, chunk.byteOffset, chunk.byteLength));</div><div class="line">          buf = copy.buffer;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">return</span> buf;</div><div class="line">      &#125;</div><div class="line"></div><div class="line">      <span class="keyword">return</span> chunk;</div><div class="line">    &#125;);</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">function</span> <span class="title">BlobBuilderConstructor</span>(<span class="params">ary, options</span>) </span>&#123;</div><div class="line">    options = options || &#123;&#125;;</div><div class="line"></div><div class="line">    <span class="keyword">var</span> bb = <span class="keyword">new</span> BlobBuilder();</div><div class="line">    mapArrayBufferViews(ary).forEach(<span class="function"><span class="keyword">function</span>(<span class="params">part</span>) </span>&#123;</div><div class="line">      bb.append(part);</div><div class="line">    &#125;);</div><div class="line"></div><div class="line">    <span class="keyword">return</span> options.type ? bb.getBlob(options.type) : bb.getBlob();</div><div class="line">  &#125;;</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">function</span> <span class="title">BlobConstructor</span>(<span class="params">ary, options</span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">new</span> origBlob(mapArrayBufferViews(ary), options || &#123;&#125;);</div><div class="line">  &#125;;</div><div class="line"></div><div class="line">  <span class="keyword">if</span> (global.Blob) &#123;</div><div class="line">    BlobBuilderConstructor.prototype = Blob.prototype;</div><div class="line">    BlobConstructor.prototype = Blob.prototype;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">function</span> <span class="title">FakeBlobBuilder</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">toUTF8Array</span>(<span class="params">str</span>) </span>&#123;</div><div class="line">      <span class="keyword">var</span> utf8 = [];</div><div class="line">      <span class="keyword">for</span> (<span class="keyword">var</span> i=<span class="number">0</span>; i &lt; str.length; i++) &#123;</div><div class="line">        <span class="keyword">var</span> charcode = str.charCodeAt(i);</div><div class="line">        <span class="keyword">if</span> (charcode &lt; <span class="number">0x80</span>) utf8.push(charcode);</div><div class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (charcode &lt; <span class="number">0x800</span>) &#123;</div><div class="line">          utf8.push(<span class="number">0xc0</span> | (charcode &gt;&gt; <span class="number">6</span>), </div><div class="line">          <span class="number">0x80</span> | (charcode &amp; <span class="number">0x3f</span>));</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (charcode &lt; <span class="number">0xd800</span> || charcode &gt;= <span class="number">0xe000</span>) &#123;</div><div class="line">          utf8.push(<span class="number">0xe0</span> | (charcode &gt;&gt; <span class="number">12</span>), </div><div class="line">          <span class="number">0x80</span> | ((charcode&gt;&gt;<span class="number">6</span>) &amp; <span class="number">0x3f</span>), </div><div class="line">          <span class="number">0x80</span> | (charcode &amp; <span class="number">0x3f</span>));</div><div class="line">        &#125;</div><div class="line">        <span class="comment">// surrogate pair</span></div><div class="line">        <span class="keyword">else</span> &#123;</div><div class="line">          i++;</div><div class="line">          <span class="comment">// UTF-16 encodes 0x10000-0x10FFFF by</span></div><div class="line">          <span class="comment">// subtracting 0x10000 and splitting the</span></div><div class="line">          <span class="comment">// 20 bits of 0x0-0xFFFFF into two halves</span></div><div class="line">          charcode = <span class="number">0x10000</span> + (((charcode &amp; <span class="number">0x3ff</span>)&lt;&lt;<span class="number">10</span>)</div><div class="line">          | (str.charCodeAt(i) &amp; <span class="number">0x3ff</span>));</div><div class="line">          utf8.push(<span class="number">0xf0</span> | (charcode &gt;&gt;<span class="number">18</span>), </div><div class="line">          <span class="number">0x80</span> | ((charcode&gt;&gt;<span class="number">12</span>) &amp; <span class="number">0x3f</span>), </div><div class="line">          <span class="number">0x80</span> | ((charcode&gt;&gt;<span class="number">6</span>) &amp; <span class="number">0x3f</span>), </div><div class="line">          <span class="number">0x80</span> | (charcode &amp; <span class="number">0x3f</span>));</div><div class="line">        &#125;</div><div class="line">      &#125;</div><div class="line">      <span class="keyword">return</span> utf8;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">fromUtf8Array</span>(<span class="params">array</span>) </span>&#123;</div><div class="line">      <span class="keyword">var</span> out, i, len, c;</div><div class="line">      <span class="keyword">var</span> char2, char3;</div><div class="line">      </div><div class="line">      out = <span class="string">""</span>;</div><div class="line">      len = array.length;</div><div class="line">      i = <span class="number">0</span>;</div><div class="line">      <span class="keyword">while</span> (i &lt; len) &#123;</div><div class="line">        c = array[i++];</div><div class="line">        <span class="keyword">switch</span> (c &gt;&gt; <span class="number">4</span>)</div><div class="line">        &#123; </div><div class="line">          <span class="keyword">case</span> <span class="number">0</span>: <span class="keyword">case</span> <span class="number">1</span>: <span class="keyword">case</span> <span class="number">2</span>: <span class="keyword">case</span> <span class="number">3</span>: <span class="keyword">case</span> <span class="number">4</span>: <span class="keyword">case</span> <span class="number">5</span>: <span class="keyword">case</span> <span class="number">6</span>: <span class="keyword">case</span> <span class="number">7</span>:</div><div class="line">          <span class="comment">// 0xxxxxxx</span></div><div class="line">          out += <span class="built_in">String</span>.fromCharCode(c);</div><div class="line">          <span class="keyword">break</span>;</div><div class="line">          <span class="keyword">case</span> <span class="number">12</span>: <span class="keyword">case</span> <span class="number">13</span>:</div><div class="line">          <span class="comment">// 110x xxxx   10xx xxxx</span></div><div class="line">          char2 = array[i++];</div><div class="line">          out += <span class="built_in">String</span>.fromCharCode(((c &amp; <span class="number">0x1F</span>) &lt;&lt; <span class="number">6</span>) | (char2 &amp; <span class="number">0x3F</span>));</div><div class="line">          <span class="keyword">break</span>;</div><div class="line">          <span class="keyword">case</span> <span class="number">14</span>:</div><div class="line">          <span class="comment">// 1110 xxxx  10xx xxxx  10xx xxxx</span></div><div class="line">          char2 = array[i++];</div><div class="line">          char3 = array[i++];</div><div class="line">          out += <span class="built_in">String</span>.fromCharCode(((c &amp; <span class="number">0x0F</span>) &lt;&lt; <span class="number">12</span>) |</div><div class="line">          ((char2 &amp; <span class="number">0x3F</span>) &lt;&lt; <span class="number">6</span>) |</div><div class="line">          ((char3 &amp; <span class="number">0x3F</span>) &lt;&lt; <span class="number">0</span>));</div><div class="line">          <span class="keyword">break</span>;</div><div class="line">        &#125;</div><div class="line">      &#125;    </div><div class="line">      <span class="keyword">return</span> out;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">isDataView</span>(<span class="params">obj</span>) </span>&#123;</div><div class="line">      <span class="keyword">return</span> obj &amp;&amp; <span class="built_in">DataView</span>.prototype.isPrototypeOf(obj)</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">bufferClone</span>(<span class="params">buf</span>) </span>&#123;</div><div class="line">      <span class="keyword">var</span> view = <span class="keyword">new</span> <span class="built_in">Array</span>(buf.byteLength)</div><div class="line">      <span class="keyword">var</span> array = <span class="keyword">new</span> <span class="built_in">Uint8Array</span>(buf)</div><div class="line">      <span class="keyword">var</span> i = view.length</div><div class="line">      <span class="keyword">while</span>(i--) &#123;</div><div class="line">        view[i] = array[i]</div><div class="line">      &#125;</div><div class="line">      <span class="keyword">return</span> view</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">encodeByteArray</span>(<span class="params">input</span>) </span>&#123;</div><div class="line">      <span class="keyword">var</span> byteToCharMap = <span class="string">'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789'</span></div><div class="line"></div><div class="line">      <span class="keyword">var</span> output = [];</div><div class="line"></div><div class="line">      <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; input.length; i += <span class="number">3</span>) &#123;</div><div class="line">        <span class="keyword">var</span> byte1 = input[i];</div><div class="line">        <span class="keyword">var</span> haveByte2 = i + <span class="number">1</span> &lt; input.length;</div><div class="line">        <span class="keyword">var</span> byte2 = haveByte2 ? input[i + <span class="number">1</span>] : <span class="number">0</span>;</div><div class="line">        <span class="keyword">var</span> haveByte3 = i + <span class="number">2</span> &lt; input.length;</div><div class="line">        <span class="keyword">var</span> byte3 = haveByte3 ? input[i + <span class="number">2</span>] : <span class="number">0</span>;</div><div class="line"></div><div class="line">        <span class="keyword">var</span> outByte1 = byte1 &gt;&gt; <span class="number">2</span>;</div><div class="line">        <span class="keyword">var</span> outByte2 = ((byte1 &amp; <span class="number">0x03</span>) &lt;&lt; <span class="number">4</span>) | (byte2 &gt;&gt; <span class="number">4</span>);</div><div class="line">        <span class="keyword">var</span> outByte3 = ((byte2 &amp; <span class="number">0x0F</span>) &lt;&lt; <span class="number">2</span>) | (byte3 &gt;&gt; <span class="number">6</span>);</div><div class="line">        <span class="keyword">var</span> outByte4 = byte3 &amp; <span class="number">0x3F</span>;</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (!haveByte3) &#123;</div><div class="line">          outByte4 = <span class="number">64</span>;</div><div class="line"></div><div class="line">          <span class="keyword">if</span> (!haveByte2) &#123;</div><div class="line">            outByte3 = <span class="number">64</span>;</div><div class="line">          &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        output.push(</div><div class="line">            byteToCharMap[outByte1], byteToCharMap[outByte2],</div><div class="line">            byteToCharMap[outByte3], byteToCharMap[outByte4])</div><div class="line">      &#125;</div><div class="line"></div><div class="line">      <span class="keyword">return</span> output.join(<span class="string">''</span>)</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">var</span> create = <span class="built_in">Object</span>.create || <span class="function"><span class="keyword">function</span> (<span class="params">a</span>) </span>&#123;</div><div class="line">      <span class="function"><span class="keyword">function</span> <span class="title">c</span>(<span class="params"></span>) </span>&#123;&#125;</div><div class="line">      c.prototype = a;</div><div class="line">      <span class="keyword">return</span> <span class="keyword">new</span> c</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="keyword">if</span> (arrayBufferSupported) &#123;</div><div class="line">      <span class="keyword">var</span> viewClasses = [</div><div class="line">        <span class="string">'[object Int8Array]'</span>,</div><div class="line">        <span class="string">'[object Uint8Array]'</span>,</div><div class="line">        <span class="string">'[object Uint8ClampedArray]'</span>,</div><div class="line">        <span class="string">'[object Int16Array]'</span>,</div><div class="line">        <span class="string">'[object Uint16Array]'</span>,</div><div class="line">        <span class="string">'[object Int32Array]'</span>,</div><div class="line">        <span class="string">'[object Uint32Array]'</span>,</div><div class="line">        <span class="string">'[object Float32Array]'</span>,</div><div class="line">        <span class="string">'[object Float64Array]'</span></div><div class="line">      ]</div><div class="line"></div><div class="line">      <span class="keyword">var</span> isArrayBufferView = <span class="built_in">ArrayBuffer</span>.isView || <span class="function"><span class="keyword">function</span>(<span class="params">obj</span>) </span>&#123;</div><div class="line">        <span class="keyword">return</span> obj &amp;&amp; viewClasses.indexOf(<span class="built_in">Object</span>.prototype.toString.call(obj)) &gt; <span class="number">-1</span></div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    </div><div class="line">    </div><div class="line">    <span class="comment">/********************************************************/</span></div><div class="line">    <span class="comment">/*                   Blob constructor                   */</span></div><div class="line">    <span class="comment">/********************************************************/</span></div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">Blob</span>(<span class="params">chunks, opts</span>) </span>&#123;</div><div class="line">      chunks = chunks || []</div><div class="line">      <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>, len = chunks.length; i &lt; len; i++) &#123;</div><div class="line">        <span class="keyword">var</span> chunk = chunks[i]</div><div class="line">        <span class="keyword">if</span> (chunk <span class="keyword">instanceof</span> Blob) &#123;</div><div class="line">          chunks[i] = chunk._buffer</div><div class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">typeof</span> chunk === <span class="string">'string'</span>) &#123;</div><div class="line">          chunks[i] = toUTF8Array(chunk)</div><div class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (arrayBufferSupported &amp;&amp; (<span class="built_in">ArrayBuffer</span>.prototype.isPrototypeOf(chunk) || isArrayBufferView(chunk))) &#123;</div><div class="line">          chunks[i] = bufferClone(chunk)</div><div class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (arrayBufferSupported &amp;&amp; isDataView(chunk)) &#123;</div><div class="line">          chunks[i] = bufferClone(chunk.buffer)</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">          chunks[i] = toUTF8Array(<span class="built_in">String</span>(chunk))</div><div class="line">        &#125;</div><div class="line">      &#125;</div><div class="line"></div><div class="line">      <span class="keyword">this</span>._buffer = [].concat.apply([], chunks)</div><div class="line">      <span class="keyword">this</span>.size = <span class="keyword">this</span>._buffer.length</div><div class="line">      <span class="keyword">this</span>.type = opts ? opts.type || <span class="string">''</span> : <span class="string">''</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    Blob.prototype.slice = <span class="function"><span class="keyword">function</span>(<span class="params">start, end, type</span>) </span>&#123;</div><div class="line">      <span class="keyword">var</span> slice = <span class="keyword">this</span>._buffer.slice(start || <span class="number">0</span>, end || <span class="keyword">this</span>._buffer.length)</div><div class="line">      <span class="keyword">return</span> <span class="keyword">new</span> Blob([slice], &#123;<span class="attr">type</span>: type&#125;)</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    Blob.prototype.toString = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">      <span class="keyword">return</span> <span class="string">'[object Blob]'</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    </div><div class="line"></div><div class="line">    <span class="comment">/********************************************************/</span></div><div class="line">    <span class="comment">/*                   File constructor                   */</span></div><div class="line">    <span class="comment">/********************************************************/</span></div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">File</span>(<span class="params">chunks, name, opts</span>) </span>&#123;</div><div class="line">      opts = opts || &#123;&#125;</div><div class="line">      <span class="keyword">var</span> a = Blob.call(<span class="keyword">this</span>, chunks, opts) || <span class="keyword">this</span></div><div class="line">      a.name = name</div><div class="line">      a.lastModifiedDate = opts.lastModified ? <span class="keyword">new</span> <span class="built_in">Date</span>(opts.lastModified) : <span class="keyword">new</span> <span class="built_in">Date</span></div><div class="line">      a.lastModified = +a.lastModifiedDate</div><div class="line">      </div><div class="line">      <span class="keyword">return</span> a</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    File.prototype = create(Blob.prototype);</div><div class="line">    File.prototype.constructor = File;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (<span class="built_in">Object</span>.setPrototypeOf) </div><div class="line">      <span class="built_in">Object</span>.setPrototypeOf(File, Blob);</div><div class="line">    <span class="keyword">else</span> &#123;</div><div class="line">      <span class="keyword">try</span> &#123;File.__proto__ = Blob&#125; <span class="keyword">catch</span> (e) &#123;&#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    File.prototype.toString = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">      <span class="keyword">return</span> <span class="string">'[object File]'</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    </div><div class="line">    <span class="comment">/********************************************************/</span></div><div class="line">    <span class="comment">/*                FileReader constructor                */</span></div><div class="line">    <span class="comment">/********************************************************/</span></div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">FileReader</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">if</span> (!(<span class="keyword">this</span> <span class="keyword">instanceof</span> FileReader))</div><div class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">TypeError</span>(<span class="string">"Failed to construct 'FileReader': Please use the 'new' operator, this DOM object constructor cannot be called as a function."</span>)</div><div class="line"></div><div class="line">    <span class="keyword">var</span> delegate = <span class="built_in">document</span>.createDocumentFragment()</div><div class="line">    <span class="keyword">this</span>.addEventListener = delegate.addEventListener</div><div class="line">    <span class="keyword">this</span>.dispatchEvent = <span class="function"><span class="keyword">function</span>(<span class="params">evt</span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> local = <span class="keyword">this</span>[<span class="string">'on'</span> + evt.type]</div><div class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> local === <span class="string">'function'</span>) local(evt)</div><div class="line">    delegate.dispatchEvent(evt)</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">this</span>.removeEventListener = delegate.removeEventListener</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">_read</span>(<span class="params">fr, blob, kind</span>) </span>&#123;</div><div class="line">    <span class="keyword">if</span> (!(blob <span class="keyword">instanceof</span> Blob))</div><div class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">TypeError</span>(<span class="string">"Failed to execute '"</span> + kind + <span class="string">"' on 'FileReader': parameter 1 is not of type 'Blob'."</span>)</div><div class="line">    </div><div class="line">    fr.result = <span class="string">''</span></div><div class="line"></div><div class="line">    setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">this</span>.readyState = FileReader.LOADING</div><div class="line">    fr.dispatchEvent(<span class="keyword">new</span> Event(<span class="string">'load'</span>))</div><div class="line">    fr.dispatchEvent(<span class="keyword">new</span> Event(<span class="string">'loadend'</span>))</div><div class="line">    &#125;)</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    FileReader.EMPTY = <span class="number">0</span></div><div class="line">    FileReader.LOADING = <span class="number">1</span></div><div class="line">    FileReader.DONE = <span class="number">2</span></div><div class="line">    FileReader.prototype.error = <span class="literal">null</span></div><div class="line">    FileReader.prototype.onabort = <span class="literal">null</span></div><div class="line">    FileReader.prototype.onerror = <span class="literal">null</span></div><div class="line">    FileReader.prototype.onload = <span class="literal">null</span></div><div class="line">    FileReader.prototype.onloadend = <span class="literal">null</span></div><div class="line">    FileReader.prototype.onloadstart = <span class="literal">null</span></div><div class="line">    FileReader.prototype.onprogress = <span class="literal">null</span></div><div class="line"></div><div class="line">    FileReader.prototype.readAsDataURL = <span class="function"><span class="keyword">function</span>(<span class="params">blob</span>) </span>&#123;</div><div class="line">    _read(<span class="keyword">this</span>, blob, <span class="string">'readAsDataURL'</span>)</div><div class="line">    <span class="keyword">this</span>.result = <span class="string">'data:'</span> + blob.type + <span class="string">';base64,'</span> + encodeByteArray(blob._buffer)</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    FileReader.prototype.readAsText = <span class="function"><span class="keyword">function</span>(<span class="params">blob</span>) </span>&#123;</div><div class="line">    _read(<span class="keyword">this</span>, blob, <span class="string">'readAsText'</span>)</div><div class="line">    <span class="keyword">this</span>.result = fromUtf8Array(blob._buffer)</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    FileReader.prototype.readAsArrayBuffer = <span class="function"><span class="keyword">function</span>(<span class="params">blob</span>) </span>&#123;</div><div class="line">    _read(<span class="keyword">this</span>, blob, <span class="string">'readAsText'</span>)</div><div class="line">    <span class="keyword">this</span>.result = blob._buffer.slice()</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    FileReader.prototype.abort = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;</div><div class="line"></div><div class="line">    </div><div class="line">    <span class="comment">/********************************************************/</span></div><div class="line">    <span class="comment">/*                         URL                          */</span></div><div class="line">    <span class="comment">/********************************************************/</span></div><div class="line">    URL.createObjectURL = <span class="function"><span class="keyword">function</span>(<span class="params">blob</span>) </span>&#123;</div><div class="line">      <span class="keyword">return</span> blob <span class="keyword">instanceof</span> Blob </div><div class="line">        ? <span class="string">'data:'</span> + blob.type + <span class="string">';base64,'</span> + encodeByteArray(blob._buffer)</div><div class="line">        : createObjectURL.call(URL, blob)</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    URL.revokeObjectURL = <span class="function"><span class="keyword">function</span>(<span class="params">url</span>) </span>&#123;</div><div class="line">      revokeObjectURL &amp;&amp; revokeObjectURL.call(URL, url)</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/********************************************************/</span></div><div class="line">    <span class="comment">/*                         XHR                          */</span></div><div class="line">    <span class="comment">/********************************************************/</span></div><div class="line">    <span class="keyword">var</span> _send = global.XMLHttpRequest &amp;&amp; global.XMLHttpRequest.prototype.send</div><div class="line">    <span class="keyword">if</span> (_send) &#123;</div><div class="line">      XMLHttpRequest.prototype.send = <span class="function"><span class="keyword">function</span>(<span class="params">data</span>) </span>&#123;</div><div class="line">        <span class="keyword">if</span> (data <span class="keyword">instanceof</span> Blob) &#123;</div><div class="line">          <span class="keyword">this</span>.setRequestHeader(<span class="string">'Content-Type'</span>, data.type)</div><div class="line">          _send.call(<span class="keyword">this</span>, fromUtf8Array(data._buffer))</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">          _send.call(<span class="keyword">this</span>, data)</div><div class="line">        &#125;</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    global.FileReader = FileReader</div><div class="line">    global.File = File</div><div class="line">    global.Blob = Blob</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="keyword">if</span> (strTag) &#123;</div><div class="line">    File.prototype[strTag] = <span class="string">'File'</span></div><div class="line">    Blob.prototype[strTag] = <span class="string">'Blob'</span></div><div class="line">    FileReader.prototype[strTag] = <span class="string">'FileReader'</span></div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">function</span> <span class="title">fixFileAndXHR</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> isIE = !!global.ActiveXObject || (</div><div class="line">      <span class="string">'-ms-scroll-limit'</span> <span class="keyword">in</span> <span class="built_in">document</span>.documentElement.style &amp;&amp; </div><div class="line">      <span class="string">'-ms-ime-align'</span> <span class="keyword">in</span> <span class="built_in">document</span>.documentElement.style</div><div class="line">    )</div><div class="line"></div><div class="line">    <span class="comment">// Monkey patched </span></div><div class="line">    <span class="comment">// IE don't set Content-Type header on XHR whose body is a typed Blob</span></div><div class="line">    <span class="comment">// https://developer.microsoft.com/en-us/microsoft-edge/platform/issues/6047383</span></div><div class="line">    <span class="keyword">var</span> _send = global.XMLHttpRequest &amp;&amp; global.XMLHttpRequest.prototype.send</div><div class="line">    <span class="keyword">if</span> (isIE &amp;&amp; _send) &#123;</div><div class="line">      XMLHttpRequest.prototype.send = <span class="function"><span class="keyword">function</span>(<span class="params">data</span>) </span>&#123;</div><div class="line">        <span class="keyword">if</span> (data <span class="keyword">instanceof</span> Blob) &#123;</div><div class="line">          <span class="keyword">this</span>.setRequestHeader(<span class="string">'Content-Type'</span>, data.type)</div><div class="line">          _send.call(<span class="keyword">this</span>, data)</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">          _send.call(<span class="keyword">this</span>, data)</div><div class="line">        &#125;</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">try</span> &#123;</div><div class="line">      <span class="keyword">new</span> File([], <span class="string">''</span>)</div><div class="line">    &#125; <span class="keyword">catch</span>(e) &#123;</div><div class="line">      <span class="keyword">try</span> &#123;</div><div class="line">        <span class="keyword">var</span> klass = <span class="keyword">new</span> <span class="built_in">Function</span>(<span class="string">'class File extends Blob &#123;'</span> + </div><div class="line">          <span class="string">'constructor(chunks, name, opts) &#123;'</span> +</div><div class="line">            <span class="string">'opts = opts || &#123;&#125;;'</span> +</div><div class="line">            <span class="string">'super(chunks, opts || &#123;&#125;);'</span> +</div><div class="line">            <span class="string">'this.name = name;'</span> +</div><div class="line">            <span class="string">'this.lastModifiedDate = opts.lastModified ? new Date(opts.lastModified) : new Date;'</span> +</div><div class="line">            <span class="string">'this.lastModified = +this.lastModifiedDate;'</span> +</div><div class="line">          <span class="string">'&#125;&#125;;'</span> +</div><div class="line">          <span class="string">'return new File([], ""), File'</span></div><div class="line">        )()</div><div class="line">        global.File = klass</div><div class="line">      &#125; <span class="keyword">catch</span>(e) &#123;</div><div class="line">        <span class="keyword">var</span> klass = <span class="function"><span class="keyword">function</span>(<span class="params">b, d, c</span>) </span>&#123;</div><div class="line">          <span class="keyword">var</span> blob = <span class="keyword">new</span> Blob(b, c)</div><div class="line">          <span class="keyword">var</span> t = c &amp;&amp; <span class="keyword">void</span> <span class="number">0</span> !== c.lastModified ? <span class="keyword">new</span> <span class="built_in">Date</span>(c.lastModified) : <span class="keyword">new</span> <span class="built_in">Date</span></div><div class="line">          </div><div class="line">          blob.name = d</div><div class="line">          blob.lastModifiedDate = t</div><div class="line">          blob.lastModified = +t</div><div class="line">          blob.toString = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">            <span class="keyword">return</span> <span class="string">'[object File]'</span></div><div class="line">          &#125;</div><div class="line">          </div><div class="line">          <span class="keyword">if</span> (strTag)</div><div class="line">            blob[strTag] = <span class="string">'File'</span></div><div class="line">          </div><div class="line">          <span class="keyword">return</span> blob</div><div class="line">        &#125;</div><div class="line">        global.File = klass</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="keyword">if</span> (blobSupported) &#123;</div><div class="line">    fixFileAndXHR()</div><div class="line">    global.Blob = blobSupportsArrayBufferView ? global.Blob : BlobConstructor</div><div class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (blobBuilderSupported) &#123;</div><div class="line">    fixFileAndXHR()</div><div class="line">    global.Blob = BlobBuilderConstructor;</div><div class="line">  &#125; <span class="keyword">else</span> &#123;</div><div class="line">    FakeBlobBuilder()</div><div class="line">  &#125;</div><div class="line"></div><div class="line">&#125;)();</div></pre></td></tr></table></figure><h6 id="export2Excel-js"><a href="#export2Excel-js" class="headerlink" title="export2Excel.js"></a>export2Excel.js</h6><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/* eslint-disable */</span></div><div class="line"><span class="built_in">require</span>(<span class="string">'script-loader!file-saver'</span>);</div><div class="line"><span class="built_in">require</span>(<span class="string">'script-loader!vendor/Blob'</span>);</div><div class="line"><span class="built_in">require</span>(<span class="string">'script-loader!xlsx/dist/xlsx.core.min'</span>);</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">generateArray</span>(<span class="params">table</span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> out = [];</div><div class="line">    <span class="keyword">var</span> rows = table.querySelectorAll(<span class="string">'tr'</span>);</div><div class="line">    <span class="keyword">var</span> ranges = [];</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> R = <span class="number">0</span>; R &lt; rows.length; ++R) &#123;</div><div class="line">        <span class="keyword">var</span> outRow = [];</div><div class="line">        <span class="keyword">var</span> row = rows[R];</div><div class="line">        <span class="keyword">var</span> columns = row.querySelectorAll(<span class="string">'td'</span>);</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> C = <span class="number">0</span>; C &lt; columns.length; ++C) &#123;</div><div class="line">            <span class="keyword">var</span> cell = columns[C];</div><div class="line">            <span class="keyword">var</span> colspan = cell.getAttribute(<span class="string">'colspan'</span>);</div><div class="line">            <span class="keyword">var</span> rowspan = cell.getAttribute(<span class="string">'rowspan'</span>);</div><div class="line">            <span class="keyword">var</span> cellValue = cell.innerText;</div><div class="line">            <span class="keyword">if</span> (cellValue !== <span class="string">""</span> &amp;&amp; cellValue == +cellValue) cellValue = +cellValue;</div><div class="line"></div><div class="line">            <span class="comment">//Skip ranges</span></div><div class="line">            ranges.forEach(<span class="function"><span class="keyword">function</span> (<span class="params">range</span>) </span>&#123;</div><div class="line">                <span class="keyword">if</span> (R &gt;= range.s.r &amp;&amp; R &lt;= range.e.r &amp;&amp; outRow.length &gt;= range.s.c &amp;&amp; outRow.length &lt;= range.e.c) &#123;</div><div class="line">                    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt;= range.e.c - range.s.c; ++i) outRow.push(<span class="literal">null</span>);</div><div class="line">                &#125;</div><div class="line">            &#125;);</div><div class="line"></div><div class="line">            <span class="comment">//Handle Row Span</span></div><div class="line">            <span class="keyword">if</span> (rowspan || colspan) &#123;</div><div class="line">                rowspan = rowspan || <span class="number">1</span>;</div><div class="line">                colspan = colspan || <span class="number">1</span>;</div><div class="line">                ranges.push(&#123;<span class="attr">s</span>: &#123;<span class="attr">r</span>: R, <span class="attr">c</span>: outRow.length&#125;, <span class="attr">e</span>: &#123;<span class="attr">r</span>: R + rowspan - <span class="number">1</span>, <span class="attr">c</span>: outRow.length + colspan - <span class="number">1</span>&#125;&#125;);</div><div class="line">            &#125;</div><div class="line">            ;</div><div class="line"></div><div class="line">            <span class="comment">//Handle Value</span></div><div class="line">            outRow.push(cellValue !== <span class="string">""</span> ? cellValue : <span class="literal">null</span>);</div><div class="line"></div><div class="line">            <span class="comment">//Handle Colspan</span></div><div class="line">            <span class="keyword">if</span> (colspan) <span class="keyword">for</span> (<span class="keyword">var</span> k = <span class="number">0</span>; k &lt; colspan - <span class="number">1</span>; ++k) outRow.push(<span class="literal">null</span>);</div><div class="line">        &#125;</div><div class="line">        out.push(outRow);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> [out, ranges];</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">datenum</span>(<span class="params">v, date1904</span>) </span>&#123;</div><div class="line">    <span class="keyword">if</span> (date1904) v += <span class="number">1462</span>;</div><div class="line">    <span class="keyword">var</span> epoch = <span class="built_in">Date</span>.parse(v);</div><div class="line">    <span class="keyword">return</span> (epoch - <span class="keyword">new</span> <span class="built_in">Date</span>(<span class="built_in">Date</span>.UTC(<span class="number">1899</span>, <span class="number">11</span>, <span class="number">30</span>))) / (<span class="number">24</span> * <span class="number">60</span> * <span class="number">60</span> * <span class="number">1000</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">sheet_from_array_of_arrays</span>(<span class="params">data, opts</span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> ws = &#123;&#125;;</div><div class="line">    <span class="keyword">var</span> range = &#123;<span class="attr">s</span>: &#123;<span class="attr">c</span>: <span class="number">10000000</span>, <span class="attr">r</span>: <span class="number">10000000</span>&#125;, <span class="attr">e</span>: &#123;<span class="attr">c</span>: <span class="number">0</span>, <span class="attr">r</span>: <span class="number">0</span>&#125;&#125;;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> R = <span class="number">0</span>; R != data.length; ++R) &#123;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> C = <span class="number">0</span>; C != data[R].length; ++C) &#123;</div><div class="line">            <span class="keyword">if</span> (range.s.r &gt; R) range.s.r = R;</div><div class="line">            <span class="keyword">if</span> (range.s.c &gt; C) range.s.c = C;</div><div class="line">            <span class="keyword">if</span> (range.e.r &lt; R) range.e.r = R;</div><div class="line">            <span class="keyword">if</span> (range.e.c &lt; C) range.e.c = C;</div><div class="line">            <span class="keyword">var</span> cell = &#123;<span class="attr">v</span>: data[R][C]&#125;;</div><div class="line">            <span class="keyword">if</span> (cell.v == <span class="literal">null</span>) <span class="keyword">continue</span>;</div><div class="line">            <span class="keyword">var</span> cell_ref = XLSX.utils.encode_cell(&#123;<span class="attr">c</span>: C, <span class="attr">r</span>: R&#125;);</div><div class="line"></div><div class="line">            <span class="keyword">if</span> (<span class="keyword">typeof</span> cell.v === <span class="string">'number'</span>) cell.t = <span class="string">'n'</span>;</div><div class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">typeof</span> cell.v === <span class="string">'boolean'</span>) cell.t = <span class="string">'b'</span>;</div><div class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (cell.v <span class="keyword">instanceof</span> <span class="built_in">Date</span>) &#123;</div><div class="line">                cell.t = <span class="string">'n'</span>;</div><div class="line">                cell.z = XLSX.SSF._table[<span class="number">14</span>];</div><div class="line">                cell.v = datenum(cell.v);</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">else</span> cell.t = <span class="string">'s'</span>;</div><div class="line"></div><div class="line">            ws[cell_ref] = cell;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span> (range.s.c &lt; <span class="number">10000000</span>) ws[<span class="string">'!ref'</span>] = XLSX.utils.encode_range(range);</div><div class="line">    <span class="keyword">return</span> ws;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Workbook</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">if</span> (!(<span class="keyword">this</span> <span class="keyword">instanceof</span> Workbook)) <span class="keyword">return</span> <span class="keyword">new</span> Workbook();</div><div class="line">    <span class="keyword">this</span>.SheetNames = [];</div><div class="line">    <span class="keyword">this</span>.Sheets = &#123;&#125;;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">s2ab</span>(<span class="params">s</span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> buf = <span class="keyword">new</span> <span class="built_in">ArrayBuffer</span>(s.length);</div><div class="line">    <span class="keyword">var</span> view = <span class="keyword">new</span> <span class="built_in">Uint8Array</span>(buf);</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i != s.length; ++i) view[i] = s.charCodeAt(i) &amp; <span class="number">0xFF</span>;</div><div class="line">    <span class="keyword">return</span> buf;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">export_table_to_excel</span>(<span class="params">id</span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> theTable = <span class="built_in">document</span>.getElementById(id);</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'a'</span>)</div><div class="line">    <span class="keyword">var</span> oo = generateArray(theTable);</div><div class="line">    <span class="keyword">var</span> ranges = oo[<span class="number">1</span>];</div><div class="line"></div><div class="line">    <span class="comment">/* original data */</span></div><div class="line">    <span class="keyword">var</span> data = oo[<span class="number">0</span>];</div><div class="line">    <span class="keyword">var</span> ws_name = <span class="string">"SheetJS"</span>;</div><div class="line">    <span class="built_in">console</span>.log(data);</div><div class="line"></div><div class="line">    <span class="keyword">var</span> wb = <span class="keyword">new</span> Workbook(), ws = sheet_from_array_of_arrays(data);</div><div class="line"></div><div class="line">    <span class="comment">/* add ranges to worksheet */</span></div><div class="line">    <span class="comment">// ws['!cols'] = ['apple', 'banan'];</span></div><div class="line">    ws[<span class="string">'!merges'</span>] = ranges;</div><div class="line"></div><div class="line">    <span class="comment">/* add worksheet to workbook */</span></div><div class="line">    wb.SheetNames.push(ws_name);</div><div class="line">    wb.Sheets[ws_name] = ws;</div><div class="line"></div><div class="line">    <span class="keyword">var</span> wbout = XLSX.write(wb, &#123;<span class="attr">bookType</span>: <span class="string">'xlsx'</span>, <span class="attr">bookSST</span>: <span class="literal">false</span>, <span class="attr">type</span>: <span class="string">'binary'</span>&#125;);</div><div class="line"></div><div class="line">    saveAs(<span class="keyword">new</span> Blob([s2ab(wbout)], &#123;<span class="attr">type</span>: <span class="string">"application/octet-stream"</span>&#125;), <span class="string">"test.xlsx"</span>)</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">formatJson</span>(<span class="params">jsonData</span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(jsonData)</div><div class="line">&#125;</div><div class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">exportJsonToExcel</span>(<span class="params">th, jsonData, defaultTitle</span>) </span>&#123;</div><div class="line"></div><div class="line">    <span class="comment">/* original data */</span></div><div class="line"></div><div class="line">    <span class="keyword">var</span> data = jsonData;</div><div class="line">    data.unshift(th);</div><div class="line">    <span class="keyword">var</span> ws_name = <span class="string">"SheetJS"</span>;</div><div class="line"></div><div class="line">    <span class="keyword">var</span> wb = <span class="keyword">new</span> Workbook(), ws = sheet_from_array_of_arrays(data);</div><div class="line"></div><div class="line"></div><div class="line">    <span class="comment">/* add worksheet to workbook */</span></div><div class="line">    wb.SheetNames.push(ws_name);</div><div class="line">    wb.Sheets[ws_name] = ws;</div><div class="line"></div><div class="line">    <span class="keyword">var</span> wbout = XLSX.write(wb, &#123;<span class="attr">bookType</span>: <span class="string">'xlsx'</span>, <span class="attr">bookSST</span>: <span class="literal">false</span>, <span class="attr">type</span>: <span class="string">'binary'</span>&#125;);</div><div class="line">    <span class="keyword">var</span> title = defaultTitle || <span class="string">'列表'</span></div><div class="line">    saveAs(<span class="keyword">new</span> Blob([s2ab(wbout)], &#123;<span class="attr">type</span>: <span class="string">"application/octet-stream"</span>&#125;), title + <span class="string">".xlsx"</span>)</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;纯前端将数据导出excel&lt;br&gt;
    
    </summary>
    
      <category term="pit" scheme="https://songzhiguo.github.io/blogs/categories/pit/"/>
    
    
  </entry>
  
  <entry>
    <title>Nginx配置SSL遇到的问题</title>
    <link href="https://songzhiguo.github.io/blogs/2018/07/26/ssl/"/>
    <id>https://songzhiguo.github.io/blogs/2018/07/26/ssl/</id>
    <published>2018-07-26T08:39:04.000Z</published>
    <updated>2018-07-26T09:13:10.494Z</updated>
    
    <content type="html"><![CDATA[<p>由于买的国外服务器，443端口默认是关闭的。导致配置完成之后无法访问此网站<br><a id="more"></a></p><h4 id="centos-6-5-查看、开启，关闭-端口"><a href="#centos-6-5-查看、开启，关闭-端口" class="headerlink" title="centos 6.5 查看、开启，关闭 端口"></a>centos 6.5 查看、开启，关闭 端口</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#1、开启端口</span></div><div class="line"></div><div class="line">/sbin/iptables -I INPUT -p tcp --dport 端口号 -j ACCEPT   <span class="comment">#写入修改</span></div><div class="line"></div><div class="line">/etc/init.d/iptables save  <span class="comment"># 保存修改</span></div><div class="line"></div><div class="line">service iptables restart   <span class="comment"># 重启防火墙，修改生效</span></div><div class="line"></div><div class="line"><span class="comment">#2、关闭端口</span></div><div class="line"></div><div class="line"> /sbin/iptables -I INPUT -p tcp --dport 端口号 -j DROP  <span class="comment"># 写入修改</span></div><div class="line"></div><div class="line"> /etc/init.d/iptables save   <span class="comment">#保存修改</span></div><div class="line"></div><div class="line"> service iptables restart    <span class="comment">#重启防火墙，修改生效</span></div><div class="line"></div><div class="line"> <span class="comment">#3、查看端口状态</span></div><div class="line"></div><div class="line"> /etc/init.d/iptables status</div></pre></td></tr></table></figure><p>开启端口之后发现依旧无法正常访问，此网站无法提供安全连接<br>Nginx配置是从阿里云SSL证书页面中复制修改的。<br><figure class="highlight nginx"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="section">server</span> &#123;</div><div class="line">    <span class="attribute">listen</span> <span class="number">443</span>;</div><div class="line">    <span class="attribute">server_name</span> localhost;</div><div class="line">    <span class="attribute">ssl</span> <span class="literal">on</span>;</div><div class="line">    <span class="attribute">root</span> html;</div><div class="line">    <span class="attribute">index</span> index.html index.htm;</div><div class="line">    <span class="attribute">ssl_certificate</span>   cert/<span class="number">1532100786501</span>.pem;</div><div class="line">    <span class="attribute">ssl_certificate_key</span>  cert/<span class="number">1532100786501</span>.key;</div><div class="line">    <span class="attribute">ssl_session_timeout</span> <span class="number">5m</span>;</div><div class="line">    <span class="attribute">ssl_ciphers</span> ECDHE-RSA-AES128-GCM-SHA256:ECDHE:ECDH:AES:HIGH:!NULL:!aNULL:!MD5:!ADH:!RC4;</div><div class="line">    <span class="attribute">ssl_protocols</span> TLSv1 TLSv1.<span class="number">1</span> TLSv1.<span class="number">2</span>;</div><div class="line">    <span class="attribute">ssl_prefer_server_ciphers</span> <span class="literal">on</span>;</div><div class="line">    <span class="attribute">location</span> / &#123;</div><div class="line">        <span class="attribute">root</span> html;</div><div class="line">        <span class="attribute">index</span> index.html index.htm;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>修改Nginx配置<br><figure class="highlight nginx"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="section">server</span> &#123;</div><div class="line">    <span class="attribute">listen</span> <span class="number">80</span>;</div><div class="line">    <span class="attribute">listen</span> <span class="number">443</span> ssl;</div><div class="line">    <span class="attribute">server_name</span>  localhost;</div><div class="line">    <span class="attribute">root</span> html;</div><div class="line"></div><div class="line">    <span class="attribute">if</span> (<span class="variable">$server_port</span> !<span class="regexp">~ 443)</span>&#123;</div><div class="line">        <span class="attribute">rewrite</span><span class="regexp"> ^(/.*)$</span> https://<span class="variable">$host</span><span class="variable">$1</span> <span class="literal">permanent</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="attribute">ssl_certificate</span>    /usr/local/nginx/conf/cert/<span class="number">1532100786501</span>.pem;</div><div class="line">    <span class="attribute">ssl_certificate_key</span>    /usr/local/nginx/conf/cert/<span class="number">1532100786501</span>.key;</div><div class="line">    <span class="attribute">ssl_protocols</span> TLSv1 TLSv1.<span class="number">1</span> TLSv1.<span class="number">2</span>;</div><div class="line">    <span class="attribute">ssl_ciphers</span> ECDHE-RSA-AES128-GCM-SHA256:HIGH:!aNULL:!MD5:!RC4:!DHE;</div><div class="line">    <span class="attribute">ssl_prefer_server_ciphers</span> <span class="literal">on</span>;</div><div class="line">    <span class="attribute">ssl_session_cache</span> shared:SSL:<span class="number">10m</span>;</div><div class="line">    <span class="attribute">ssl_session_timeout</span> <span class="number">10m</span>;</div><div class="line">    <span class="attribute">index</span> index.html index.htm;</div><div class="line">    <span class="attribute">location</span> / &#123;</div><div class="line">        <span class="attribute">root</span> html;</div><div class="line">        <span class="attribute">index</span> index.html index.htm;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>页面正常访问了（问题可能在于Nginx版本）</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;由于买的国外服务器，443端口默认是关闭的。导致配置完成之后无法访问此网站&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Nuxt项目部署遇到的问题</title>
    <link href="https://songzhiguo.github.io/blogs/2018/07/24/node-upgrade/"/>
    <id>https://songzhiguo.github.io/blogs/2018/07/24/node-upgrade/</id>
    <published>2018-07-24T03:57:18.000Z</published>
    <updated>2018-07-24T06:13:15.727Z</updated>
    
    <content type="html"><![CDATA[<p>在服务器部署Nuxt项目时，遇到Node版本过低。linux下升级node遇到的问题<br><a id="more"></a></p><h4 id="切换node版本时，键盘不能操作的问题的解决方案"><a href="#切换node版本时，键盘不能操作的问题的解决方案" class="headerlink" title="切换node版本时，键盘不能操作的问题的解决方案"></a>切换node版本时，键盘不能操作的问题的解决方案</h4><p>n之后，如果键盘上下箭头操作不能控制。那么请考虑一下，可能n程序出了bug。<br>比如，当前版本是7.7.1，但是n列出所有已经安装版本的时候，没有显示出7.7.1。<br>这个就是问题所在了，主动使用n安装了当前node版本7.7.1<br>然后就解决了这个问题。</p><h4 id="切换node版本后，node版本号不变的问题"><a href="#切换node版本后，node版本号不变的问题" class="headerlink" title="切换node版本后，node版本号不变的问题"></a>切换node版本后，node版本号不变的问题</h4><p>切换后，node的版本居然没有发生变化，这个就有些小尴尬了。解决方案如下：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="builtin-name">export</span> <span class="attribute">NODE_HOME</span>=/usr/local</div><div class="line"><span class="builtin-name">export</span> <span class="attribute">PATH</span>=<span class="variable">$NODE_HOME</span>/bin:$PATH</div><div class="line"><span class="builtin-name">export</span> <span class="attribute">NODE_PATH</span>=<span class="variable">$NODE_HOME</span>/lib/node_modules:$PATH</div></pre></td></tr></table></figure><h4 id="nginx反向配置"><a href="#nginx反向配置" class="headerlink" title="nginx反向配置"></a>nginx反向配置</h4><figure class="highlight glsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">upstream songzhiguo &#123;</div><div class="line">  server <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">3000</span>;</div><div class="line">&#125;</div><div class="line">server&#123;</div><div class="line">  listen <span class="number">80</span>;</div><div class="line"></div><div class="line">  server_name zhiguo.top;</div><div class="line">  <span class="keyword">index</span> <span class="keyword">index</span>.html <span class="keyword">index</span>.htm <span class="keyword">index</span>.php <span class="keyword">default</span>.html <span class="keyword">default</span>.htm <span class="keyword">default</span>.php;</div><div class="line">  <span class="keyword">location</span> / &#123;</div><div class="line">          proxy_set_header X-Real-Ip $remote_addr;</div><div class="line">          proxy_set_header X-Forward-For $proxy_add_x_forwarded_for;</div><div class="line">          proxy_set_header X-Nginx-Proxy <span class="literal">true</span>;</div><div class="line">          proxy_pass http:<span class="comment">//songzhiguo;</span></div><div class="line">          proxy_redirect off;</div><div class="line">          <span class="meta">#try_files $uri $uri/ /index.html;  ##使用docker环境下这个不需要</span></div><div class="line">  &#125; </div><div class="line">  <span class="keyword">location</span> ~ /\.</div><div class="line">  &#123;</div><div class="line">      deny <span class="built_in">all</span>;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  access_log  /home/wwwlogs/blog.shudong.wang.<span class="built_in">log</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在服务器部署Nuxt项目时，遇到Node版本过低。linux下升级node遇到的问题&lt;br&gt;
    
    </summary>
    
      <category term="pit" scheme="https://songzhiguo.github.io/blogs/categories/pit/"/>
    
    
  </entry>
  
  <entry>
    <title>Module 的语法</title>
    <link href="https://songzhiguo.github.io/blogs/2018/06/27/module/"/>
    <id>https://songzhiguo.github.io/blogs/2018/06/27/module/</id>
    <published>2018-06-27T03:19:43.000Z</published>
    <updated>2018-06-27T03:20:31.256Z</updated>
    
    <content type="html"><![CDATA[<p>Module实现了模块功能，而且实现得相当简单，完全可以取代 CommonJS 和 AMD 规范，成为浏览器和服务器通用的模块解决方案。<br><a id="more"></a></p><h3 id="export命令"><a href="#export命令" class="headerlink" title="export命令"></a>export命令</h3><p>一个模块就是一个独立的文件。该文件内部的所有变量，外部无法获取。如果你希望外部能够读取模块内部的某个变量，就必须使用export关键字输出该变量。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">export</span> <span class="keyword">let</span> firstName = <span class="string">'song'</span>;</div><div class="line"><span class="keyword">export</span> <span class="keyword">let</span> lastName = <span class="string">'zhiguo'</span>;</div></pre></td></tr></table></figure><p>export的写法，除了像上面这样，还有另外一种。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> firstName = <span class="string">'song'</span>;</div><div class="line"><span class="keyword">let</span> lastName = <span class="string">'zhiguo'</span>;</div><div class="line"><span class="keyword">export</span> &#123; firstName, lastName &#125;;</div></pre></td></tr></table></figure><p>export命令除了输出变量，还可以输出函数或类（class）<br>通常情况下，export输出的变量就是本来的名字，但是可以使用as关键字重命名。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">firstName</span> (<span class="params"></span>) </span>&#123;...&#125;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">lastName</span> (<span class="params"></span>) </span>&#123;...&#125;</div><div class="line"><span class="keyword">export</span> &#123;</div><div class="line">  firstName <span class="keyword">as</span> first,</div><div class="line">  lastName <span class="keyword">as</span> last </div><div class="line">&#125;;</div></pre></td></tr></table></figure><h3 id="import命令"><a href="#import命令" class="headerlink" title="import命令"></a>import命令</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> &#123; firstName, lastName &#125; <span class="keyword">from</span> <span class="string">'...'</span>;</div></pre></td></tr></table></figure><p>如果想为输入的变量重新取一个名字，import命令要使用as关键字，将输入的变量重命名。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> &#123; firstName <span class="keyword">as</span> first &#125; <span class="keyword">from</span> <span class="string">'...'</span>;</div></pre></td></tr></table></figure><h3 id="模块的整体加载"><a href="#模块的整体加载" class="headerlink" title="模块的整体加载"></a>模块的整体加载</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// a.js</span></div><div class="line"><span class="keyword">export</span> <span class="keyword">let</span> firstName = <span class="string">'song'</span>;</div><div class="line"><span class="keyword">export</span> <span class="keyword">let</span> lastName = <span class="string">'zhiguo'</span>;</div><div class="line"></div><div class="line"><span class="comment">// b.js</span></div><div class="line"><span class="keyword">import</span> * <span class="keyword">as</span> name <span class="keyword">from</span> <span class="string">'...'</span>;</div><div class="line"><span class="built_in">console</span>.log(name.firstName);</div><div class="line"><span class="built_in">console</span>.log(name.lastName);</div></pre></td></tr></table></figure><h3 id="export-default-命令"><a href="#export-default-命令" class="headerlink" title="export default 命令"></a>export default 命令</h3><p>指定默认输出<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">'foo'</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>其他模块加载该模块时，import命令可以为该匿名函数指定任意名字。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> customName <span class="keyword">from</span> <span class="string">'...'</span>;</div></pre></td></tr></table></figure><p>使用export default时，对应的import语句不需要使用大括号。不使用export default时，对应的import语句需要使用大括号。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> <span class="title">crc32</span>(<span class="params"></span>) </span>&#123; <span class="comment">// 输出&#125;</span></div><div class="line"><span class="keyword">import</span> crc32 <span class="keyword">from</span> <span class="string">'crc32'</span>; <span class="comment">// 输入</span></div><div class="line"></div><div class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">crc32</span>(<span class="params"></span>) </span>&#123; <span class="comment">// 输出&#125;;</span></div><div class="line"><span class="keyword">import</span> &#123;crc32&#125; <span class="keyword">from</span> <span class="string">'crc32'</span>; <span class="comment">// 输入</span></div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Module实现了模块功能，而且实现得相当简单，完全可以取代 CommonJS 和 AMD 规范，成为浏览器和服务器通用的模块解决方案。&lt;br&gt;
    
    </summary>
    
      <category term="javascript" scheme="https://songzhiguo.github.io/blogs/categories/javascript/"/>
    
    
      <category term="javascript" scheme="https://songzhiguo.github.io/blogs/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>前端面试总结</title>
    <link href="https://songzhiguo.github.io/blogs/2018/06/25/js-basics/"/>
    <id>https://songzhiguo.github.io/blogs/2018/06/25/js-basics/</id>
    <published>2018-06-25T09:30:32.000Z</published>
    <updated>2018-06-25T10:32:53.653Z</updated>
    
    <content type="html"><![CDATA[<h3 id="变量类型和计算"><a href="#变量类型和计算" class="headerlink" title="变量类型和计算"></a>变量类型和计算</h3><h4 id="typeof运算符"><a href="#typeof运算符" class="headerlink" title="typeof运算符"></a>typeof运算符</h4><p>typeof运算符可以详细区分值类型，引用类型只能区分object和function<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">typeof</span> <span class="literal">undefined</span> <span class="comment">// undefined</span></div><div class="line"><span class="keyword">typeof</span> <span class="string">'abc'</span> <span class="comment">// string</span></div><div class="line"><span class="keyword">typeof</span> <span class="number">123</span>  <span class="comment">// number</span></div><div class="line"><span class="keyword">typeof</span> <span class="literal">true</span> <span class="comment">// boolean</span></div><div class="line"><span class="keyword">typeof</span> &#123;&#125; <span class="comment">// object</span></div><div class="line"><span class="keyword">typeof</span> [] <span class="comment">// object</span></div><div class="line"><span class="keyword">typeof</span> <span class="literal">null</span> <span class="comment">// object</span></div><div class="line"><span class="keyword">typeof</span> <span class="built_in">console</span>.log <span class="comment">// function</span></div></pre></td></tr></table></figure></p><h4 id="变量计算-强制类型转换"><a href="#变量计算-强制类型转换" class="headerlink" title="变量计算 - 强制类型转换"></a>变量计算 - 强制类型转换</h4><p>-&gt; 字符串拼接<br>-&gt; ==运算符<br>-&gt; if语句<br>-&gt; 逻辑运算符</p><h4 id="js中的内置函数"><a href="#js中的内置函数" class="headerlink" title="js中的内置函数"></a>js中的内置函数</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">Object</span></div><div class="line"><span class="built_in">Array</span></div><div class="line"><span class="built_in">Boolean</span></div><div class="line"><span class="built_in">Number</span></div><div class="line"><span class="built_in">String</span></div><div class="line"><span class="built_in">Function</span></div><div class="line"><span class="built_in">Date</span></div><div class="line"><span class="built_in">RegExp</span></div><div class="line"><span class="built_in">Error</span></div></pre></td></tr></table></figure><h4 id="js按存储方式区分变量类型"><a href="#js按存储方式区分变量类型" class="headerlink" title="js按存储方式区分变量类型"></a>js按存储方式区分变量类型</h4><p>值类型和引用类型</p><h4 id="如何理解JSON"><a href="#如何理解JSON" class="headerlink" title="如何理解JSON"></a>如何理解JSON</h4><p>JSON是一个js对象而已</p><h4 id="原型和原型链"><a href="#原型和原型链" class="headerlink" title="原型和原型链"></a>原型和原型链</h4><h5 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a>构造函数</h5>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;变量类型和计算&quot;&gt;&lt;a href=&quot;#变量类型和计算&quot; class=&quot;headerlink&quot; title=&quot;变量类型和计算&quot;&gt;&lt;/a&gt;变量类型和计算&lt;/h3&gt;&lt;h4 id=&quot;typeof运算符&quot;&gt;&lt;a href=&quot;#typeof运算符&quot; class=&quot;header
      
    
    </summary>
    
      <category term="js" scheme="https://songzhiguo.github.io/blogs/categories/js/"/>
    
    
  </entry>
  
  <entry>
    <title>let和const命令</title>
    <link href="https://songzhiguo.github.io/blogs/2018/06/06/let-const/"/>
    <id>https://songzhiguo.github.io/blogs/2018/06/06/let-const/</id>
    <published>2018-06-06T01:48:19.000Z</published>
    <updated>2018-06-06T02:04:43.198Z</updated>
    
    <content type="html"><![CDATA[<p>ES6新增let命令，用来声明变量。它的用法类似于var，但是所声明的变量，只在let命令所在的代码块内有效。</p><a id="more"></a><p>ES6新增let命令，用来声明变量。它的用法类似于var，但是所声明的变量，只在let命令所在的代码块内有效。<br>不存在变量提升</p><p>暂时性死区<br>只要在块级作用域内存在let命令，他所声明的变量就绑定这个区域，不在受外部影响。</p><p>ES6明确规定，如果区块中存在let和const命令，这个区块对这些命令声明的变量，从一开始就形成了封闭作用域。凡是在声明之前就是用这些变量，就会报错。<br>在代码块内，使用let声明变量之前，改变量都是不可用的，这在语法上称为暂时性死区</p><p>不允许重复声明</p><p>为什么需要块级作用域<br>第一种场景，内层变量可能会覆盖外层变量<br>第二种场景，用来计数的循环变量泄露为全局变量</p><p>const声明一个只读的常量，一旦声明常量的值就不能改变。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;ES6新增let命令，用来声明变量。它的用法类似于var，但是所声明的变量，只在let命令所在的代码块内有效。&lt;/p&gt;
    
    </summary>
    
      <category term="javascript" scheme="https://songzhiguo.github.io/blogs/categories/javascript/"/>
    
    
  </entry>
  
  <entry>
    <title>理解vue生命周期</title>
    <link href="https://songzhiguo.github.io/blogs/2018/06/01/vue-lifecycle/"/>
    <id>https://songzhiguo.github.io/blogs/2018/06/01/vue-lifecycle/</id>
    <published>2018-06-01T03:49:44.000Z</published>
    <updated>2018-06-05T08:10:29.035Z</updated>
    
    <content type="html"><![CDATA[<p>每个 Vue 实例在被创建时都要经过一系列的初始化过程——例如，需要设置数据监听、编译模板、将实例挂载到 DOM 并在数据变化时更新 DOM 等<br><a id="more"></a></p><p><img src="https://cn.vuejs.org/images/lifecycle.png" alt=""></p><p>在谈到Vue的生命周期的时候，我们首先需要创建一个实例，也就是在 new Vue ( ) 的对象过程当中，首先执行了init（init是vue组件里面默认去执行的），在init的过程当中首先调用了beforeCreate，然后在injections（注射）和reactivity（反应性）的时候，它会再去调用created。所以在init的时候，事件已经调用了，我们在beforeCreate的时候千万不要去修改data里面赋值的数据，最早也要放在created里面去做（添加一些行为）。</p><p>当created完成之后，它会去判断instance（实例）里面是否含有“el”option（选项），如果没有的话，它会调用vm.$mount(el)这个方法，然后执行下一步；如果有的话，直接执行下一步。紧接着会判断是否含有“template”这个选项，如果有的话，它会把template解析成一个render function ，这是一个template编译的过程，结果是解析成了render函数：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">render (h) &#123;</div><div class="line">  <span class="keyword">return</span> h(<span class="string">'div'</span>, &#123;&#125;, <span class="keyword">this</span>.text)</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>解释一下，render函数里面的传参h就是Vue里面的createElement方法，return返回一个createElement方法，其中要传3个参数，第一个参数就是创建的div标签；第二个参数传了一个对象，对象里面可以是我们组件上面的props，或者是事件之类的东西；第三个参数就是div标签里面的内容，这里我们指向了data里面的text。</p><p>使用render函数的结果和我们之前使用template解析出来的结果是一样的。render函数是发生在beforeMount和mounted之间的，这也从侧面说明了，在beforeMount的时候，$el还只是我们在HTML里面写的节点，然后到mounted的时候，它就把渲染出来的内容挂载到了DOM节点上。这中间的过程其实是执行了render function的内容。</p><p>在使用.vue文件开发的过程当中，我们在里面写了template模板，在经过了vue-loader的处理之后，就变成了render function，最终放到了vue-loader解析过的文件里面。这样做有什么好处呢？原因是由于在解析template变成render function的过程，是一个非常耗时的过程，vue-loader帮我们处理了这些内容之后，当我们在页面上执行vue代码的时候，效率会变得更高。</p><p>beforeMount在有了render function的时候才会执行，当执行完render function之后，就会调用mounted这个钩子，在mounted挂载完毕之后，这个实例就算是走完流程了。<br>后续的钩子函数执行的过程都是需要外部的触发才会执行。比如说有数据的变化，会调用beforeUpdate，然后经过Virtual DOM，最后updated更新完毕。当组件被销毁的时候，它会调用beforeDestory，以及destoryed。</p><blockquote><ul><li>beforecreated：el 和 data 并未初始化 </li><li>created:完成了 data 数据的初始化，el没有</li><li>beforeMount：完成了 el 和 data 初始化 </li><li>mounted ：完成Dom挂载</li><li>DOM相关操作放在mounted之后,数据相关操作，可以放在created，也可以放在mounted里面</li></ul></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;每个 Vue 实例在被创建时都要经过一系列的初始化过程——例如，需要设置数据监听、编译模板、将实例挂载到 DOM 并在数据变化时更新 DOM 等&lt;br&gt;
    
    </summary>
    
      <category term="vue" scheme="https://songzhiguo.github.io/blogs/categories/vue/"/>
    
    
  </entry>
  
  <entry>
    <title>进程与线程的一个简单解释</title>
    <link href="https://songzhiguo.github.io/blogs/2018/06/01/process-thread/"/>
    <id>https://songzhiguo.github.io/blogs/2018/06/01/process-thread/</id>
    <published>2018-06-01T03:14:52.000Z</published>
    <updated>2018-06-01T03:22:38.225Z</updated>
    
    <content type="html"><![CDATA[<p>计算机的核心是CPU，它承担了所有的计算任务。它就像一座工厂，时刻在运行。<br><a id="more"></a></p><p><a href="http://www.ruanyifeng.com/blog/2013/04/processes_and_threads.html" target="_blank" rel="external">进程与线程的一个简单解释</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;计算机的核心是CPU，它承担了所有的计算任务。它就像一座工厂，时刻在运行。&lt;br&gt;
    
    </summary>
    
      <category term="计算机基础" scheme="https://songzhiguo.github.io/blogs/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/"/>
    
    
  </entry>
  
  <entry>
    <title>vue中删除数组指定数据产生渲染错乱</title>
    <link href="https://songzhiguo.github.io/blogs/2018/05/25/vue-forRender/"/>
    <id>https://songzhiguo.github.io/blogs/2018/05/25/vue-forRender/</id>
    <published>2018-05-25T04:03:09.000Z</published>
    <updated>2018-05-25T04:23:23.427Z</updated>
    
    <content type="html"><![CDATA[<p>在vue项目中，删除数组中的指定数据，造成页面列表渲染错乱问题及解决方案<br><a id="more"></a></p><p>最近使用vue开发一个ppt在线编辑工具时，要创建ppt元素，ppt的每一页中的每一个元素都是用v-for来做循环，动态添加删除，</p><p>出现的问题是，删除非数组的最后一个数据时，dom元素消失的同样是最后一个，数据渲染就会往上错位一个。</p><p>解决方案是</p><p>问题是出在v-for的:key上，解决方法就是给:key赋予一个独一无二的值。这样绑定的数组就可以和dom对象一一对应起来，删除的时候也能正确删除掉响应dom对象了。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// utils</span></div><div class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">guid</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> <span class="string">'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'</span>.replace(<span class="regexp">/[xy]/g</span>, <span class="function"><span class="keyword">function</span>(<span class="params">c</span>) </span>&#123;</div><div class="line">    <span class="keyword">let</span> r = <span class="built_in">Math</span>.random() * <span class="number">16</span> | <span class="number">0</span></div><div class="line">    <span class="keyword">let</span> v = c === <span class="string">'x'</span> ? r : (r &amp; <span class="number">0x3</span> | <span class="number">0x8</span>)</div><div class="line">    <span class="keyword">return</span> v.toString(<span class="number">16</span>)</div><div class="line">  &#125;)</div><div class="line">&#125;</div><div class="line"><span class="comment">// 组件内</span></div><div class="line"><span class="keyword">import</span> &#123;guid&#125; <span class="keyword">from</span> <span class="string">'@/utils/index'</span></div><div class="line"></div><div class="line"><span class="comment">// 添加文本</span></div><div class="line">addText() &#123;</div><div class="line">  <span class="keyword">if</span> (<span class="keyword">this</span>.canQuill) &#123;</div><div class="line">    <span class="keyword">let</span> obj = &#123; <span class="attr">words</span>: <span class="string">'文本'</span>,</div><div class="line">      backfillStyle: &#123;&#125;,</div><div class="line">      style: <span class="literal">null</span>, <span class="attr">WHXY</span>: &#123; <span class="attr">w</span>: <span class="number">372</span>, <span class="attr">h</span>: <span class="string">'auto'</span>, <span class="attr">x</span>: <span class="number">266</span>, <span class="attr">y</span>: <span class="number">350</span> &#125;,</div><div class="line">      inputAct: <span class="literal">true</span>,</div><div class="line">      animat: &#123;</div><div class="line">        type: <span class="string">''</span>,</div><div class="line">        duration: <span class="number">0</span>,</div><div class="line">        delay: <span class="number">0</span></div><div class="line">      &#125;,</div><div class="line">      guid: guid()</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">this</span>.pages[<span class="keyword">this</span>.currentPage - <span class="number">1</span>].text.push(obj)</div><div class="line">    <span class="keyword">this</span>._initFillData(<span class="string">'text'</span>, obj, <span class="literal">true</span>)</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">vue-draggable-resizable</span></span></div><div class="line"><span class="tag">  <span class="attr">v-for</span>=<span class="string">"(item, index) in page.text"</span></span></div><div class="line"><span class="tag">  <span class="attr">:key</span>=<span class="string">"item.guid"</span></span></div><div class="line"><span class="tag">  <span class="attr">:data-animation-type</span>=<span class="string">"item.animat.type"</span></span></div><div class="line"><span class="tag">  <span class="attr">:data-transition-duration</span>=<span class="string">"item.animat.duration"</span></span></div><div class="line"><span class="tag">  <span class="attr">:data-transition-delay</span>=<span class="string">"item.animat.delay"</span></span></div><div class="line"><span class="tag">  <span class="attr">:parent</span>=<span class="string">"true"</span></span></div><div class="line"><span class="tag">  <span class="attr">:handles</span>=<span class="string">"['ml','mr']"</span></span></div><div class="line"><span class="tag">  <span class="attr">:style</span>=<span class="string">"item.backfillStyle"</span></span></div><div class="line"><span class="tag">  <span class="attr">:w</span>=<span class="string">"parseInt(item.WHXY.w)"</span></span></div><div class="line"><span class="tag">  <span class="attr">:h</span>=<span class="string">"parseInt(item.WHXY.h)"</span></span></div><div class="line"><span class="tag">  <span class="attr">:x</span>=<span class="string">"parseInt(item.WHXY.x)"</span></span></div><div class="line"><span class="tag">  <span class="attr">:y</span>=<span class="string">"parseInt(item.WHXY.y)"</span></span></div><div class="line"><span class="tag">  <span class="attr">:draggable</span>=<span class="string">"draggable"</span></span></div><div class="line"><span class="tag">  <span class="attr">ref</span>=<span class="string">"pluginText"</span></span></div><div class="line"><span class="tag">  <span class="attr">text</span></span></div><div class="line"><span class="tag">  @<span class="attr">dblclickHandle</span>=<span class="string">"dblclickHandle"</span></span></div><div class="line"><span class="tag">  @<span class="attr">activated</span>=<span class="string">"onActivateText(index)"</span></span></div><div class="line"><span class="tag">  @<span class="attr">deactivated</span>=<span class="string">"onDeactivateText(index)"</span></span></div><div class="line"><span class="tag">&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"quill-text"</span> <span class="attr">ref</span>=<span class="string">"text"</span> <span class="attr">v-show</span>=<span class="string">"item.inputAct"</span> <span class="attr">v-html</span>=<span class="string">"item.words"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"quill-text quill"</span> <span class="attr">ref</span>=<span class="string">"quill"</span> <span class="attr">v-show</span>=<span class="string">"!item.inputAct"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">vue-draggable-resizable</span>&gt;</span></div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在vue项目中，删除数组中的指定数据，造成页面列表渲染错乱问题及解决方案&lt;br&gt;
    
    </summary>
    
      <category term="pit" scheme="https://songzhiguo.github.io/blogs/categories/pit/"/>
    
    
      <category term="pit" scheme="https://songzhiguo.github.io/blogs/tags/pit/"/>
    
  </entry>
  
  <entry>
    <title>vue分段上传七牛云</title>
    <link href="https://songzhiguo.github.io/blogs/2018/05/11/uploadqiniu/"/>
    <id>https://songzhiguo.github.io/blogs/2018/05/11/uploadqiniu/</id>
    <published>2018-05-11T06:06:19.000Z</published>
    <updated>2019-03-21T02:17:27.622Z</updated>
    
    <content type="html"><![CDATA[<p>使用element-ui上传七牛云方法介绍<br><a id="more"></a></p><h4 id="上传组件"><a href="#上传组件" class="headerlink" title="上传组件"></a>上传组件</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">el-upload</span></span></div><div class="line"><span class="tag">  <span class="attr">class</span>=<span class="string">"uploader-box"</span></span></div><div class="line"><span class="tag">  <span class="attr">action</span>=<span class="string">"http://up.qbox.me/"</span></span></div><div class="line"><span class="tag">  <span class="attr">:http-request</span>=<span class="string">"request"</span></span></div><div class="line"><span class="tag">  <span class="attr">:on-success</span>=<span class="string">"handleSuccess"</span></span></div><div class="line"><span class="tag">  <span class="attr">:before-upload</span>=<span class="string">"beforeUpload"</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">el-upload</span>&gt;</span></div></pre></td></tr></table></figure><h4 id="传参token值"><a href="#传参token值" class="headerlink" title="传参token值"></a>传参token值</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">data() &#123;</div><div class="line">  <span class="keyword">return</span> &#123;</div><div class="line">    form: <span class="literal">null</span></div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h4 id="保证初次上传token已成功传入"><a href="#保证初次上传token已成功传入" class="headerlink" title="保证初次上传token已成功传入"></a>保证初次上传token已成功传入</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">mounted() &#123;</div><div class="line">  <span class="keyword">this</span>._getToken()</div><div class="line">&#125;</div></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">methods: &#123;</div><div class="line">  beforeUpload(file) &#123;</div><div class="line">    <span class="keyword">const</span> isVideo = file.type === <span class="string">'video/mp4'</span></div><div class="line">    <span class="keyword">if</span> (!isVideo) &#123;</div><div class="line">      <span class="keyword">this</span>.$message.warning(<span class="string">`上传文件类型不正确!`</span>)</div><div class="line">      <span class="keyword">return</span> isVideo</div><div class="line">    &#125;</div><div class="line">  &#125;,</div><div class="line">  handleSuccess(res, file) &#123;</div><div class="line">    <span class="keyword">this</span>.uploadSuccess1 = <span class="literal">true</span></div><div class="line">    <span class="keyword">this</span>.params.link1 = <span class="keyword">this</span>.baseUrl + res.key</div><div class="line">    <span class="keyword">this</span>._judgeType()</div><div class="line">  &#125;,</div><div class="line">  request(obj) &#123;</div><div class="line">    <span class="keyword">const</span> key = setKey(obj.file.name)</div><div class="line">    <span class="keyword">const</span> uploader = upload(<span class="keyword">this</span>.form.token, key)</div><div class="line">    <span class="keyword">const</span> subscription = uploader(obj) <span class="comment">// eslint-disable-line</span></div><div class="line">  &#125;,</div><div class="line">  <span class="comment">// 从服务器获取token值</span></div><div class="line">  _getToken() &#123;</div><div class="line">    getToken().then(<span class="function"><span class="params">response</span> =&gt;</span> &#123;</div><div class="line">      <span class="keyword">this</span>.form = &#123;</div><div class="line">        token: response.data</div><div class="line">      &#125;</div><div class="line">    &#125;).catch(<span class="function"><span class="params">error</span> =&gt;</span> &#123;</div><div class="line">    &#125;)</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> * <span class="keyword">as</span> qiniu <span class="keyword">from</span> <span class="string">'qiniu-js'</span></div><div class="line"></div><div class="line"><span class="keyword">export</span> <span class="keyword">const</span> upload = <span class="function">(<span class="params">token, key</span>) =&gt;</span> obj =&gt; &#123;</div><div class="line">  <span class="keyword">const</span> &#123; file &#125; = obj</div><div class="line"></div><div class="line">  <span class="comment">// 关于 key 要怎么处理自行解决，但如果为 undefined 或者 null 会使用上传后的 hash 作为 key.</span></div><div class="line">  <span class="comment">// const key = file.name</span></div><div class="line">  <span class="comment">// 因人而异，自行解决</span></div><div class="line">  <span class="keyword">const</span> putExtra = &#123;&#125;</div><div class="line">  <span class="keyword">const</span> config = &#123;&#125;</div><div class="line"></div><div class="line">  <span class="keyword">const</span> observable = qiniu.upload(file, key, token, putExtra, config)</div><div class="line"></div><div class="line">  <span class="comment">// 刚刚得到的信息可以使用了，这样可以使用到 el-upload 的进度条</span></div><div class="line">  <span class="keyword">const</span> next = <span class="function">(<span class="params">&#123; total &#125;</span>) =&gt;</span> obj.onProgress(&#123; <span class="attr">percent</span>: total.percent &#125;)</div><div class="line"></div><div class="line">  <span class="keyword">const</span> error = <span class="function"><span class="params">err</span> =&gt;</span> obj.onError(err)</div><div class="line"></div><div class="line">  <span class="keyword">const</span> complete = <span class="function"><span class="params">res</span> =&gt;</span> obj.onSuccess(res)</div><div class="line"></div><div class="line">  <span class="keyword">const</span> subscription = observable.subscribe(next, error, complete)</div><div class="line">  <span class="keyword">return</span> subscription <span class="comment">// 返回以方便取消上传操作</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;使用element-ui上传七牛云方法介绍&lt;br&gt;
    
    </summary>
    
      <category term="pit" scheme="https://songzhiguo.github.io/blogs/categories/pit/"/>
    
    
      <category term="vue" scheme="https://songzhiguo.github.io/blogs/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>使用扩展符会报错问题</title>
    <link href="https://songzhiguo.github.io/blogs/2018/04/27/record-element/"/>
    <id>https://songzhiguo.github.io/blogs/2018/04/27/record-element/</id>
    <published>2018-04-27T06:24:19.000Z</published>
    <updated>2018-05-25T04:57:05.464Z</updated>
    
    <content type="html"><![CDATA[<p>按照element-ui官网修改 .babelrc导致使用扩展符会报错问题<br><a id="more"></a></p><h3 id="按需加载"><a href="#按需加载" class="headerlink" title="按需加载"></a>按需加载</h3><p>  按照官网将 .babelrc 修改为：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  <span class="attr">"presets"</span>: [[<span class="string">"es2015"</span>, &#123; <span class="attr">"modules"</span>: <span class="literal">false</span> &#125;]],</div><div class="line">  <span class="attr">"plugins"</span>: [</div><div class="line">    [</div><div class="line">      <span class="string">"component"</span>,</div><div class="line">      &#123;</div><div class="line">        <span class="attr">"libraryName"</span>: <span class="string">"element-ui"</span>,</div><div class="line">        <span class="attr">"styleLibraryName"</span>: <span class="string">"theme-chalk"</span></div><div class="line">      &#125;</div><div class="line">    ]</div><div class="line">  ]</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>使用扩展符会报错<br>在将.babelrc 修改为</p><figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  <span class="attr">"presets"</span>: [[<span class="string">"es2015"</span>, &#123; <span class="attr">"modules"</span>: <span class="literal">false</span> &#125;], <span class="string">"stage-3"</span>],</div><div class="line">  <span class="attr">"plugins"</span>: [</div><div class="line">    [</div><div class="line">      <span class="string">"component"</span>,</div><div class="line">      &#123;</div><div class="line">        <span class="attr">"libraryName"</span>: <span class="string">"element-ui"</span>,</div><div class="line">        <span class="attr">"styleLibraryName"</span>: <span class="string">"theme-chalk"</span></div><div class="line">      &#125;</div><div class="line">    ]</div><div class="line">  ]</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;按照element-ui官网修改 .babelrc导致使用扩展符会报错问题&lt;br&gt;
    
    </summary>
    
      <category term="pit" scheme="https://songzhiguo.github.io/blogs/categories/pit/"/>
    
    
      <category term="vue" scheme="https://songzhiguo.github.io/blogs/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>使用axios post后台获取不到提交的数据</title>
    <link href="https://songzhiguo.github.io/blogs/2018/03/28/axios/"/>
    <id>https://songzhiguo.github.io/blogs/2018/03/28/axios/</id>
    <published>2018-03-28T11:55:30.000Z</published>
    <updated>2018-05-25T04:51:32.153Z</updated>
    
    <content type="html"><![CDATA[<p>使用axios post 提交数据,后台获取不到数据解决方案<br><a id="more"></a></p><p>在页面中引用 qs :   var qs = require(‘qs’)</p><p>同时 需要将 请求头headers改为： ‘Content-Type’: ‘application/x-www-form-urlencoded’,</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">addDaily</span> (<span class="params">parameter</span>) </span>&#123;</div><div class="line">  <span class="keyword">const</span> url = PUBLIC_URL + <span class="string">'daily/addDatas'</span></div><div class="line"></div><div class="line">  <span class="keyword">return</span> axios.post(url, qs.stringify(parameter), &#123;</div><div class="line">    headers: &#123;</div><div class="line">      <span class="string">'Content-Type'</span>: <span class="string">'application/x-www-form-urlencoded'</span></div><div class="line">    &#125;</div><div class="line">  &#125;).then(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</div><div class="line">    <span class="keyword">return</span> <span class="built_in">Promise</span>.resolve(res.data)</div><div class="line">  &#125;)</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>或者在拦截器中统一处理<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">service.interceptors.request.use(<span class="function"><span class="params">config</span> =&gt;</span> &#123;</div><div class="line">  <span class="keyword">if</span> (store.getters.token) &#123;</div><div class="line">    config.headers[<span class="string">'X-Token'</span>] = getToken() <span class="comment">// 让每个请求携带自定义token 请根据实际情况自行修改</span></div><div class="line">  &#125;</div><div class="line">  <span class="keyword">if</span> (config.method === <span class="string">'post'</span>) &#123;</div><div class="line">    config.data = qs.stringify(config.data)</div><div class="line">    config.headers[<span class="string">'Content-Type'</span>] = <span class="string">'application/x-www-form-urlencoded'</span></div><div class="line">  &#125;</div><div class="line">  <span class="keyword">return</span> config</div><div class="line">&#125;, error =&gt; &#123;</div><div class="line">  <span class="comment">// Do something with request error</span></div><div class="line">  <span class="built_in">console</span>.log(error) <span class="comment">// for debug</span></div><div class="line">  <span class="built_in">Promise</span>.reject(error)</div><div class="line">&#125;)</div></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;使用axios post 提交数据,后台获取不到数据解决方案&lt;br&gt;
    
    </summary>
    
      <category term="pit" scheme="https://songzhiguo.github.io/blogs/categories/pit/"/>
    
    
      <category term="vue" scheme="https://songzhiguo.github.io/blogs/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>理解vue中的组件通信</title>
    <link href="https://songzhiguo.github.io/blogs/2018/03/17/assembly-vue/"/>
    <id>https://songzhiguo.github.io/blogs/2018/03/17/assembly-vue/</id>
    <published>2018-03-17T00:57:14.000Z</published>
    <updated>2018-05-08T02:53:22.595Z</updated>
    
    <content type="html"><![CDATA[<p>组件最常见的就是形成父子组件的关系，父组件可能要给子组件下发数据，子组件则可能要将它内部发生的事情告知父组件。</p><p>在 Vue 中，父子组件的关系可以总结为 prop 向下传递，事件向上传递。父组件通过 prop 给子组件下发数据，子组件通过事件给父组件发送消息。看看它们是怎么工作的。</p><p><img src="https://cn.vuejs.org/images/props-events.png" alt=""></p><h3 id="使用-Prop-传递数据"><a href="#使用-Prop-传递数据" class="headerlink" title="使用 Prop 传递数据"></a>使用 Prop 传递数据</h3><p>组件实例的作用域是孤立的。这意味着不能 (也不应该) 在子组件的模板内直接引用父组件的数据。父组件的数据需要通过 prop 才能下发到子组件中。</p><p>子组件要显式地用 props 选项声明它预期的数据：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">props: [<span class="string">'message'</span>]</div></pre></td></tr></table></figure><h4 id="单向数据流"><a href="#单向数据流" class="headerlink" title="单向数据流"></a>单向数据流</h4><p>父组件更新时，子组件的所有 prop 都会更新为最新值。这意味着你不应该在子组件内部改变 prop</p><p>在两种情况下，我们很容易忍不住想去修改 prop 中数据：</p><p>1、Prop 作为初始值传入后，子组件想把它当作局部数据来用；</p><p>2、Prop 作为原始数据传入，由子组件处理成其它数据输出。</p><p>对这两种情况，正确的应对方式是：</p><p>1、定义一个局部变量，并用 prop 的值初始化它：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">props: [<span class="string">'initialCounter'</span>],</div><div class="line">data: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> &#123; <span class="attr">counter</span>: <span class="keyword">this</span>.initialCounter &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>2、定义一个计算属性，处理 prop 的值并返回：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">props: [<span class="string">'size'</span>],</div><div class="line">computed: &#123;</div><div class="line">  normalizedSize: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.size.trim().toLowerCase()</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><blockquote><ul><li>注意在 JavaScript 中对象和数组是引用类型，指向同一个内存空间，如果 prop 是一个对象或数组，在子组件内部改变它会影响父组件的状态。</li></ul></blockquote><h4 id="Prop-验证"><a href="#Prop-验证" class="headerlink" title="Prop 验证"></a>Prop 验证</h4><p>要指定验证规则，需要用对象的形式来定义 prop，而不能用字符串数组：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line">props: &#123;</div><div class="line">    <span class="comment">// 基础类型检测 (`null` 指允许任何类型)</span></div><div class="line">    propA: <span class="built_in">Number</span>,</div><div class="line">    <span class="comment">// 可能是多种类型</span></div><div class="line">    propB: [<span class="built_in">String</span>, <span class="built_in">Number</span>],</div><div class="line">    <span class="comment">// 必传且是字符串</span></div><div class="line">    propC: &#123;</div><div class="line">      type: <span class="built_in">String</span>,</div><div class="line">      required: <span class="literal">true</span></div><div class="line">    &#125;,</div><div class="line">    <span class="comment">// 数值且有默认值</span></div><div class="line">    propD: &#123;</div><div class="line">      type: <span class="built_in">Number</span>,</div><div class="line">      <span class="keyword">default</span>: <span class="number">100</span></div><div class="line">    &#125;,</div><div class="line">    <span class="comment">// 数组/对象的默认值应当由一个工厂函数返回</span></div><div class="line">    propE: &#123;</div><div class="line">      type: <span class="built_in">Object</span>,</div><div class="line">      <span class="keyword">default</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="keyword">return</span> &#123; <span class="attr">message</span>: <span class="string">'hello'</span> &#125;</div><div class="line">      &#125;</div><div class="line">    &#125;,</div><div class="line">    <span class="comment">// 自定义验证函数</span></div><div class="line">    propF: &#123;</div><div class="line">      validator: <span class="function"><span class="keyword">function</span> (<span class="params">value</span>) </span>&#123;</div><div class="line">        <span class="keyword">return</span> value &gt; <span class="number">10</span></div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">  &#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;组件最常见的就是形成父子组件的关系，父组件可能要给子组件下发数据，子组件则可能要将它内部发生的事情告知父组件。&lt;/p&gt;
&lt;p&gt;在 Vue 中，父子组件的关系可以总结为 prop 向下传递，事件向上传递。父组件通过 prop 给子组件下发数据，子组件通过事件给父组件发送消息。
      
    
    </summary>
    
      <category term="Vue" scheme="https://songzhiguo.github.io/blogs/categories/Vue/"/>
    
    
  </entry>
  
  <entry>
    <title>构造函数与原型对象</title>
    <link href="https://songzhiguo.github.io/blogs/2018/03/15/setup-obj/"/>
    <id>https://songzhiguo.github.io/blogs/2018/03/15/setup-obj/</id>
    <published>2018-03-15T06:19:08.000Z</published>
    <updated>2018-05-25T04:28:40.172Z</updated>
    
    <content type="html"><![CDATA[<h3 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a>构造函数</h3><p>按照惯例，构造函数始终都应该以一个大写字母开头，而非构造函数则应该以一个小写字母开头。</p><p>构造函数本身也是函数，只不过可以用来创建对象而已</p><p>创建实例对象，需要使用new操作符，以这种方式调用构造函数实际上会经历以下4个步骤</p><blockquote><ul><li>1、创建一个新对象；</li><li>2、将构造函数的作用域赋值给新对象（因此this就指向了这个新对象）；</li><li>3、执行构造函数中的代码（为这个新对象添加属性）；</li><li>4、返回新对象</li></ul></blockquote><h3 id="原型对象"><a href="#原型对象" class="headerlink" title="原型对象"></a>原型对象</h3><p>我们创建的每一个函数都有一个prototype,这个属性指向函数的原型对象,在默认情况下，所有原型对象都<br>会自动获得一个constructor（构造函数）属性。这个属性包含一个指向prototype属性所在函数的指针</p><p>创建了自定义的构造函数之后，其原型对象默认只会取得constructor属性；至于其他方法，则都是从Object继承而来的。</p><p>当调用构造函数创建一个新实例后，该实例的内部将包含一个指针（内部属性），指向构造函数的原型对象。<br>ECMA-262第5版中管这个指针叫[[Prototype]]。虽然在脚本中没有标准的方式访问[[Prototype]]，但Firefox、Safari和Chrome在每个对象上都支持一个属性<strong>proto</strong>；这个连接存在于实例与构造函数的原型对象之间，而不是存在于实例与构造函数之间。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>)</span>&#123;&#125;;</div><div class="line">Person.prototype.name = “Nicholas”;</div><div class="line">Person.prototype.age = <span class="number">29</span>;</div><div class="line">Person.prototype.job = “Software Engineer”;</div><div class="line">Person.prototype.sayName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">alert(<span class="keyword">this</span>.name);</div><div class="line">&#125;;</div><div class="line"><span class="keyword">var</span> person1 = <span class="keyword">new</span> Person();</div><div class="line">person1.sayName(); <span class="comment">//“Nicholas”</span></div><div class="line"><span class="keyword">var</span> person2 = <span class="keyword">new</span> Person();</div><div class="line">person2.sayName(); <span class="comment">//“Nicholas”</span></div><div class="line">alert(person1.sayName == person2.sayName); <span class="comment">//true</span></div></pre></td></tr></table></figure><p>以前面使用Person构造函数和Person.prototype创建实例的代码为例，如图</p><p><img src="https://songzhiguo.github.io/lib/images/prototype.jpg" alt=""></p><p>在此，Person.prototype指向了原型对象，而Person.prototype.constructor又指回了Person。</p><p>原型对象中除了包含constructor属性之外，还包括后来添加的其他属性。Person的每个实例——person1和person2都包含一个内部属性，该属性仅仅指向了Person.prototype；换句话说，它们与构造函数没有直接的关系。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;构造函数&quot;&gt;&lt;a href=&quot;#构造函数&quot; class=&quot;headerlink&quot; title=&quot;构造函数&quot;&gt;&lt;/a&gt;构造函数&lt;/h3&gt;&lt;p&gt;按照惯例，构造函数始终都应该以一个大写字母开头，而非构造函数则应该以一个小写字母开头。&lt;/p&gt;
&lt;p&gt;构造函数本身也是函数，
      
    
    </summary>
    
    
      <category term="javascript" scheme="https://songzhiguo.github.io/blogs/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>python学习网站</title>
    <link href="https://songzhiguo.github.io/blogs/2018/02/12/pythonWeb/"/>
    <id>https://songzhiguo.github.io/blogs/2018/02/12/pythonWeb/</id>
    <published>2018-02-12T01:19:58.000Z</published>
    <updated>2018-03-12T04:36:40.684Z</updated>
    
    <content type="html"><![CDATA[<h4 id="国内python学习网站"><a href="#国内python学习网站" class="headerlink" title="国内python学习网站"></a>国内python学习网站</h4><table><thead><tr><th>名称</th><th>地址</th><th>介绍</th></tr></thead><tbody><tr><td>PythonTip</td><td><a href="http://www.pythontip.com/" target="_blank" rel="external">http://www.pythontip.com/</a></td><td>提供python入门教程， 技术交流， 在线实践等一条龙服务</td></tr><tr><td>菜鸟教程</td><td><a href="http://www.runoob.com/python/python-tutorial.html" target="_blank" rel="external">http://www.runoob.com/python/python-tutorial.html</a></td><td>在线python学习–可编辑运行的</td></tr><tr><td>编程教室</td><td><a href="http://crossincode.com/home/" target="_blank" rel="external">http://crossincode.com/home/</a></td><td>Crossin的编程教室 - 编程世界的新手村</td></tr><tr><td>菜鸟工具</td><td><a href="https://c.runoob.com/compile/9" target="_blank" rel="external">https://c.runoob.com/compile/9</a></td><td>在线Python编辑器</td></tr><tr><td>代码测试</td><td><a href="http://www.dooccn.com/python3/" target="_blank" rel="external">http://www.dooccn.com/python3/</a></td><td>在线Python编辑器</td></tr><tr><td>在线工具</td><td><a href="https://tool.lu/coderunner/" target="_blank" rel="external">https://tool.lu/coderunner/</a></td><td>在线Python编辑器</td></tr></tbody></table><h4 id="国外python学习网站"><a href="#国外python学习网站" class="headerlink" title="国外python学习网站"></a>国外python学习网站</h4><table><thead><tr><th>名称</th><th>地址</th><th>介绍</th></tr></thead><tbody><tr><td>python官网</td><td><a href="https://www.python.org/" target="_blank" rel="external">https://www.python.org/</a></td><td>python官网</td></tr><tr><td>Python指南</td><td><a href="http://docs.python-guide.org/" target="_blank" rel="external">http://docs.python-guide.org/</a></td><td>Python指南对于Python的方方面面都有指导作用</td></tr><tr><td>codecademy</td><td><a href="https://www.codecademy.com/" target="_blank" rel="external">https://www.codecademy.com/</a></td><td>在线python学习—可编辑运行的</td></tr><tr><td>codingbat</td><td><a href="http://codingbat.com/python" target="_blank" rel="external">http://codingbat.com/python</a></td><td>在线python学习—可编辑运行的</td></tr><tr><td>pyschools</td><td><a href="http://www.pyschools.com/" target="_blank" rel="external">http://www.pyschools.com/</a></td><td>在线python学习—可编辑运行的</td></tr><tr><td>codeschool</td><td><a href="https://www.codeschool.com/courses/try-python" target="_blank" rel="external">https://www.codeschool.com/courses/try-python</a></td><td>在线python学习—可编辑运行的</td></tr><tr><td>pythontutor</td><td><a href="http://www.pythontutor.com/" target="_blank" rel="external">http://www.pythontutor.com/</a></td><td>通过可视化代码执行来学习编程</td></tr><tr><td>tutorialspoint</td><td><a href="http://www.tutorialspoint.com/python/" target="_blank" rel="external">http://www.tutorialspoint.com/python/</a></td><td>在线python学习–可编辑运行的</td></tr><tr><td>learnpython</td><td><a href="http://www.learnpython.org/" target="_blank" rel="external">http://www.learnpython.org/</a></td><td>在线python学习–可编辑运行的</td></tr><tr><td>CheckiO</td><td><a href="https://py.checkio.org/" target="_blank" rel="external">https://py.checkio.org/</a></td><td>闯关游戏类的python在线编辑网站</td></tr></tbody></table><h4 id="国内少儿学习编程的网站"><a href="#国内少儿学习编程的网站" class="headerlink" title="国内少儿学习编程的网站"></a>国内少儿学习编程的网站</h4><table><thead><tr><th>名称</th><th>地址</th><th>介绍</th></tr></thead><tbody><tr><td>少儿编程网</td><td><a href="http://www.kidscode.cn/python" target="_blank" rel="external">http://www.kidscode.cn/python</a></td><td>面向少儿的python教程</td></tr><tr><td>编玩边学</td><td><a href="https://www.codepku.com/" target="_blank" rel="external">https://www.codepku.com/</a></td><td>少儿编程编学边玩</td></tr><tr><td>编程猫</td><td><a href="https://hi.codemao.cn/home" target="_blank" rel="external">https://hi.codemao.cn/home</a></td><td>少儿学编程</td></tr><tr><td>helloworldroom</td><td><a href="http://www.helloworldroom.com/" target="_blank" rel="external">http://www.helloworldroom.com/</a></td><td>少儿编程网校</td></tr><tr><td>西瓜创客</td><td><a href="https://www.xiguacity.cn/main/home" target="_blank" rel="external">https://www.xiguacity.cn/main/home</a></td><td>少儿 Scratch 编程营</td></tr><tr><td>码上玩</td><td><a href="http://www.code666.com/" target="_blank" rel="external">http://www.code666.com/</a></td><td>少儿编程网校</td></tr><tr><td>码趣学院</td><td><a href="http://www.codingmarch.com/" target="_blank" rel="external">http://www.codingmarch.com/</a></td><td>少儿编程教育</td></tr><tr><td>酷拼编程</td><td><a href="http://www.kidsprogram.com.cn/" target="_blank" rel="external">http://www.kidsprogram.com.cn/</a></td><td>开启少儿编程之路</td></tr><tr><td>少儿编程</td><td><a href="http://www.shaoerbianchengwang.com/" target="_blank" rel="external">http://www.shaoerbianchengwang.com/</a></td><td>专注少儿编程教育培训</td></tr><tr><td>编程教育</td><td><a href="http://www.shaoerbc.org/" target="_blank" rel="external">http://www.shaoerbc.org/</a></td><td>少儿教育媒体</td></tr><tr><td>编程中国</td><td><a href="http://codechina.me/" target="_blank" rel="external">http://codechina.me/</a></td><td>儿童编程</td></tr><tr><td>童程童美</td><td><a href="http://www.it61.cn/" target="_blank" rel="external">http://www.it61.cn/</a></td><td>少儿教育</td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;国内python学习网站&quot;&gt;&lt;a href=&quot;#国内python学习网站&quot; class=&quot;headerlink&quot; title=&quot;国内python学习网站&quot;&gt;&lt;/a&gt;国内python学习网站&lt;/h4&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名称&lt;/th&gt;

      
    
    </summary>
    
      <category term="python" scheme="https://songzhiguo.github.io/blogs/categories/python/"/>
    
    
      <category term="python" scheme="https://songzhiguo.github.io/blogs/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>小程序学习笔记</title>
    <link href="https://songzhiguo.github.io/blogs/2018/02/08/small-program/"/>
    <id>https://songzhiguo.github.io/blogs/2018/02/08/small-program/</id>
    <published>2018-02-08T03:28:47.000Z</published>
    <updated>2018-05-25T04:28:46.439Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><p>微信小程序很小，安装包体积不超过1M，实际上，当用户点击小程序到打开已经经历了从下载到安装，只是这个过程很快，</p><p>微信小程序使用流程简单，跨平台使用</p><h3 id="小程序适合做什么样的应用？"><a href="#小程序适合做什么样的应用？" class="headerlink" title="小程序适合做什么样的应用？"></a>小程序适合做什么样的应用？</h3><blockquote><ul><li>三个特点：</li><li>1、业务逻辑简单，用完即走</li><li>2、使用频率低</li><li>3、性能要求不高</li></ul></blockquote><p>不适合：<br>社区型、直播、复杂手游</p><p>适合：<br>订餐、打车<br>大型应用可拆分部分功能</p><h3 id="移动设备的分辨率与rpx"><a href="#移动设备的分辨率与rpx" class="headerlink" title="移动设备的分辨率与rpx"></a>移动设备的分辨率与rpx</h3><p><img src="https://songzhiguo.github.io/lib/images/px.jpg" alt=""></p><p>pt也称为逻辑分辨率<br>1个pt可以有1个px构成，也可以有2个，还可以有3个甚至更多组成</p><p>pt的大小和屏幕尺寸有关系，简单可以理解为长度和视觉单位</p><p>px指物理分辨率，和屏幕尺寸没有关系。</p><h4 id="小程序如何做不同分辨率设备的自适应"><a href="#小程序如何做不同分辨率设备的自适应" class="headerlink" title="小程序如何做不同分辨率设备的自适应"></a>小程序如何做不同分辨率设备的自适应</h4><p>以iphone6的物理像素750x1334为视觉稿进行设计，而在小程序中使用rpx为单位</p><p>iphone6下 1px = 1rpx = 0.5pt</p><p>使用rpx，小程序会自动在不同分辨率下进行转换，而使用px为单位不会</p><p>不是所有的单位都适合用rpx</p><p>事件中target指的是当前点击的组件 和currentTarget 指的是时间捕获的组件</p><h3 id="页面传参"><a href="#页面传参" class="headerlink" title="页面传参"></a>页面传参</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">view</span> <span class="attr">catchtap</span>=<span class="string">'onMoreTap'</span> <span class="attr">class</span>=<span class="string">'more'</span> <span class="attr">data-category</span>=<span class="string">"&#123;&#123;catetoryTitle&#125;&#125;"</span>&gt;</span></div></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 传参</span></div><div class="line">onMoreTap: <span class="function"><span class="keyword">function</span>(<span class="params">event</span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> category = enent.currentTarget.dataset.category;</div><div class="line">    wx.navigateTo(&#123;</div><div class="line">    url: <span class="string">"more-movies/more-movies?category="</span> + category</div><div class="line">    &#125;)</div><div class="line">&#125;</div><div class="line"><span class="comment">// 获取</span></div><div class="line">onLoad: <span class="function"><span class="keyword">function</span> (<span class="params">options</span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> category = options.category;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="动态设置导航栏标题"><a href="#动态设置导航栏标题" class="headerlink" title="动态设置导航栏标题"></a>动态设置导航栏标题</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">onReady: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  wx.setNavigationBarTitle(&#123;</div><div class="line">    title: <span class="keyword">this</span>.data.navigateTitle</div><div class="line">  &#125;)</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;微信小程序很小，安装包体积不超过1M，实际上，当用户点击小程序到打开已经经历了从下载到安装，只是这个过程很快，&lt;/p&gt;
&lt;p&gt;微信小程序使用流程简单，跨平台使用&lt;/p&gt;
&lt;h3 id=&quot;小程序适合做什么样的应用？&quot;&gt;&lt;a href=&quot;#小
      
    
    </summary>
    
      <category term="program" scheme="https://songzhiguo.github.io/blogs/categories/program/"/>
    
    
      <category term="javascript" scheme="https://songzhiguo.github.io/blogs/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>Promise对象</title>
    <link href="https://songzhiguo.github.io/blogs/2018/01/19/es6-Promise/"/>
    <id>https://songzhiguo.github.io/blogs/2018/01/19/es6-Promise/</id>
    <published>2018-01-19T04:36:26.000Z</published>
    <updated>2018-03-12T04:35:27.087Z</updated>
    
    <content type="html"><![CDATA[<p>ES6学习笔记：Promise对象<br><a id="more"></a></p><h3 id="Promise的含义"><a href="#Promise的含义" class="headerlink" title="Promise的含义"></a>Promise的含义</h3><p>Promise是异步编程的一种解决方案</p><p>Promise简单说就是一个容器，里面保存着某个未来才会结束的事件（通常是一个异步操作）的结果</p><p>从语法上说，Promise是一个对象，从它可以获取异步操作的消息。</p><p>Promise对象有以下两个特点</p><p>（1）、对象的状态不受外界的影响。Promise对象代表一个异步操作，有三种状态：pending(进行中)、fulfilled(已成功)和rejected(已失败)。只有异步操作的结果，可以决定当前是哪一个状态，任何其他操作都无法改变这个状态。</p><p>（2）、一旦状态改变，就不会在变，任何时候都可以得到这个结果。状态改变，只有两种可能，从pending变为fulfilled和从pending变为rejected。只要这两种情况发生，状态就会凝固，不会在变了会一直保持这个结果，这时就称为resolved</p><p>Promise的缺点：首先，无法取消Promise，一旦新建它就会立即执行，无法中途取消。其次，如果不设置回调函数，promise内部抛出的错误，不会反应到外部。第三，当处于pending状态时，无法得知进展到哪一个阶段</p><h3 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法"></a>基本用法</h3><p>ES6规定，Promise对象是一个构造函数，用来生成构造函数实例。</p><p>Promise构造函数接受一个函数作为一个参数，该函数的两个参数分别是resolve和reject。他们是两个函数。由javascript引擎提供，不用自己部署。</p><p>resolve函数的作用是，将promise对象的状态从“未完成”变为“成功”，在异步操作成功时调用，并将异步操作的结果，作为参数传递出去。</p><p>jeject函数的作用是，将promise对象的状态从“未完成”变为“失败”，在异步操作失败时调用，并将异步操作报出的错误，作为参数传递出去。</p><h3 id="promise-prototype-then"><a href="#promise-prototype-then" class="headerlink" title="promise.prototype.then()"></a>promise.prototype.then()</h3><p>Promise实例具有then方法，也就是说，then方法是定义在原型对象promise.prototype上的，它的作用是为promise实例添加状态改变时的回调函数</p><p>then方法的第一个参数是resloved状态的回调函数，第二个参数（可选）是rejected状态的回调函数</p><p>then方法返回的是一个新的Promise实例（注意，不是原来那个promise实例）。因此可以采用链式写法，既then方法后面在调用另外一个then方法</p><h3 id="promise-prototype-catch"><a href="#promise-prototype-catch" class="headerlink" title="promise.prototype.catch()"></a>promise.prototype.catch()</h3><p>promise.prototype.catch方法是.then(null,rejected)的别名，用于指定发生错误时的回调函数</p><p>promise抛出一个错误，就被catch方法指定的回调函数捕获</p><p>reject方法的作用，等同于抛出错误，如果Promise状态已经变成resolved，在抛出错误时无效的。</p><p>promise对象的错误具有“冒泡”性质，会一直向后传递，直到被捕获为止，也就是说，错误总是会被下一个catch语句捕获</p><p>一般来说，不要在then方法里面定义 reject 状态的回调函数（即then的第二个参数），总是使用catch方法。</p><p>Promise 内部的错误不会影响到 Promise 外部的代码，通俗的说法就是“Promise 会吃掉错误”。</p><p>catch方法之中，还能再抛出错误。</p><h3 id="promise-all"><a href="#promise-all" class="headerlink" title="promise.all()"></a>promise.all()</h3><p>promise.all() 方法用于将多个Promise实例，包装成一个新的promise实例</p><p>promise.all()方法接受一个数组作为参数，数组成员都是promise实例，如果不是，就会先调用promise.resolve方法，将参数转为promise实例，再进一步处理。(promise.all方法的参数可以不是数组，但必须具有Iterator接口，且返回的每个成员都是promise实例)</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> p = <span class="built_in">Promise</span>.all([p1, p2, p3]);</div></pre></td></tr></table></figure><p>p的状态由p1、p2、p3决定，分成两种情况。</p><p>（1）只有p1、p2、p3的状态都变成fulfilled，p的状态才会变成fulfilled，此时p1、p2、p3的返回值组成一个数组，传递给p的回调函数。</p><p>（2）只要p1、p2、p3之中有一个被rejected，p的状态就变成rejected，此时第一个被reject的实例的返回值，会传递给p的回调函数。</p><p>注意，如果作为参数的 Promise 实例，自己定义了catch方法，那么它一旦被rejected，并不会触发Promise.all()的catch方法。</p><h3 id="promise-race"><a href="#promise-race" class="headerlink" title="promise.race()"></a>promise.race()</h3><p>promise.race()同样是将多个promise实例，包装成一个新的promise实例</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> p = <span class="built_in">Promise</span>.race([p1, p2, p3]);</div></pre></td></tr></table></figure><p>上面代码中，只要p1,p2,p3之中有一个实例率先改变状态，p的状态就跟着改变。那个率先改变的promise实例的返回值，就传递给p的回调函数。</p><p>Promise.race方法的参数与Promise.all方法一样，如果不是 Promise 实例，就会先调用下面讲到的Promise.resolve方法，将参数转为 Promise 实例，再进一步处理。</p><h3 id="promise-resolve"><a href="#promise-resolve" class="headerlink" title="promise.resolve()"></a>promise.resolve()</h3><p>有时需要将现有对象转为promise对象，promise.resolve方法就起到这个作用</p><p>promise.resolve等价于下面的写法</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">Promise</span>.resolve(<span class="string">'foo'</span>)</div><div class="line"><span class="comment">// 等价于</span></div><div class="line"><span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="params">resolve</span> =&gt;</span> resolve(<span class="string">'foo'</span>))</div></pre></td></tr></table></figure><p>promise.resolve方法的参数分成四种情况</p><h4 id="（1）参数是一个-Promise-实例"><a href="#（1）参数是一个-Promise-实例" class="headerlink" title="（1）参数是一个 Promise 实例"></a>（1）参数是一个 Promise 实例</h4><p>如果参数是 Promise 实例，那么Promise.resolve将不做任何修改、原封不动地返回这个实例。</p><h4 id="（2）参数是一个thenable对象"><a href="#（2）参数是一个thenable对象" class="headerlink" title="（2）参数是一个thenable对象"></a>（2）参数是一个thenable对象</h4><p>thenable对象指的是具有then方法的对象，比如下面这个对象。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> thenable = &#123;</div><div class="line">    then: <span class="function"><span class="keyword">function</span>(<span class="params">resolve, reject</span>) </span>&#123;</div><div class="line">        resolve(<span class="number">42</span>);</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure><p>Promise.resolve方法会将这个对象转为 Promise 对象，然后就立即执行thenable对象的then方法。</p><h4 id="（3）参数不是具有then方法的对象，或根本就不是对象"><a href="#（3）参数不是具有then方法的对象，或根本就不是对象" class="headerlink" title="（3）参数不是具有then方法的对象，或根本就不是对象"></a>（3）参数不是具有then方法的对象，或根本就不是对象</h4><p>如果参数是一个原始值，或者是一个不具有then方法的对象，则Promise.resolve方法返回一个新的 Promise 对象，状态为resolved。</p><h4 id="（4）不带有任何参数"><a href="#（4）不带有任何参数" class="headerlink" title="（4）不带有任何参数"></a>（4）不带有任何参数</h4><p>Promise.resolve方法允许调用时不带参数，直接返回一个resolved状态的 Promise 对象。</p><p>所以，如果希望得到一个 Promise 对象，比较方便的方法就是直接调用Promise.resolve方法。</p><h3 id="Promise-reject"><a href="#Promise-reject" class="headerlink" title="Promise.reject()"></a>Promise.reject()</h3><p>Promise.reject(reason)方法也会返回一个新的 Promise 实例，该实例的状态为rejected。</p><p>注意，Promise.reject()方法的参数，会原封不动地作为reject的理由，变成后续方法的参数。这一点与Promise.resolve方法不一致。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;ES6学习笔记：Promise对象&lt;br&gt;
    
    </summary>
    
      <category term="javascript" scheme="https://songzhiguo.github.io/blogs/categories/javascript/"/>
    
    
      <category term="javascript" scheme="https://songzhiguo.github.io/blogs/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>Set和Map数据结构</title>
    <link href="https://songzhiguo.github.io/blogs/2018/01/18/es6-set-map/"/>
    <id>https://songzhiguo.github.io/blogs/2018/01/18/es6-set-map/</id>
    <published>2018-01-18T07:30:16.000Z</published>
    <updated>2018-03-12T04:35:31.717Z</updated>
    
    <content type="html"><![CDATA[<p>ES6学习笔记：Set和Map数据结构<br><a id="more"></a></p><h3 id="Set"><a href="#Set" class="headerlink" title="Set"></a>Set</h3><h4 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法"></a>基本用法</h4><p>ES6提供的新的数据结构Set。他类似于数组，但是成员值都是唯一值，没有重复值</p><p>Set本身是一个构造函数，用来生成Set数据结构</p><p>Set函数可以接受一个数组（或者具有iterable接口的其他数据结构）作为参数，用来初始化。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 去除数组的重复成员</span></div><div class="line">[...new <span class="built_in">Set</span>(array)]</div></pre></td></tr></table></figure><p>向set加入值的时候，不会发生类型转换，set内部判断两个值是否不同，适用算法叫做“Same-value-equality”,他类似精确相等运算符(===)，主要区别是NaN等于自身，而精确相等运算符认为NaN不等于自身</p><h4 id="Set实例的属性和方法"><a href="#Set实例的属性和方法" class="headerlink" title="Set实例的属性和方法"></a>Set实例的属性和方法</h4><p>Set.prototype.constructor：构造函数，默认就是Set函数</p><p>Set.prototype.size：返回Set实例的成员总数。</p><p>Set实例方法分为两大类：</p><p>一、操作方法（用于操作数据）</p><p>add(values)：添加某个值，返回set结构本身</p><p>delete(values)：删除某个值，返回一个布尔值，表示删除是否成功</p><p>has(values)：返回一个布尔值，表示该值是否为Set成员。</p><p>clear()：清楚所有成员，没有返回值。</p><p>Array.from方法可以将Set结构转为数组。</p><p>二、遍历操作</p><p>Set结构的实例四个遍历方法</p><p>keys()：返回键名的遍历器</p><p>values()：返回键值的遍历器</p><p>entries()：返回键值对的遍历器</p><p>forEach()：使用回调函数遍历每个成员</p><p>由于 Set 结构没有键名，只有键值（或者说键名和键值是同一个值），所以keys方法和values方法的行为完全一致。</p><p>Set结构的实例与数组一样，也拥有forEach方法，用于对每个成员执行某种操作，没有返回值。</p><p>Set结构的实例方法forEach参数与数组forEach一致，依次为键名、键值、集合本身。另外，forEach方法还可以有第二个参数，表示绑定处理函数的this对象</p><h3 id="WeakSet"><a href="#WeakSet" class="headerlink" title="WeakSet"></a>WeakSet</h3><p>WeakSet结构与Set结构类似，也是不重复的值的集合。</p><p>WeakSet结构与Set结构有两个区别，首先WeakSet成员只能是对象，而不能是其他类型的值</p><h4 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h4><p>WeakSet是一个构造函数，可以使用new命令，创建WeakSet数据结构</p><p>作为构造函数，WeakSet可以接受一个数组或类似数组的对象作为参数。该数组的所有成员，都会自动成为WeakSet实例的对象的成员。</p><p>注意，是数组参数的成员成为WeakSet的成员，而不是数组本身，数组参数成员只能是对象</p><p>WeakSet结构有以下三个方法。</p><p>WeakSet.prototype.add(values)：向 WeakSet 实例添加一个新成员。</p><p>WeakSet.prototype.delete(value)：清除 WeakSet 实例的指定成员。</p><p>WeakSet.prototype.has(value)：返回一个布尔值，表示某个值是否在 WeakSet 实例之中。</p><p>WeakSet 没有size属性，没有办法遍历它的成员。</p><h3 id="Map"><a href="#Map" class="headerlink" title="Map"></a>Map</h3><h4 id="含义和基本用法"><a href="#含义和基本用法" class="headerlink" title="含义和基本用法"></a>含义和基本用法</h4><p>ES6 提供了 Map 数据结构，它类似于对象，也是键值对的集合，但是键的范围不限于字符串，各种类型的值都可以当做键。</p><p>作为构造函数，Map 也可以接受一个数组作为参数。该数组的成员是一个个表示键值对的数组。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> map = <span class="keyword">new</span> <span class="built_in">Map</span>([</div><div class="line">    [<span class="string">'name'</span>, <span class="string">'张三'</span>],</div><div class="line">    [<span class="string">'title'</span>, <span class="string">'Author'</span>]</div><div class="line">]);</div><div class="line"></div><div class="line">map.size <span class="comment">// 2</span></div><div class="line">map.has(<span class="string">'name'</span>) <span class="comment">// true</span></div><div class="line">map.get(<span class="string">'name'</span>) <span class="comment">// "张三"</span></div><div class="line">map.has(<span class="string">'title'</span>) <span class="comment">// true</span></div><div class="line">map.get(<span class="string">'title'</span>) <span class="comment">// "Author"</span></div></pre></td></tr></table></figure><p>Set 对象和 Map 对象当作Map构造函数的参数都生成了新的 Map 对象。</p><p>如果对同一个键多次赋值，后面的值将覆盖前面的值。</p><p>如果读取一个未知的键，则返回undefined。</p><p>注意，只有对同一个对象的引用，Map 结构才将其视为同一个键。这一点要非常小心。</p><h4 id="实例的属性和操作方法"><a href="#实例的属性和操作方法" class="headerlink" title="实例的属性和操作方法"></a>实例的属性和操作方法</h4><p>(1)size属性返回 Map 结构的成员总数。</p><p>(2)set(key, value)方法设置键名key对应的键值为value，然后返回整个 Map 结构。如果key已经有值，则键值会被更新，否则就新生成该键。</p><p>set方法返回的是当前的Map对象，因此可以采用链式写法。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> map = <span class="keyword">new</span> <span class="built_in">Map</span>()</div><div class="line">    .set(<span class="number">1</span>, <span class="string">'a'</span>)</div><div class="line">    .set(<span class="number">2</span>, <span class="string">'b'</span>)</div><div class="line">    .set(<span class="number">3</span>, <span class="string">'c'</span>);</div></pre></td></tr></table></figure><p>(3)get(key)方法读取key对应的键值，如果找不到key，返回undefined。</p><p>(4)has(key)方法返回一个布尔值，表示某个键是否在当前 Map 对象之中。</p><p>(5)delete(key)delete方法删除某个键，返回true。如果删除失败，返回false。</p><p>(6)clear()clear方法清除所有成员，没有返回值。</p><h4 id="遍历方法"><a href="#遍历方法" class="headerlink" title="遍历方法"></a>遍历方法</h4><p>Map 结构原生提供三个遍历器生成函数和一个遍历方法。</p><p>keys()：返回键名的遍历器。</p><p>values()：返回键值的遍历器。</p><p>entries()：返回所有成员的遍历器。</p><p>forEach()：遍历 Map 的所有成员。</p><p>Map forEach方法，与数组的forEach方法类似，也可以实现遍历。forEach方法还可以接受第二个参数，用来绑定this。</p><h4 id="与其他数据结构转换"><a href="#与其他数据结构转换" class="headerlink" title="与其他数据结构转换"></a>与其他数据结构转换</h4><p>(1)Map 转为数组</p><p>Map 转为数组最方便的方法，就是使用扩展运算符（…）。</p><p>(2)数组 转为 Map</p><p>将数组传入 Map 构造函数，就可以转为 Map。</p><p>(3)Map 转为对象</p><p>如果所有 Map 的键都是字符串，它可以转为对象。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">strMapToObj</span>(<span class="params">strMap</span>) </span>&#123;</div><div class="line">    <span class="keyword">let</span> obj = <span class="built_in">Object</span>.create(<span class="literal">null</span>);</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> [k,v] <span class="keyword">of</span> strMap) &#123;</div><div class="line">        obj[k] = v;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> obj;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">const</span> myMap = <span class="keyword">new</span> <span class="built_in">Map</span>()</div><div class="line">    .set(<span class="string">'yes'</span>, <span class="literal">true</span>)</div><div class="line">    .set(<span class="string">'no'</span>, <span class="literal">false</span>);</div><div class="line">strMapToObj(myMap)</div></pre></td></tr></table></figure><p>(4)对象转为 Map</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">objToStrMap</span>(<span class="params">obj</span>) </span>&#123;</div><div class="line">    <span class="keyword">let</span> strMap = <span class="keyword">new</span> <span class="built_in">Map</span>();</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> k <span class="keyword">of</span> <span class="built_in">Object</span>.keys(obj)) &#123;</div><div class="line">        strMap.set(k, obj[k]);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> strMap;</div><div class="line">&#125;</div><div class="line"></div><div class="line">objToStrMap(&#123;<span class="attr">yes</span>: <span class="literal">true</span>, <span class="attr">no</span>: <span class="literal">false</span>&#125;)</div></pre></td></tr></table></figure><p>(5)Map 转为 JSON</p><p>Map 转为 JSON 要区分两种情况。一种情况是，Map 的键名都是字符串，这时可以选择转为对象 JSON。</p><p>另一种情况是，Map 的键名有非字符串，这时可以选择转为数组 JSON。</p><h3 id="WeakMap"><a href="#WeakMap" class="headerlink" title="WeakMap"></a>WeakMap</h3><h4 id="含义"><a href="#含义" class="headerlink" title="含义"></a>含义</h4><p>WeakMap结构与Map结构类似，也是用于生成键值对的集合</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// WeakMap 可以使用 set 方法添加成员</span></div><div class="line"><span class="keyword">const</span> wm1 = <span class="keyword">new</span> <span class="built_in">WeakMap</span>();</div><div class="line"><span class="keyword">const</span> key = &#123;<span class="attr">foo</span>: <span class="number">1</span>&#125;;</div><div class="line">wm1.set(key, <span class="number">2</span>);</div><div class="line">wm1.get(key) <span class="comment">// 2</span></div><div class="line"></div><div class="line"><span class="comment">// WeakMap 也可以接受一个数组，</span></div><div class="line"><span class="comment">// 作为构造函数的参数</span></div><div class="line"><span class="keyword">const</span> k1 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</div><div class="line"><span class="keyword">const</span> k2 = [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>];</div><div class="line"><span class="keyword">const</span> wm2 = <span class="keyword">new</span> <span class="built_in">WeakMap</span>([[k1, <span class="string">'foo'</span>], [k2, <span class="string">'bar'</span>]]);</div><div class="line">wm2.get(k2) <span class="comment">// "bar"</span></div></pre></td></tr></table></figure><h5 id="WeakMap与Map的区别有两点。"><a href="#WeakMap与Map的区别有两点。" class="headerlink" title="WeakMap与Map的区别有两点。"></a>WeakMap与Map的区别有两点。</h5><p>首先WeakMap只接受对象作为键名除外，不接受其他类型的值作为键名。</p><p>其次WeakMap的键名所指向的对象，不计入垃圾回收机制</p><p>WeakMap的专用场合就是，它的键所对应的对象，可能会在将来消失。WeakMap结构有助于防止内存泄漏。</p><p>注意，WeakMap 弱引用的只是键名，而不是键值。键值依然是正常引用。</p><h4 id="WeakMap-的语法"><a href="#WeakMap-的语法" class="headerlink" title="WeakMap 的语法"></a>WeakMap 的语法</h4><p>WeakMap 与 Map 在 API 上的区别主要是两个，一是没有遍历操作（即没有key()、values()和entries()方法），也没有size属性。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;ES6学习笔记：Set和Map数据结构&lt;br&gt;
    
    </summary>
    
      <category term="javascript" scheme="https://songzhiguo.github.io/blogs/categories/javascript/"/>
    
    
      <category term="javascript" scheme="https://songzhiguo.github.io/blogs/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>ES6学习笔记：Symbol</title>
    <link href="https://songzhiguo.github.io/blogs/2018/01/18/es6-symbol/"/>
    <id>https://songzhiguo.github.io/blogs/2018/01/18/es6-symbol/</id>
    <published>2018-01-18T03:48:36.000Z</published>
    <updated>2018-03-12T04:35:38.150Z</updated>
    
    <content type="html"><![CDATA[<p>ES6学习笔记：Symbol<br><a id="more"></a></p><h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>ES6引入一种新的原始数据类型，表示独一无二的值。它是javascript语言的第七种数据类型，前六种是：undefined、null、布尔值、字符串、数值、对象</p><p>symbol值通过函数生成。对象的属性名现在可以有两种类型，一种是原来就有的字符串，另外一种就是新增的symbol类型，凡是属性名属于symbol类型，就是独一无二的。</p><p>注意，symbol函数前不接受new命令，否则会报错，这是应为symbol是一个原始类型的值，不是对象。基本是，symbol是一种类似字符串的数据类型</p><p>symbol函数可以接受一个字符串作为参数，表示对symbol实例的描述。</p><p>如果symbol的参数是一个对象，就会调用该对象的tostring方法，将其转为字符串，然后才生成一个symbol值</p><p>注意，symbol函数的参数只是表示当前symbol值的描述，相同参数的symbol函数的返回值是不相等的</p><p>symbol值不能与其他类型的值进行运算，会报错</p><p>symbol值可以显式的转为字符串，也可以转为布尔值，但不能转为数值。</p><h3 id="作为属性名的symbol值"><a href="#作为属性名的symbol值" class="headerlink" title="作为属性名的symbol值"></a>作为属性名的symbol值</h3><p>symbol值作为对象属性名时，不能用点运算。</p><p>在对象内部，使用Symbol值定义属性时，Symbol值必须放在方括号之中。</p><p>symbol值作为属性名时，该属性还是公开属性，不是私有属性</p><h3 id="实例：消除魔术字符串"><a href="#实例：消除魔术字符串" class="headerlink" title="实例：消除魔术字符串"></a>实例：消除魔术字符串</h3><p>魔术字符串指的是，在代码中多次出现，与代码形成强耦合的某一具体的字符串或者数值。</p><h3 id="属性名的遍历"><a href="#属性名的遍历" class="headerlink" title="属性名的遍历"></a>属性名的遍历</h3><p>Symbol作为属性名，该属性不会出现在for…in、for…of循环中，也不会被object.key()、object.getOwnPropertyNames()、JSON.stringify()返回，但是他也不是私有属性，有一个object.getOwnPropertySymbols方法，可以获取指定对象的所有Symobl属性名。</p><p>object.getOwnPropertySymbols方法返回一个数组，成员是当前对象的所有用作属性名的Symbol值</p><p>Reflect.ownKeys方法可以返回所有类型的键名，包括常规键名和symbol键名</p><h3 id="symbol-for-symbol-keyFor"><a href="#symbol-for-symbol-keyFor" class="headerlink" title="symbol.for(),symbol.keyFor()"></a>symbol.for(),symbol.keyFor()</h3><p>symbol.for()与symbol()这两种写法，都会生成新的Symbol,他们的区别是，前者会被登记在全局环境中供搜索，后者不会。Symbol.for()不会每次调用就返回一个新的Symbol类型的值，而是会先检查给定key是否存在，如果不存在才会创建一个新值。后者调用几次就返回几个不同的symbol值</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">Symbol</span>.for(<span class="string">"bar"</span>) === <span class="built_in">Symbol</span>.for(<span class="string">"bar"</span>)</div><div class="line"><span class="comment">// true</span></div><div class="line"></div><div class="line"><span class="built_in">Symbol</span>(<span class="string">"bar"</span>) === <span class="built_in">Symbol</span>(<span class="string">"bar"</span>)</div><div class="line"><span class="comment">// false</span></div></pre></td></tr></table></figure><p>symbol.keyFor()方法返回一个已登记的Symbol类型值的key</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> s1 = <span class="built_in">Symbol</span>.for(<span class="string">"foo"</span>);</div><div class="line"><span class="built_in">Symbol</span>.keyFor(s1) <span class="comment">// "foo"</span></div><div class="line"></div><div class="line"><span class="keyword">let</span> s2 = <span class="built_in">Symbol</span>(<span class="string">"foo"</span>);</div><div class="line"><span class="built_in">Symbol</span>.keyFor(s2) <span class="comment">// undefined</span></div></pre></td></tr></table></figure><h3 id="实例：模块的singleton模式"><a href="#实例：模块的singleton模式" class="headerlink" title="实例：模块的singleton模式"></a>实例：模块的singleton模式</h3><p>singleton模式指的是调用一个类，任何时候返回的都是同一个实例</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;ES6学习笔记：Symbol&lt;br&gt;
    
    </summary>
    
      <category term="javascript" scheme="https://songzhiguo.github.io/blogs/categories/javascript/"/>
    
    
      <category term="javascript" scheme="https://songzhiguo.github.io/blogs/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>对象的扩展</title>
    <link href="https://songzhiguo.github.io/blogs/2018/01/15/es6-object/"/>
    <id>https://songzhiguo.github.io/blogs/2018/01/15/es6-object/</id>
    <published>2018-01-15T10:48:00.000Z</published>
    <updated>2018-03-12T04:35:21.826Z</updated>
    
    <content type="html"><![CDATA[<p>ES6学习笔记：对象的扩展<br><a id="more"></a></p><h3 id="属性的简介表示法"><a href="#属性的简介表示法" class="headerlink" title="属性的简介表示法"></a>属性的简介表示法</h3><p>ES6允许直接写入变量和函数，作为对象的属性和方法，书写更加简洁</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> foo = <span class="string">'bar'</span>;</div><div class="line"><span class="keyword">const</span> baz = &#123;foo&#125;;</div><div class="line">baz <span class="comment">//&#123;foo: "bar"&#125;</span></div></pre></td></tr></table></figure><p>ES6允许在对象中，直接写变量。这时，属性名为变量名，属性值为变量的值。</p><h3 id="属性名表达式"><a href="#属性名表达式" class="headerlink" title="属性名表达式"></a>属性名表达式</h3><p>javascript定义对象的属性，有两种方法</p><p>方法一是直接用标识符作为属性名，方法二是用表达式作为属性名，这时要将表达式放在方括号内。</p><p>ES6允许字面量定义对象时，用方法二（表达式）作为对象的属性名，既把表达式放在方括号内</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> propkey = <span class="string">'foo'</span>;</div><div class="line"></div><div class="line"><span class="keyword">let</span> obj = &#123;</div><div class="line">    [prokey]: <span class="literal">true</span>,</div><div class="line">    [<span class="string">'a'</span>+<span class="string">'b'</span>]: <span class="number">123</span></div><div class="line">&#125;;</div></pre></td></tr></table></figure><p>表达式还可以定义方法名</p><p>注意，属性名表达式与简洁表示法，不能同时使用，会报错。如果表达式是一个对象，默认情况下会自动将对象转为字符串[object object]。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> keyA = &#123;<span class="attr">a</span>: <span class="number">1</span>&#125;;</div><div class="line"><span class="keyword">const</span> keyB = &#123;<span class="attr">b</span>: <span class="number">2</span>&#125;;</div><div class="line"></div><div class="line"><span class="keyword">const</span> myObject = &#123;</div><div class="line">  [keyA]: <span class="string">'valueA'</span>,</div><div class="line">  [keyB]: <span class="string">'valueB'</span></div><div class="line">&#125;;</div><div class="line"></div><div class="line">myObject <span class="comment">// Object &#123;[object Object]: "valueB"&#125;</span></div></pre></td></tr></table></figure><p>[keyA]和[keyB]得到的都是[object Object],所以[keyB]会把[keyA]覆盖掉，而myObject最后只有一个[object Object]属性。</p><h3 id="方法的name值"><a href="#方法的name值" class="headerlink" title="方法的name值"></a>方法的name值</h3><p>函数的name属性，返回函数名。对象方法也是函数，因此也有name属性</p><p>方法的name属性返回函数名(既方法名)</p><h3 id="Object-is"><a href="#Object-is" class="headerlink" title="Object.is()"></a>Object.is()</h3><p>ES5比较两个值是否相等，只有两个运算符：相等运算符(==)和严格相等运算符(===)。他们都有缺点，前者会自动转换数据类型，后者的NaN不等于自身，以及+0等于-0。</p><p>Object.is()用来比较两个值是否严格相等，与严格比较云算符(===)的行为基本一致。不同之处只有两个：<br>一是+0不等于-0，二是NaN等于自身。</p><h3 id="Object-assign"><a href="#Object-assign" class="headerlink" title="Object.assign()"></a>Object.assign()</h3><h4 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法"></a>基本用法</h4><p>Object.assign()方法用于对象的合并，将原对象的所有可枚举属性，复制到目标对象</p><p>第一个参数是目标对象，后面的参数都是原对象</p><p>注意，如果目标对象与原对象有同名属性，或多个源对象有同名属性，则后面的属性会覆盖前面的属性。</p><p>如果只有一个参数，Object.assign会直接返回该参数</p><p>如果该参数不是对象，则会先转成对象，然后返回</p><p>由于undefined和null无法转成对象，所以如果他们作为参数，就会报错</p><p>如果非对象参数出现在源对象的位置（既非首参数），那么处理规则则有不同。首先这些参数都会转为对象，如果无法转为对象，就会跳过，这意味着，如果undefined和null不在首参数，就不会报错。</p><p>其他类型的值（既数值、字符串、布尔值）不在首参数，也不会报错。但是除了字符串会以数组形式，拷贝入目标对象，其他值都不会产生效果。这是应为只有字符串的的包装对象会产生可枚举属性。</p><p>Object.assign拷贝属性是有限的，只拷贝原对象的自身属性（不拷贝继承属性），也不拷贝不可枚举属性。</p><p>属性名为Symbol值的属性,也会被Object.assign拷贝</p><h4 id="注意点"><a href="#注意点" class="headerlink" title="注意点"></a>注意点</h4><h5 id="一、浅拷贝"><a href="#一、浅拷贝" class="headerlink" title="一、浅拷贝"></a>一、浅拷贝</h5><p>Object.assign方法实行的是浅拷贝，而不是深拷贝。也就是说，如果对象某个属性的值是对象，那么目标对象拷贝得到的是这个对象的引用。</p><h5 id="二、同名属性的替换"><a href="#二、同名属性的替换" class="headerlink" title="二、同名属性的替换"></a>二、同名属性的替换</h5><p>对于这种嵌套的对象，一旦遇到同名属性，Object.assign的处理方法是替换，而不是添加</p><h5 id="三、数组的处理"><a href="#三、数组的处理" class="headerlink" title="三、数组的处理"></a>三、数组的处理</h5><p>Object.assign可以用来处理数组，但是会被数组视为对象</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">Object</span>.assign([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], [<span class="number">4</span>, <span class="number">5</span>])</div><div class="line"><span class="comment">// [4, 5, 3]</span></div></pre></td></tr></table></figure><h5 id="四取值函数的处理"><a href="#四取值函数的处理" class="headerlink" title="四取值函数的处理"></a>四取值函数的处理</h5><p>Object.assign只能进行值的复制，如果要复制的值是一个取值函数，那么将求值后在复制</p><h4 id="常用用途"><a href="#常用用途" class="headerlink" title="常用用途"></a>常用用途</h4><h5 id="一、为对象添加属性"><a href="#一、为对象添加属性" class="headerlink" title="一、为对象添加属性"></a>一、为对象添加属性</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Point</span> </span>&#123;</div><div class="line">    <span class="keyword">constructor</span>(x, y) &#123;</div><div class="line">        <span class="built_in">Object</span>.assign(<span class="keyword">this</span>, &#123;x, y&#125;);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h5 id="二、为对象添加方法"><a href="#二、为对象添加方法" class="headerlink" title="二、为对象添加方法"></a>二、为对象添加方法</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">Object</span>.assign(SomeClass.prototype, &#123;</div><div class="line">    someMethod(arg1, arg2) &#123;</div><div class="line">        ···</div><div class="line">    &#125;,</div><div class="line">    anotherMethod() &#123;</div><div class="line">        ···</div><div class="line">    &#125;</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="comment">// 等同于下面的写法</span></div><div class="line">SomeClass.prototype.someMethod = <span class="function"><span class="keyword">function</span> (<span class="params">arg1, arg2</span>) </span>&#123;</div><div class="line">···</div><div class="line">&#125;;</div><div class="line">SomeClass.prototype.anotherMethod = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">···</div><div class="line">&#125;;</div></pre></td></tr></table></figure><h4 id="三、克隆对象"><a href="#三、克隆对象" class="headerlink" title="三、克隆对象"></a>三、克隆对象</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">clone</span>(<span class="params">origin</span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="built_in">Object</span>.assign(&#123;&#125;, origin);</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>采用这种方法克隆，只能克隆原始对象自身的值，不能克隆它继承的值</p><h4 id="四、合并多个对象"><a href="#四、合并多个对象" class="headerlink" title="四、合并多个对象"></a>四、合并多个对象</h4><p>将多个对象合并到某个对象</p><h4 id="五、为属性指定默认值"><a href="#五、为属性指定默认值" class="headerlink" title="五、为属性指定默认值"></a>五、为属性指定默认值</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> DEFAULTS = &#123;</div><div class="line">    logLevel: <span class="number">0</span>,</div><div class="line">    outputFormat: <span class="string">'html'</span></div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">processContent</span>(<span class="params">options</span>) </span>&#123;</div><div class="line">    options = <span class="built_in">Object</span>.assign(&#123;&#125;, DEFAULTS, options);</div><div class="line">    <span class="built_in">console</span>.log(options);</div><div class="line">    <span class="comment">// ...</span></div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="属性的可枚举性和遍历"><a href="#属性的可枚举性和遍历" class="headerlink" title="属性的可枚举性和遍历"></a>属性的可枚举性和遍历</h3><h4 id="可枚举性"><a href="#可枚举性" class="headerlink" title="可枚举性"></a>可枚举性</h4><p>对象的每个属性都有一个描述对象，用来控制该属性的行为。</p><p>Object.getOwnPropertyDescriptor方法可以获取该属性的描述对象。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> obj = &#123; <span class="attr">foo</span>: <span class="number">123</span> &#125;;</div><div class="line"><span class="built_in">Object</span>.getOwnPropertyDescriptor(obj, <span class="string">'foo'</span>)</div><div class="line"><span class="comment">//  &#123;</span></div><div class="line"><span class="comment">//    value: 123,</span></div><div class="line"><span class="comment">//    writable: true,</span></div><div class="line"><span class="comment">//    enumerable: true,</span></div><div class="line"><span class="comment">//    configurable: true</span></div><div class="line"><span class="comment">//  &#125;</span></div></pre></td></tr></table></figure><p>描述对象的enumerable属性，称为“可枚举性”，如果该属性为false,就表示某些操作会忽略当前属性</p><p>目前，有四个操作会忽略enumerable为fales的属性。</p><blockquote><ul><li>  for…in循环：只遍历对象自身的和继承的可枚举的属性。<br>  Object.keys()：返回对象自身的所有可枚举的属性的键名。<br>  JSON.stringify()：只串行化对象自身的可枚举的属性。<br>  Object.assign()： 忽略enumerable为false的属性，只拷贝对象自身的可枚举的属性。</li><li></li></ul></blockquote><p>这四个操作之中,只有for…in会返回继承的属性，其他三个方法都会忽略继承的属性，只处理对象自身的属性。</p><p>实际上，引入“可枚举”（enumerable）这个概念的最初目的，就是让某些属性可以规避掉for…in操作，不然所有内部属性和方法都会被遍历到。比如，对象原型的toString方法，以及数组的length属性，就通过“可枚举性”，从而避免被for…in遍历到。</p><p>toString和length属性的enumerable都是false，因此for…in不会遍历到这两个继承自原型的属性。</p><p>另外，ES6 规定，所有 Class 的原型的方法都是不可枚举的。</p><p>总的来说，操作中引入继承的属性会让问题复杂化，大多数时候，我们只关心对象自身的属性。所以，尽量不要用for…in循环，而用Object.keys()代替。</p><h4 id="属性的遍历"><a href="#属性的遍历" class="headerlink" title="属性的遍历"></a>属性的遍历</h4><p>ES6 一共有 5 种方法可以遍历对象的属性。</p><p>(1)for…in循环遍历对象自身的和继承的可枚举属性（不含 Symbol 属性）。</p><p>(2)Object.keys返回一个数组，包括对象自身的（不含继承的）所有可枚举属性（不含 Symbol 属性）的键名。</p><p>(3)Object.getOwnPropertyNames返回一个数组，包含对象自身的所有属性（不含 Symbol 属性，但是包括不可枚举属性）的键名。</p><p>(4)bject.getOwnPropertySymbols返回一个数组，包含对象自身的所有 Symbol 属性的键名。</p><p>(5)Reflect.ownKeys返回一个数组，包含对象自身的所有键名，不管键名是 Symbol 或字符串，也不管是否可枚举。</p><p>以上的 5 种方法遍历对象的键名，都遵守同样的属性遍历的次序规则。</p><blockquote><p>-<br>    首先遍历所有数值键，按照数值升序排列。<br>    其次遍历所有字符串键，按照加入时间升序排列。<br>    最后遍历所有 Symbol 键，按照加入时间升序排列。<br>-</p></blockquote><figure class="highlight less"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">Reflect</span><span class="selector-class">.ownKeys</span>(&#123; <span class="selector-attr">[Symbol()]</span><span class="selector-pseudo">:0</span>, <span class="selector-tag">b</span><span class="selector-pseudo">:0</span>, <span class="selector-tag">10</span><span class="selector-pseudo">:0</span>, <span class="selector-tag">2</span><span class="selector-pseudo">:0</span>, <span class="selector-tag">a</span><span class="selector-pseudo">:0</span> &#125;)</div><div class="line"><span class="comment">// ['2', '10', 'b', 'a', Symbol()]</span></div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;ES6学习笔记：对象的扩展&lt;br&gt;
    
    </summary>
    
      <category term="javascript" scheme="https://songzhiguo.github.io/blogs/categories/javascript/"/>
    
    
      <category term="javascript" scheme="https://songzhiguo.github.io/blogs/tags/javascript/"/>
    
  </entry>
  
</feed>
